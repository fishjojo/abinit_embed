#                                                          -*- Automake -*-
# Makefile for ABINIT
# Generated by make-makefiles-fallbacks on 2018/11/12 20:33:34 +0000

#
# IMPORTANT NOTE
#
# Any manual change to this file will systematically be overwritten.
# Please modify the make-makefiles-fallbacks script or its config file instead.
#

AM_CPPFLAGS = -I$(fallbacks_instdir)/include

-include config.mk

all-local:
	-$(MAKE) libxc
	@echo 'Checking build of libxc fallback'
	test -e stamps/libxc-install-stamp
	-$(MAKE) linalg
	@echo 'Checking build of linalg fallback'
	test -e stamps/linalg-install-stamp
	-$(MAKE) netcdf
	@echo 'Checking build of netcdf fallback'
	test -e stamps/netcdf-install-stamp
	-$(MAKE) atompaw
	@echo 'Checking build of atompaw fallback'
	test -e stamps/atompaw-install-stamp
	-$(MAKE) wannier90
	@echo 'Checking build of wannier90 fallback'
	test -e stamps/wannier90-install-stamp
	-$(MAKE) etsf_io
	@echo 'Checking build of etsf_io fallback'
	test -e stamps/etsf_io-install-stamp
	-$(MAKE) bigdft
	@echo 'Checking build of bigdft fallback'
	test -e stamps/bigdft-install-stamp

                    ########################################

# Package: libxc
libxc_pkg_name = @libxc_pkg_name@

if DO_BUILD_LIBXC
libxc: stamps/libxc-install-stamp

stamps/libxc-install-stamp: stamps/libxc-build-stamp
	cd sources/$(libxc_pkg_name) && $(MAKE) install @SET_MAKE@
	@touch stamps/libxc-install-stamp

stamps/libxc-build-stamp: stamps/libxc-config-stamp
	cd sources/$(libxc_pkg_name) && $(MAKE) -j 1 @SET_MAKE@
	@touch stamps/libxc-build-stamp

stamps/libxc-config-stamp: stamps/libxc-patch-stamp
	cd sources/$(libxc_pkg_name) && \
	  CPP="$(CPP)" \
	  CPPFLAGS="$(CPPFLAGS_LIBXC) $(INCLUDES)" \
	  CC="$(CC)" \
	  CFLAGS="$(CFLAGS_LIBXC)" \
	  CXX="$(CXX)" \
	  CXXFLAGS="$(CXXFLAGS_LIBXC)" \
          FCCPP="$(TRUE_CPP)" \
	  F77="$(FC)" \
	  FFLAGS="$(FCFLAGS_FIXEDFORM) $(FCFLAGS_LIBXC_EXT) $(FCFLAGS_LIBXC) $(INCLUDES)" \
	  F90="$(FC)" \
	  F90FLAGS="$(FCFLAGS_FREEFORM) $(FCFLAGS_LIBXC_EXT) $(FCFLAGS_LIBXC) $(INCLUDES)" \
	  FC="$(FC)" \
	  FCFLAGS="$(FCFLAGS_FREEFORM) $(FCFLAGS_LIBXC_EXT) $(FCFLAGS_LIBXC) $(INCLUDES)" \
	  LDFLAGS="$(FC_LDFLAGS_EXTRA) $(LDFLAGS_LIBXC)" \
	  LIBS="$(LIBS_LIBXC) " \
	  AR="$(AR)" \
	  ARFLAGS="$(ARFLAGS)" \
	  RANLIB="$(RANLIB)" \
	  ac_fc_srcext="F90" \
	  /bin/sh ./configure \
	    --prefix="$(fallbacks_instdir)" \
	    --bindir="$(fallbacks_instdir)/bin" \
	    --libdir="$(fallbacks_instdir)/lib" \
	    --program-suffix="-abinit" \
	    $(CFGFLAGS_LIBXC)
	@touch stamps/libxc-config-stamp

stamps/libxc-patch-stamp: stamps/libxc-unfold-stamp
	@echo "No patch to apply"
	@touch stamps/libxc-patch-stamp

stamps/libxc-unfold-stamp:
	cd sources && \
	  gzip -cd $(abinit_tardir)/$(libxc_pkg_name).tar.gz | tar xf -
	@touch stamps/libxc-unfold-stamp
else
libxc:
	@echo "The build of libxc has been disabled"
	@touch stamps/libxc-install-stamp
endif

                    ########################################

# Package clean-up: libxc
clean_libxc:
	rm -rf sources/libxc-3.0.0 stamps/libxc-*
	rm -rf exports/include/xc.h exports/include/xc_config.h exports/include/xc_funcs.h exports/include/xc_unconfig.h exports/include/xc_version.h
	rm -rf exports/lib/libxc.a exports/lib/libxcf90.a
	rm -rf exports/include/libxc_funcs_m.mod exports/include/xc_f90_lib_m.mod exports/include/xc_f90_types_m.mod


                    ########################################

# Package: linalg
linalg_pkg_name = @linalg_pkg_name@

if DO_BUILD_LINALG
linalg: stamps/linalg-install-stamp

stamps/linalg-install-stamp: stamps/linalg-build-stamp
	cd sources/$(linalg_pkg_name) && $(MAKE) install @SET_MAKE@
	@touch stamps/linalg-install-stamp

stamps/linalg-build-stamp: stamps/linalg-config-stamp
	cd sources/$(linalg_pkg_name) && $(MAKE) -j 5 @SET_MAKE@
	@touch stamps/linalg-build-stamp

stamps/linalg-config-stamp: stamps/linalg-patch-stamp
	cd sources/$(linalg_pkg_name) && \
	  CPP="$(CPP)" \
	  CPPFLAGS="$(CPPFLAGS_LINALG) $(INCLUDES)" \
	  CC="$(CC)" \
	  CFLAGS="$(CFLAGS_LINALG)" \
	  CXX="$(CXX)" \
	  CXXFLAGS="$(CXXFLAGS_LINALG)" \
          FCCPP="$(TRUE_CPP)" \
	  F77="$(FC)" \
	  FFLAGS="$(FCFLAGS_FIXEDFORM) $(FCFLAGS_LINALG_EXT) $(FCFLAGS_LINALG) $(INCLUDES)" \
	  F90="$(FC)" \
	  F90FLAGS="$(FCFLAGS_FREEFORM) $(FCFLAGS_LINALG_EXT) $(FCFLAGS_LINALG) $(INCLUDES)" \
	  FC="$(FC)" \
	  FCFLAGS="$(FCFLAGS_FREEFORM) $(FCFLAGS_LINALG_EXT) $(FCFLAGS_LINALG) $(INCLUDES)" \
	  LDFLAGS="$(FC_LDFLAGS_EXTRA) $(LDFLAGS_LINALG)" \
	  LIBS="$(LIBS_LINALG) " \
	  AR="$(AR)" \
	  ARFLAGS="$(ARFLAGS)" \
	  RANLIB="$(RANLIB)" \
	  ac_fc_srcext="F90" \
	  /bin/sh ./configure \
	    --prefix="$(fallbacks_instdir)" \
	    --bindir="$(fallbacks_instdir)/bin" \
	    --libdir="$(fallbacks_instdir)/lib" \
	    --program-suffix="-abinit" \
	    $(CFGFLAGS_LINALG)
	@touch stamps/linalg-config-stamp

stamps/linalg-patch-stamp: stamps/linalg-unfold-stamp
	@echo "No patch to apply"
	@touch stamps/linalg-patch-stamp

stamps/linalg-unfold-stamp:
	cd sources && \
	  gzip -cd $(abinit_tardir)/$(linalg_pkg_name).tar.gz | tar xf -
	@touch stamps/linalg-unfold-stamp
else
linalg:
	@echo "The build of linalg has been disabled"
	@touch stamps/linalg-install-stamp
endif

                    ########################################

# Package clean-up: linalg
clean_linalg:
	rm -rf sources/lapack-abinit_6.10 stamps/linalg-*
	rm -rf exports/include/lapacke.h
	rm -rf exports/lib/libblas.a exports/lib/liblapack.a
	rm -rf exports/include/elpa1


                    ########################################

# Package: netcdf
netcdf_pkg_name = @netcdf_pkg_name@

if DO_BUILD_NETCDF
netcdf: stamps/netcdf-install-stamp

stamps/netcdf-install-stamp: stamps/netcdf-build-stamp
	cd sources/$(netcdf_pkg_name) && $(MAKE) install @SET_MAKE@
	@touch stamps/netcdf-install-stamp

stamps/netcdf-build-stamp: stamps/netcdf-config-stamp
	cd sources/$(netcdf_pkg_name) && $(MAKE) -j 1 @SET_MAKE@
	@touch stamps/netcdf-build-stamp

stamps/netcdf-config-stamp: stamps/netcdf-patch-stamp
	cd sources/$(netcdf_pkg_name) && \
	  CPP="$(CPP)" \
	  CPPFLAGS="$(CPPFLAGS_NETCDF) $(INCLUDES)" \
	  CC="$(CC)" \
	  CFLAGS="$(CFLAGS_NETCDF)" \
	  CXX="$(CXX)" \
	  CXXFLAGS="$(CXXFLAGS_NETCDF)" \
          FCCPP="$(TRUE_CPP)" \
	  F77="$(FC)" \
	  FFLAGS="$(FCFLAGS_FIXEDFORM) $(FCFLAGS_NETCDF_EXT) $(FCFLAGS_NETCDF) $(INCLUDES)" \
	  F90="$(FC)" \
	  F90FLAGS="$(FCFLAGS_FREEFORM) $(FCFLAGS_NETCDF_EXT) $(FCFLAGS_NETCDF) $(INCLUDES)" \
	  FC="$(FC)" \
	  FCFLAGS="$(FCFLAGS_FREEFORM) $(FCFLAGS_NETCDF_EXT) $(FCFLAGS_NETCDF) $(INCLUDES)" \
	  LDFLAGS="$(FC_LDFLAGS_EXTRA) $(LDFLAGS_NETCDF)" \
	  LIBS="$(LIBS_NETCDF) " \
	  AR="$(AR)" \
	  ARFLAGS="$(ARFLAGS)" \
	  RANLIB="$(RANLIB)" \
	  ac_fc_srcext="F90" \
	  /bin/sh ./configure \
	    --prefix="$(fallbacks_instdir)" \
	    --bindir="$(fallbacks_instdir)/bin" \
	    --libdir="$(fallbacks_instdir)/lib" \
	    --program-suffix="-abinit" \
	    $(CFGFLAGS_NETCDF)
	@touch stamps/netcdf-config-stamp

stamps/netcdf-patch-stamp: stamps/netcdf-unfold-stamp
	@echo "No patch to apply"
	@touch stamps/netcdf-patch-stamp

stamps/netcdf-unfold-stamp:
	cd sources && \
	  gzip -cd $(abinit_tardir)/$(netcdf_pkg_name).tar.gz | tar xf -
	@touch stamps/netcdf-unfold-stamp
else
netcdf:
	@echo "The build of netcdf has been disabled"
	@touch stamps/netcdf-install-stamp
endif

                    ########################################

# Package clean-up: netcdf
clean_netcdf:
	rm -rf sources/netcdf-4.1.1 stamps/netcdf-*
	rm -rf exports/bin/nc-config-abinit exports/bin/nccopy-abinit exports/bin/ncdump-abinit exports/bin/ncgen-abinit exports/bin/ncgen3-abinit
	rm -rf exports/include/netcdf.h
	rm -rf exports/lib/libnetcdf.a
	rm -rf exports/include/netcdf.inc exports/include/netcdf.mod exports/include/typesizes.mod


                    ########################################

# Package: atompaw
atompaw_pkg_name = @atompaw_pkg_name@

if DO_BUILD_ATOMPAW
atompaw: stamps/atompaw-install-stamp

stamps/atompaw-install-stamp: stamps/atompaw-build-stamp
	cd sources/$(atompaw_pkg_name) && $(MAKE) install @SET_MAKE@
	@touch stamps/atompaw-install-stamp

stamps/atompaw-build-stamp: stamps/atompaw-config-stamp
	cd sources/$(atompaw_pkg_name) && $(MAKE) -j 1 @SET_MAKE@
	@touch stamps/atompaw-build-stamp

stamps/atompaw-config-stamp: stamps/atompaw-patch-stamp
	cd sources/$(atompaw_pkg_name) && \
	  CPP="$(CPP)" \
	  CPPFLAGS="$(CPPFLAGS_ATOMPAW) $(INCLUDES)" \
	  CC="$(CC)" \
	  CFLAGS="$(CFLAGS_ATOMPAW)" \
	  CXX="$(CXX)" \
	  CXXFLAGS="$(CXXFLAGS_ATOMPAW)" \
          FCCPP="$(TRUE_CPP)" \
	  F77="$(FC)" \
	  FFLAGS="$(FCFLAGS_FIXEDFORM) $(FCFLAGS_ATOMPAW_EXT) $(FCFLAGS_ATOMPAW) $(INCLUDES)" \
	  F90="$(FC)" \
	  F90FLAGS="$(FCFLAGS_FREEFORM) $(FCFLAGS_ATOMPAW_EXT) $(FCFLAGS_ATOMPAW) $(INCLUDES)" \
	  FC="$(FC)" \
	  FCFLAGS="$(FCFLAGS_FREEFORM) $(FCFLAGS_ATOMPAW_EXT) $(FCFLAGS_ATOMPAW) $(INCLUDES)" \
	  LDFLAGS="$(FC_LDFLAGS_EXTRA) $(LDFLAGS_ATOMPAW)" \
	  LIBS="$(LIBS_ATOMPAW) $(lib_linalg_libs) $(lib_libxc_libs)" \
	  AR="$(AR)" \
	  ARFLAGS="$(ARFLAGS)" \
	  RANLIB="$(RANLIB)" \
	  ac_fc_srcext="F90" \
	  /bin/sh ./configure \
	    --prefix="$(fallbacks_instdir)" \
	    --bindir="$(fallbacks_instdir)/bin" \
	    --libdir="$(fallbacks_instdir)/lib" \
	    --program-suffix="-abinit" \
	    $(CFGFLAGS_ATOMPAW)
	@touch stamps/atompaw-config-stamp

stamps/atompaw-patch-stamp: stamps/atompaw-unfold-stamp
	@echo "No patch to apply"
	@touch stamps/atompaw-patch-stamp

stamps/atompaw-unfold-stamp:
	cd sources && \
	  gzip -cd $(abinit_tardir)/$(atompaw_pkg_name).tar.gz | tar xf -
	@touch stamps/atompaw-unfold-stamp
else
atompaw:
	@echo "The build of atompaw has been disabled"
	@touch stamps/atompaw-install-stamp
endif

                    ########################################

# Package clean-up: atompaw
clean_atompaw:
	rm -rf sources/atompaw-4.0.1.0 stamps/atompaw-*
	rm -rf exports/bin/atompaw-abinit exports/bin/graphatom-abinit
	rm -rf exports/lib/libatompaw.a


                    ########################################

# Package: wannier90
wannier90_pkg_name = @wannier90_pkg_name@

if DO_BUILD_WANNIER90
wannier90: stamps/wannier90-install-stamp

stamps/wannier90-install-stamp: stamps/wannier90-build-stamp
	cd sources/$(wannier90_pkg_name) && $(MAKE) install @SET_MAKE@
	@touch stamps/wannier90-install-stamp

stamps/wannier90-build-stamp: stamps/wannier90-config-stamp
	cd sources/$(wannier90_pkg_name) && $(MAKE) -j 4 @SET_MAKE@
	@touch stamps/wannier90-build-stamp

stamps/wannier90-config-stamp: stamps/wannier90-patch-stamp
	cd sources/$(wannier90_pkg_name) && \
	  CPP="$(CPP)" \
	  CPPFLAGS="$(CPPFLAGS_WANNIER90) $(INCLUDES)" \
	  CC="$(CC)" \
	  CFLAGS="$(CFLAGS_WANNIER90)" \
	  CXX="$(CXX)" \
	  CXXFLAGS="$(CXXFLAGS_WANNIER90)" \
          FCCPP="$(TRUE_CPP)" \
	  F77="$(FC)" \
	  FFLAGS="$(FCFLAGS_FIXEDFORM) $(FCFLAGS_WANNIER90_EXT) $(FCFLAGS_WANNIER90) $(INCLUDES)" \
	  F90="$(FC)" \
	  F90FLAGS="$(FCFLAGS_FREEFORM) $(FCFLAGS_WANNIER90_EXT) $(FCFLAGS_WANNIER90) $(INCLUDES)" \
	  FC="$(FC)" \
	  FCFLAGS="$(FCFLAGS_FREEFORM) $(FCFLAGS_WANNIER90_EXT) $(FCFLAGS_WANNIER90) $(INCLUDES)" \
	  LDFLAGS="$(FC_LDFLAGS_EXTRA) $(LDFLAGS_WANNIER90)" \
	  LIBS="$(LIBS_WANNIER90) $(lib_linalg_libs)" \
	  AR="$(AR)" \
	  ARFLAGS="$(ARFLAGS)" \
	  RANLIB="$(RANLIB)" \
	  ac_fc_srcext="F90" \
	  /bin/sh ./configure \
	    --prefix="$(fallbacks_instdir)" \
	    --bindir="$(fallbacks_instdir)/bin" \
	    --libdir="$(fallbacks_instdir)/lib" \
	    --program-suffix="-abinit" \
	    $(CFGFLAGS_WANNIER90)
	@touch stamps/wannier90-config-stamp

stamps/wannier90-patch-stamp: stamps/wannier90-unfold-stamp
	@echo "No patch to apply"
	@touch stamps/wannier90-patch-stamp

stamps/wannier90-unfold-stamp:
	cd sources && \
	  gzip -cd $(abinit_tardir)/$(wannier90_pkg_name).tar.gz | tar xf -
	@touch stamps/wannier90-unfold-stamp
else
wannier90:
	@echo "The build of wannier90 has been disabled"
	@touch stamps/wannier90-install-stamp
endif

                    ########################################

# Package clean-up: wannier90
clean_wannier90:
	rm -rf sources/wannier90-2.0.1.1 stamps/wannier90-*
	rm -rf exports/bin/wannier90.x-abinit exports/bin/postw90.x-abinit exports/bin/w90chk2chk.x-abinit
	rm -rf exports/lib/libwannier90.a


                    ########################################

# Package: etsf_io
etsf_io_pkg_name = @etsf_io_pkg_name@

if DO_BUILD_ETSF_IO
etsf_io: stamps/etsf_io-install-stamp

stamps/etsf_io-install-stamp: stamps/etsf_io-build-stamp
	cd sources/$(etsf_io_pkg_name) && $(MAKE) install @SET_MAKE@
	@touch stamps/etsf_io-install-stamp

stamps/etsf_io-build-stamp: stamps/etsf_io-config-stamp
	cd sources/$(etsf_io_pkg_name) && $(MAKE) -j 4 @SET_MAKE@
	@touch stamps/etsf_io-build-stamp

stamps/etsf_io-config-stamp: stamps/etsf_io-patch-stamp
	cd sources/$(etsf_io_pkg_name) && \
	  CPP="$(CPP)" \
	  CPPFLAGS="$(CPPFLAGS_ETSF_IO) $(INCLUDES)" \
	  CC="$(CC)" \
	  CFLAGS="$(CFLAGS_ETSF_IO)" \
	  CXX="$(CXX)" \
	  CXXFLAGS="$(CXXFLAGS_ETSF_IO)" \
          FCCPP="$(TRUE_CPP)" \
	  F77="$(FC)" \
	  FFLAGS="$(FCFLAGS_FIXEDFORM) $(FCFLAGS_ETSF_IO_EXT) $(FCFLAGS_ETSF_IO) $(INCLUDES)" \
	  F90="$(FC)" \
	  F90FLAGS="$(FCFLAGS_FREEFORM) $(FCFLAGS_ETSF_IO_EXT) $(FCFLAGS_ETSF_IO) $(INCLUDES)" \
	  FC="$(FC)" \
	  FCFLAGS="$(FCFLAGS_FREEFORM) $(FCFLAGS_ETSF_IO_EXT) $(FCFLAGS_ETSF_IO) $(INCLUDES)" \
	  LDFLAGS="$(FC_LDFLAGS_EXTRA) $(LDFLAGS_ETSF_IO)" \
	  LIBS="$(LIBS_ETSF_IO) $(lib_netcdf_libs)" \
	  AR="$(AR)" \
	  ARFLAGS="$(ARFLAGS)" \
	  RANLIB="$(RANLIB)" \
	  ac_fc_srcext="F90" \
	  /bin/sh ./configure \
	    --prefix="$(fallbacks_instdir)" \
	    --bindir="$(fallbacks_instdir)/bin" \
	    --libdir="$(fallbacks_instdir)/lib" \
	    --program-suffix="-abinit" \
	    $(CFGFLAGS_ETSF_IO)
	@touch stamps/etsf_io-config-stamp

stamps/etsf_io-patch-stamp: stamps/etsf_io-unfold-stamp
	@echo "No patch to apply"
	@touch stamps/etsf_io-patch-stamp

stamps/etsf_io-unfold-stamp:
	cd sources && \
	  gzip -cd $(abinit_tardir)/$(etsf_io_pkg_name).tar.gz | tar xf -
	@touch stamps/etsf_io-unfold-stamp
else
etsf_io:
	@echo "The build of etsf_io has been disabled"
	@touch stamps/etsf_io-install-stamp
endif

                    ########################################

# Package clean-up: etsf_io
clean_etsf_io:
	rm -rf sources/etsf_io-1.0.4 stamps/etsf_io-*
	rm -rf exports/bin/etsf_io-abinit
	rm -rf exports/lib/libetsf_io_low_level.a exports/lib/libetsf_io.a exports/lib/libetsf_io_utils.a


                    ########################################

# Package: bigdft
bigdft_pkg_name = @bigdft_pkg_name@

if DO_BUILD_BIGDFT
bigdft: stamps/bigdft-install-stamp

stamps/bigdft-install-stamp: stamps/bigdft-build-stamp
	cd sources/$(bigdft_pkg_name) && $(MAKE) install @SET_MAKE@
	@touch stamps/bigdft-install-stamp

stamps/bigdft-build-stamp: stamps/bigdft-config-stamp
	cd sources/$(bigdft_pkg_name) && $(MAKE) -j 4 @SET_MAKE@
	@touch stamps/bigdft-build-stamp

stamps/bigdft-config-stamp: stamps/bigdft-patch-stamp
	cd sources/$(bigdft_pkg_name) && \
	  CPP="$(CPP)" \
	  CPPFLAGS="$(CPPFLAGS_BIGDFT) $(INCLUDES)" \
	  CC="$(CC)" \
	  CFLAGS="$(CFLAGS_BIGDFT)" \
	  CXX="$(CXX)" \
	  CXXFLAGS="$(CXXFLAGS_BIGDFT)" \
          FCCPP="$(TRUE_CPP)" \
	  F77="$(FC)" \
	  FFLAGS="$(FCFLAGS_FIXEDFORM) $(FCFLAGS_BIGDFT_EXT) $(FCFLAGS_BIGDFT) $(INCLUDES)" \
	  F90="$(FC)" \
	  F90FLAGS="$(FCFLAGS_FREEFORM) $(FCFLAGS_BIGDFT_EXT) $(FCFLAGS_BIGDFT) $(INCLUDES)" \
	  FC="$(FC)" \
	  FCFLAGS="$(FCFLAGS_FREEFORM) $(FCFLAGS_BIGDFT_EXT) $(FCFLAGS_BIGDFT) $(INCLUDES)" \
	  LDFLAGS="$(FC_LDFLAGS_EXTRA) $(LDFLAGS_BIGDFT)" \
	  LIBS="$(LIBS_BIGDFT) $(lib_linalg_libs) $(lib_netcdf_libs) $(lib_etsf_io_libs) $(lib_libxc_libs)" \
	  AR="$(AR)" \
	  ARFLAGS="$(ARFLAGS)" \
	  RANLIB="$(RANLIB)" \
	  ac_fc_srcext="F90" \
	  /bin/sh ./configure \
	    --prefix="$(fallbacks_instdir)" \
	    --bindir="$(fallbacks_instdir)/bin" \
	    --libdir="$(fallbacks_instdir)/lib" \
	    --program-suffix="-abinit" \
	    $(CFGFLAGS_BIGDFT)
	@touch stamps/bigdft-config-stamp

stamps/bigdft-patch-stamp: stamps/bigdft-unfold-stamp
	@echo "No patch to apply"
	@touch stamps/bigdft-patch-stamp

stamps/bigdft-unfold-stamp:
	cd sources && \
	  gzip -cd $(abinit_tardir)/$(bigdft_pkg_name).tar.gz | tar xf -
	@touch stamps/bigdft-unfold-stamp
else
bigdft:
	@echo "The build of bigdft has been disabled"
	@touch stamps/bigdft-install-stamp
endif

                    ########################################

# Package clean-up: bigdft
clean_bigdft:
	rm -rf sources/bigdft-1.7.1.25 stamps/bigdft-*
	rm -rf exports/lib/libyaml.a exports/lib/libabinit.a exports/lib/libbigdft-1.a


                    ########################################
                    ########################################

check-local:
	-cd sources/$(libxc_pkg_name) && $(MAKE) check @SET_MAKE@
	-cd sources/$(linalg_pkg_name) && $(MAKE) check @SET_MAKE@
	-cd sources/$(netcdf_pkg_name) && $(MAKE) check @SET_MAKE@
	-cd sources/$(atompaw_pkg_name) && $(MAKE) check @SET_MAKE@
	-cd sources/$(wannier90_pkg_name) && $(MAKE) check @SET_MAKE@
	-cd sources/$(etsf_io_pkg_name) && $(MAKE) check @SET_MAKE@
	-cd sources/$(bigdft_pkg_name) && $(MAKE) check @SET_MAKE@

clean-local:
	rm -rf sources/* exports/* stamps/*

EXTRA_DIST = \
	autogen.sh \
	wipeout.sh  \
	config/scripts/make-macros-fallbacks  \
	config/scripts/make-makefiles-fallbacks  \
	config/specs/fallbacks.conf  \
	config/wannier90/make-wannier90-patch  \
	config/wannier90/configure.ac  \
	config/wannier90/wannier90-1.2.mk \
	patches/libxc-2.0.1-0002.patch \
	patches/bigdft-1.2.0.2-0004.patch \
	patches/bigdft-abi-1.0.4-0006.patch \
	patches/wannier90-1.2-0001.patch \
	patches/atompaw-3.1.0.2-0001.patch \
	patches/atompaw-3.0.1.5-0001.patch \
	patches/bigdft-1.2.0.2-0001.patch \
	patches/atompaw-3.0.1.9-0001.patch \
	patches/wannier90-1.2-0002.patch \
	patches/bigdft-abi-1.0.4-0005.patch \
	patches/bigdft-abi-1.0.4-0002.patch \
	patches/bigdft-1.2.0.2-0005.patch \
	patches/atompaw-3.1.0.1-0001.patch \
	patches/bigdft-1.7.0.93-0001.patch \
	patches/bigdft-abi-1.0.4-0004.patch \
	patches/bigdft-abi-1.0.4-0003.patch \
	patches/atompaw-3.0.1.8-0001.patch \
	patches/bigdft-1.2.0.5-0001.patch \
	patches/libxc-2.0.1-0001.patch \
	patches/wannier90-1.2-0003.patch \
	patches/bigdft-abi-1.0.4-0007.patch \
	patches/bigdft-1.2.0.2-0002.patch \
	patches/bigdft-1.2.0.2-0003.patch \
	patches/libxc-1.1.0.1-0001.patch \
	transient/lapack-abinit_6.10.tar.gz

