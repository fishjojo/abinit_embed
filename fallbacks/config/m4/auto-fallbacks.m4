# Generated by make-macros-fallbacks on 2018/11/12 20:33:34 +0000

#
# ABINIT fallback support for the "configure" script
#

#
# IMPORTANT NOTE
#
# This file has been automatically generated by the make-macros-fallbacks
# script. If you try to edit it, your changes will systematically be
# overwritten.
#



# ABI_FALLBACK_ATOMPAW()
# ---------------------
#
# Sets all variables needed to handle the ATOMPAW fallback.
#
AC_DEFUN([ABI_FALLBACK_ATOMPAW],[
  dnl Initial setup
  lib_atompaw_incs=""
  lib_atompaw_libs=""
  afb_download="no"
  afb_ready="no"
  afb_tarball="no"
  afb_bins=""
  afb_incs=""
  afb_libs=""

  dnl Define variables needed to build the package
  atompaw_pkg_name="atompaw-4.0.1.0"
  AC_SUBST(atompaw_pkg_name)
  atompaw_pkg_string="AtomPAW version 4.0.1.0 (upstream release)"
  AC_SUBST(atompaw_pkg_string)

  dnl Define options associated to the package
  AC_ARG_ENABLE([ATOMPAW],
    AC_HELP_STRING([--enable-atompaw],
      [AtomPAW version 4.0.1.0 (upstream release)]))
  AC_SUBST(enable_atompaw)

  dnl Set options associated to the package
  if test "${enable_atompaw}" = ""; then
    enable_atompaw="yes"
  fi

  dnl Define environment variables for the package
  AC_ARG_VAR([CFGFLAGS_ATOMPAW],
    [Configuration options for atompaw])
  AC_SUBST(CFGFLAGS_ATOMPAW)
  AC_ARG_VAR([CPP],
    [C preprocessor])
  AC_SUBST(CPP)
  AC_ARG_VAR([CPPFLAGS_ATOMPAW],
    [C preprocessing flags for atompaw])
  AC_SUBST(CPPFLAGS_ATOMPAW)
  AC_ARG_VAR([CC],
    [C compiler])
  AC_SUBST(CC)
  AC_ARG_VAR([CFLAGS_ATOMPAW],
    [C flags for atompaw])
  AC_SUBST(CFLAGS_ATOMPAW)
  AC_ARG_VAR([CXX],
    [C++ compiler])
  AC_SUBST(CC)
  AC_ARG_VAR([CXXFLAGS_ATOMPAW],
    [C++ flags for atompaw])
  AC_SUBST(CXXFLAGS_ATOMPAW)
  AC_ARG_VAR([FC],
    [Fortran compiler])
  AC_SUBST(FC)
  AC_ARG_VAR([FPPFLAGS_ATOMPAW],
    [Fortran preprocessor flags for atompaw (not implemented)])
  AC_SUBST(FPPFLAGS_ATOMPAW)
  AC_ARG_VAR([FCFLAGS_ATOMPAW],
    [Fortran flags for atompaw])
  AC_SUBST(FCFLAGS_ATOMPAW)
  AC_ARG_VAR([LDFLAGS_ATOMPAW],
    [Link flags for atompaw])
  AC_SUBST(LDFLAGS_ATOMPAW)
  AC_ARG_VAR([LIBS_ATOMPAW],
    [Additional libraries for atompaw])
  AC_SUBST(LIBS_ATOMPAW)

  dnl Set environment variables for the package
  if test -z "${CFGFLAGS_ATOMPAW}"; then
    CFGFLAGS_ATOMPAW=""
  fi
  if test -z "${CPPFLAGS_ATOMPAW}"; then
    CPPFLAGS_ATOMPAW="${CPPFLAGS}"
  fi
  if test -z "${CFLAGS_ATOMPAW}"; then
    CFLAGS_ATOMPAW="${CFLAGS}"
  fi
  if test -z "${CXXFLAGS_ATOMPAW}"; then
    CXXFLAGS_ATOMPAW="${CXXFLAGS}"
  fi
  if test -z "${FPPFLAGS_ATOMPAW}"; then
    FPPFLAGS_ATOMPAW="${FPPFLAGS}"
  fi
  if test -z "${FCFLAGS_ATOMPAW}"; then
    FCFLAGS_ATOMPAW="${FCFLAGS}"
  fi
  if test -z "${LDFLAGS_ATOMPAW}"; then
    LDFLAGS_ATOMPAW="${LDFLAGS}"
  fi
  if test -z "${LIBS_ATOMPAW}"; then
    LIBS_ATOMPAW="${LIBS}"
  fi

  if test "${enable_libxc}" = "yes"; then
    LIBS_ATOMPAW="-L\$(fallbacks_instdir)/lib -lxcf90 -lxc ${LIBS_ATOMPAW}"
  else
    LIBS_ATOMPAW="${lib_libxc_libs} ${LIBS_ATOMPAW}"
  fi
  if test "${enable_linalg}" = "yes"; then
    LIBS_ATOMPAW="-L\$(fallbacks_instdir)/lib -llapack -lblas ${LIBS_ATOMPAW}"
  else
    LIBS_ATOMPAW="${lib_linalg_libs} ${LIBS_ATOMPAW}"
  fi


  dnl Check whether to activate fallback
  AC_MSG_CHECKING([whether to enable the ATOMPAW fallback])
  AC_MSG_RESULT([${enable_atompaw}])
  if test "${enable_atompaw}" = "yes"; then

    dnl Check whether command-line fallback options have been specified
    if test "${with_atompaw_libs}" = ""; then

      dnl Check for a tarball repository
      dnl Check MD5 sum of source tarball
      AC_MSG_CHECKING([for a source tarball of ATOMPAW])
      if test -s "${abinit_tardir}/atompaw-4.0.1.0.tar.gz"; then
        AC_MSG_RESULT([yes])
        AX_CHECK_MD5SUM([${abinit_tardir}/atompaw-4.0.1.0.tar.gz],[2a58cd21a5696121741bf948e85eb797])
        case "${abi_md5_ok}" in
          yes)
            afb_tarball="yes"
            AC_MSG_NOTICE([tarball MD5 check succeeded])
            ;;
          unknown)
            afb_tarball="yes"
            AC_MSG_WARN([could not check integrity of tarball])
            ;;
          no)
            AC_MSG_WARN([tarball MD5 check failed])
            ;;
        esac
      else
        AC_MSG_RESULT([no])
      fi

      dnl Get the package
      if test "${afb_ready}" = "no"; then
        for dl_url in "http://www.wfu.edu/~natalie/papers/pwpaw/atompaw-4.0.1.0.tar.gz" "http://forge.abinit.org/fallbacks/atompaw-4.0.1.0.tar.gz"; do
          if test "${afb_tarball}" = "no"; then
            AC_MSG_NOTICE([downloading ATOMPAW - this may take a while])
            rm -f "${abinit_tardir}/atompaw-4.0.1.0.tar.gz"
            ${afb_downloader} ${afb_dlopts}               "${abinit_tardir}/atompaw-4.0.1.0.tar.gz"               "${dl_url}"
            if test -s "${abinit_tardir}/atompaw-4.0.1.0.tar.gz"; then
              AX_CHECK_MD5SUM([${abinit_tardir}/atompaw-4.0.1.0.tar.gz],[2a58cd21a5696121741bf948e85eb797])
              case "${abi_md5_ok}" in
                yes)
                  afb_tarball="yes"
                  AC_MSG_NOTICE([tarball MD5 check succeeded])
                ;;
                unknown)
                  afb_tarball="yes"
                  AC_MSG_WARN([could not check integrity of tarball])
                  ;;
                no)
                  AC_MSG_WARN([tarball MD5 check failed])
                  ;;
              esac
            fi
          fi
        done

        dnl Enable fallback support only if the download was successful
        if test "${afb_tarball}" = "yes"; then
          lib_atompaw_incs=""
          lib_atompaw_libs="-L\$(fallbacks_instdir)/lib -latompaw"
        else
          AC_MSG_ERROR([could not download ATOMPAW fallback tarball
    Disable support for ATOMPAW or download the tarball manually to
    ${abinit_tardir}])
        fi
      fi
    else
      lib_atompaw_incs="${with_atompaw_incs}"
      lib_atompaw_libs="${with_atompaw_libs}"
    fi

  fi

  dnl Apply tricks
  if test "${enable_atompaw}" = "yes"; then
    ABI_TRICKS_ATOMPAW(${fc_vendor},${fc_version})
  fi

  dnl Substitute variables needed for the use of the fallback
  AC_SUBST(lib_atompaw_incs)
  AC_SUBST(lib_atompaw_libs)

  dnl Inform Automake
  AM_CONDITIONAL(DO_TEST_ATOMPAW,test "${enable_atompaw}" = "yes")
  AM_CONDITIONAL(DO_BUILD_ATOMPAW,test "${enable_atompaw}" = "yes")
]) # ABI_FALLBACK_ATOMPAW



# ABI_FALLBACK_BIGDFT()
# ---------------------
#
# Sets all variables needed to handle the BIGDFT fallback.
#
AC_DEFUN([ABI_FALLBACK_BIGDFT],[
  dnl Initial setup
  lib_bigdft_incs=""
  lib_bigdft_libs=""
  afb_download="no"
  afb_ready="no"
  afb_tarball="no"
  afb_bins=""
  afb_incs=""
  afb_libs=""

  dnl Define variables needed to build the package
  bigdft_pkg_name="bigdft-1.7.1.25"
  AC_SUBST(bigdft_pkg_name)
  bigdft_pkg_string="BigDFT library 1.7.1.25 (abinit)"
  AC_SUBST(bigdft_pkg_string)

  dnl Define options associated to the package
  AC_ARG_ENABLE([BIGDFT],
    AC_HELP_STRING([--enable-bigdft],
      [BigDFT library 1.7.1.25 (abinit)]))
  AC_SUBST(enable_bigdft)

  dnl Set options associated to the package
  if test "${enable_bigdft}" = ""; then
    enable_bigdft="yes"
  fi

  dnl Define environment variables for the package
  AC_ARG_VAR([CFGFLAGS_BIGDFT],
    [Configuration options for bigdft])
  AC_SUBST(CFGFLAGS_BIGDFT)
  AC_ARG_VAR([CPP],
    [C preprocessor])
  AC_SUBST(CPP)
  AC_ARG_VAR([CPPFLAGS_BIGDFT],
    [C preprocessing flags for bigdft])
  AC_SUBST(CPPFLAGS_BIGDFT)
  AC_ARG_VAR([CC],
    [C compiler])
  AC_SUBST(CC)
  AC_ARG_VAR([CFLAGS_BIGDFT],
    [C flags for bigdft])
  AC_SUBST(CFLAGS_BIGDFT)
  AC_ARG_VAR([CXX],
    [C++ compiler])
  AC_SUBST(CC)
  AC_ARG_VAR([CXXFLAGS_BIGDFT],
    [C++ flags for bigdft])
  AC_SUBST(CXXFLAGS_BIGDFT)
  AC_ARG_VAR([FC],
    [Fortran compiler])
  AC_SUBST(FC)
  AC_ARG_VAR([FPPFLAGS_BIGDFT],
    [Fortran preprocessor flags for bigdft (not implemented)])
  AC_SUBST(FPPFLAGS_BIGDFT)
  AC_ARG_VAR([FCFLAGS_BIGDFT],
    [Fortran flags for bigdft])
  AC_SUBST(FCFLAGS_BIGDFT)
  AC_ARG_VAR([LDFLAGS_BIGDFT],
    [Link flags for bigdft])
  AC_SUBST(LDFLAGS_BIGDFT)
  AC_ARG_VAR([LIBS_BIGDFT],
    [Additional libraries for bigdft])
  AC_SUBST(LIBS_BIGDFT)

  dnl Set environment variables for the package
  if test -z "${CFGFLAGS_BIGDFT}"; then
    CFGFLAGS_BIGDFT=""
  fi
  if test -z "${CPPFLAGS_BIGDFT}"; then
    CPPFLAGS_BIGDFT="${CPPFLAGS}"
  fi
  if test -z "${CFLAGS_BIGDFT}"; then
    CFLAGS_BIGDFT="${CFLAGS}"
  fi
  if test -z "${CXXFLAGS_BIGDFT}"; then
    CXXFLAGS_BIGDFT="${CXXFLAGS}"
  fi
  if test -z "${FPPFLAGS_BIGDFT}"; then
    FPPFLAGS_BIGDFT="${FPPFLAGS}"
  fi
  if test -z "${FCFLAGS_BIGDFT}"; then
    FCFLAGS_BIGDFT="${FCFLAGS}"
  fi
  if test -z "${LDFLAGS_BIGDFT}"; then
    LDFLAGS_BIGDFT="${LDFLAGS}"
  fi
  if test -z "${LIBS_BIGDFT}"; then
    LIBS_BIGDFT="${LIBS}"
  fi



  dnl Check whether to activate fallback
  AC_MSG_CHECKING([whether to enable the BIGDFT fallback])
  AC_MSG_RESULT([${enable_bigdft}])
  if test "${enable_bigdft}" = "yes"; then

    dnl Check whether command-line fallback options have been specified
    if test "${with_bigdft_incs}" = "" -o "${with_bigdft_libs}" = ""; then

      dnl Check for a tarball repository
      dnl Check MD5 sum of source tarball
      AC_MSG_CHECKING([for a source tarball of BIGDFT])
      if test -s "${abinit_tardir}/bigdft-1.7.1.25.tar.gz"; then
        AC_MSG_RESULT([yes])
        AX_CHECK_MD5SUM([${abinit_tardir}/bigdft-1.7.1.25.tar.gz],[10840584c01fe82bafc6ac125105f583])
        case "${abi_md5_ok}" in
          yes)
            afb_tarball="yes"
            AC_MSG_NOTICE([tarball MD5 check succeeded])
            ;;
          unknown)
            afb_tarball="yes"
            AC_MSG_WARN([could not check integrity of tarball])
            ;;
          no)
            AC_MSG_WARN([tarball MD5 check failed])
            ;;
        esac
      else
        AC_MSG_RESULT([no])
      fi

      dnl Get the package
      if test "${afb_ready}" = "no"; then
        for dl_url in "http://forge.abinit.org/fallbacks/bigdft-1.7.1.25.tar.gz"; do
          if test "${afb_tarball}" = "no"; then
            AC_MSG_NOTICE([downloading BIGDFT - this may take a while])
            rm -f "${abinit_tardir}/bigdft-1.7.1.25.tar.gz"
            ${afb_downloader} ${afb_dlopts}               "${abinit_tardir}/bigdft-1.7.1.25.tar.gz"               "${dl_url}"
            if test -s "${abinit_tardir}/bigdft-1.7.1.25.tar.gz"; then
              AX_CHECK_MD5SUM([${abinit_tardir}/bigdft-1.7.1.25.tar.gz],[10840584c01fe82bafc6ac125105f583])
              case "${abi_md5_ok}" in
                yes)
                  afb_tarball="yes"
                  AC_MSG_NOTICE([tarball MD5 check succeeded])
                ;;
                unknown)
                  afb_tarball="yes"
                  AC_MSG_WARN([could not check integrity of tarball])
                  ;;
                no)
                  AC_MSG_WARN([tarball MD5 check failed])
                  ;;
              esac
            fi
          fi
        done

        dnl Enable fallback support only if the download was successful
        if test "${afb_tarball}" = "yes"; then
          lib_bigdft_incs="-I\$(fallbacks_instdir)/include"
          lib_bigdft_libs="-L\$(fallbacks_instdir)/lib -lbigdft-1 -labinit -lyaml"
        else
          AC_MSG_ERROR([could not download BIGDFT fallback tarball
    Disable support for BIGDFT or download the tarball manually to
    ${abinit_tardir}])
        fi
      fi
    else
      lib_bigdft_incs="${with_bigdft_incs}"
      lib_bigdft_libs="${with_bigdft_libs}"
    fi

  fi

  dnl Apply tricks
  if test "${enable_bigdft}" = "yes"; then
    ABI_TRICKS_BIGDFT(${fc_vendor},${fc_version})
  fi

  dnl Substitute variables needed for the use of the fallback
  AC_SUBST(lib_bigdft_incs)
  AC_SUBST(lib_bigdft_libs)

  dnl Inform Automake
  AM_CONDITIONAL(DO_TEST_BIGDFT,test "${enable_bigdft}" = "yes")
  AM_CONDITIONAL(DO_BUILD_BIGDFT,test "${enable_bigdft}" = "yes")
]) # ABI_FALLBACK_BIGDFT



# ABI_FALLBACK_ETSF_IO()
# ---------------------
#
# Sets all variables needed to handle the ETSF_IO fallback.
#
AC_DEFUN([ABI_FALLBACK_ETSF_IO],[
  dnl Initial setup
  lib_etsf_io_incs=""
  lib_etsf_io_libs=""
  afb_download="no"
  afb_ready="no"
  afb_tarball="no"
  afb_bins=""
  afb_incs=""
  afb_libs=""

  dnl Define variables needed to build the package
  etsf_io_pkg_name="etsf_io-1.0.4"
  AC_SUBST(etsf_io_pkg_name)
  etsf_io_pkg_string="ETSF I/O library 1.0.4 (upstream release)"
  AC_SUBST(etsf_io_pkg_string)

  dnl Define options associated to the package
  AC_ARG_ENABLE([ETSF_IO],
    AC_HELP_STRING([--enable-etsf_io],
      [ETSF I/O library 1.0.4 (upstream release)]))
  AC_SUBST(enable_etsf_io)

  dnl Set options associated to the package
  if test "${enable_etsf_io}" = ""; then
    enable_etsf_io="yes"
  fi

  dnl Define environment variables for the package
  AC_ARG_VAR([CFGFLAGS_ETSF_IO],
    [Configuration options for etsf_io])
  AC_SUBST(CFGFLAGS_ETSF_IO)
  AC_ARG_VAR([CPP],
    [C preprocessor])
  AC_SUBST(CPP)
  AC_ARG_VAR([CPPFLAGS_ETSF_IO],
    [C preprocessing flags for etsf_io])
  AC_SUBST(CPPFLAGS_ETSF_IO)
  AC_ARG_VAR([CC],
    [C compiler])
  AC_SUBST(CC)
  AC_ARG_VAR([CFLAGS_ETSF_IO],
    [C flags for etsf_io])
  AC_SUBST(CFLAGS_ETSF_IO)
  AC_ARG_VAR([CXX],
    [C++ compiler])
  AC_SUBST(CC)
  AC_ARG_VAR([CXXFLAGS_ETSF_IO],
    [C++ flags for etsf_io])
  AC_SUBST(CXXFLAGS_ETSF_IO)
  AC_ARG_VAR([FC],
    [Fortran compiler])
  AC_SUBST(FC)
  AC_ARG_VAR([FPPFLAGS_ETSF_IO],
    [Fortran preprocessor flags for etsf_io (not implemented)])
  AC_SUBST(FPPFLAGS_ETSF_IO)
  AC_ARG_VAR([FCFLAGS_ETSF_IO],
    [Fortran flags for etsf_io])
  AC_SUBST(FCFLAGS_ETSF_IO)
  AC_ARG_VAR([LDFLAGS_ETSF_IO],
    [Link flags for etsf_io])
  AC_SUBST(LDFLAGS_ETSF_IO)
  AC_ARG_VAR([LIBS_ETSF_IO],
    [Additional libraries for etsf_io])
  AC_SUBST(LIBS_ETSF_IO)

  dnl Set environment variables for the package
  if test -z "${CFGFLAGS_ETSF_IO}"; then
    CFGFLAGS_ETSF_IO=""
  fi
  if test -z "${CPPFLAGS_ETSF_IO}"; then
    CPPFLAGS_ETSF_IO="${CPPFLAGS}"
  fi
  if test -z "${CFLAGS_ETSF_IO}"; then
    CFLAGS_ETSF_IO="${CFLAGS}"
  fi
  if test -z "${CXXFLAGS_ETSF_IO}"; then
    CXXFLAGS_ETSF_IO="${CXXFLAGS}"
  fi
  if test -z "${FPPFLAGS_ETSF_IO}"; then
    FPPFLAGS_ETSF_IO="${FPPFLAGS}"
  fi
  if test -z "${FCFLAGS_ETSF_IO}"; then
    FCFLAGS_ETSF_IO="${FCFLAGS}"
  fi
  if test -z "${LDFLAGS_ETSF_IO}"; then
    LDFLAGS_ETSF_IO="${LDFLAGS}"
  fi
  if test -z "${LIBS_ETSF_IO}"; then
    LIBS_ETSF_IO="${LIBS}"
  fi

  if test "${enable_netcdf}" = "yes"; then
    LIBS_ETSF_IO="-L\$(fallbacks_instdir)/lib -lnetcdf ${LIBS_ETSF_IO}"
  else
    LIBS_ETSF_IO="${lib_netcdf_libs} ${LIBS_ETSF_IO}"
  fi


  dnl Check whether to activate fallback
  AC_MSG_CHECKING([whether to enable the ETSF_IO fallback])
  AC_MSG_RESULT([${enable_etsf_io}])
  if test "${enable_etsf_io}" = "yes"; then

    dnl Check whether command-line fallback options have been specified
    if test "${with_etsf_io_incs}" = "" -o "${with_etsf_io_libs}" = ""; then

      dnl Check for a tarball repository
      dnl Check MD5 sum of source tarball
      AC_MSG_CHECKING([for a source tarball of ETSF_IO])
      if test -s "${abinit_tardir}/etsf_io-1.0.4.tar.gz"; then
        AC_MSG_RESULT([yes])
        AX_CHECK_MD5SUM([${abinit_tardir}/etsf_io-1.0.4.tar.gz],[8994bc14b6958d3a4a6c4cf6d2e7c4b6])
        case "${abi_md5_ok}" in
          yes)
            afb_tarball="yes"
            AC_MSG_NOTICE([tarball MD5 check succeeded])
            ;;
          unknown)
            afb_tarball="yes"
            AC_MSG_WARN([could not check integrity of tarball])
            ;;
          no)
            AC_MSG_WARN([tarball MD5 check failed])
            ;;
        esac
      else
        AC_MSG_RESULT([no])
      fi

      dnl Get the package
      if test "${afb_ready}" = "no"; then
        for dl_url in "http://forge.abinit.org/fallbacks/etsf_io-1.0.4.tar.gz" "http://ypouillon.free.fr/abinit/etsf_io-1.0.4.tar.gz"; do
          if test "${afb_tarball}" = "no"; then
            AC_MSG_NOTICE([downloading ETSF_IO - this may take a while])
            rm -f "${abinit_tardir}/etsf_io-1.0.4.tar.gz"
            ${afb_downloader} ${afb_dlopts}               "${abinit_tardir}/etsf_io-1.0.4.tar.gz"               "${dl_url}"
            if test -s "${abinit_tardir}/etsf_io-1.0.4.tar.gz"; then
              AX_CHECK_MD5SUM([${abinit_tardir}/etsf_io-1.0.4.tar.gz],[8994bc14b6958d3a4a6c4cf6d2e7c4b6])
              case "${abi_md5_ok}" in
                yes)
                  afb_tarball="yes"
                  AC_MSG_NOTICE([tarball MD5 check succeeded])
                ;;
                unknown)
                  afb_tarball="yes"
                  AC_MSG_WARN([could not check integrity of tarball])
                  ;;
                no)
                  AC_MSG_WARN([tarball MD5 check failed])
                  ;;
              esac
            fi
          fi
        done

        dnl Enable fallback support only if the download was successful
        if test "${afb_tarball}" = "yes"; then
          lib_etsf_io_incs="-I\$(fallbacks_instdir)/include"
          lib_etsf_io_libs="-L\$(fallbacks_instdir)/lib -letsf_io_utils -letsf_io -letsf_io_low_level"
        else
          AC_MSG_ERROR([could not download ETSF_IO fallback tarball
    Disable support for ETSF_IO or download the tarball manually to
    ${abinit_tardir}])
        fi
      fi
    else
      lib_etsf_io_incs="${with_etsf_io_incs}"
      lib_etsf_io_libs="${with_etsf_io_libs}"
    fi

  fi

  dnl Apply tricks
  if test "${enable_etsf_io}" = "yes"; then
    ABI_TRICKS_ETSF_IO(${fc_vendor},${fc_version})
  fi

  dnl Substitute variables needed for the use of the fallback
  AC_SUBST(lib_etsf_io_incs)
  AC_SUBST(lib_etsf_io_libs)

  dnl Inform Automake
  AM_CONDITIONAL(DO_TEST_ETSF_IO,test "${enable_etsf_io}" = "yes")
  AM_CONDITIONAL(DO_BUILD_ETSF_IO,test "${enable_etsf_io}" = "yes")
]) # ABI_FALLBACK_ETSF_IO



# ABI_FALLBACK_LIBXC()
# ---------------------
#
# Sets all variables needed to handle the LIBXC fallback.
#
AC_DEFUN([ABI_FALLBACK_LIBXC],[
  dnl Initial setup
  lib_libxc_incs=""
  lib_libxc_libs=""
  afb_download="no"
  afb_ready="no"
  afb_tarball="no"
  afb_bins=""
  afb_incs=""
  afb_libs=""

  dnl Define variables needed to build the package
  libxc_pkg_name="libxc-3.0.0"
  AC_SUBST(libxc_pkg_name)
  libxc_pkg_string="LibXC library 3.0.0 (upstream release)"
  AC_SUBST(libxc_pkg_string)

  dnl Define options associated to the package
  AC_ARG_ENABLE([LIBXC],
    AC_HELP_STRING([--enable-libxc],
      [LibXC library 3.0.0 (upstream release)]))
  AC_SUBST(enable_libxc)

  dnl Set options associated to the package
  if test "${enable_libxc}" = ""; then
    enable_libxc="yes"
  fi

  dnl Define environment variables for the package
  AC_ARG_VAR([CFGFLAGS_LIBXC],
    [Configuration options for libxc])
  AC_SUBST(CFGFLAGS_LIBXC)
  AC_ARG_VAR([CPP],
    [C preprocessor])
  AC_SUBST(CPP)
  AC_ARG_VAR([CPPFLAGS_LIBXC],
    [C preprocessing flags for libxc])
  AC_SUBST(CPPFLAGS_LIBXC)
  AC_ARG_VAR([CC],
    [C compiler])
  AC_SUBST(CC)
  AC_ARG_VAR([CFLAGS_LIBXC],
    [C flags for libxc])
  AC_SUBST(CFLAGS_LIBXC)
  AC_ARG_VAR([CXX],
    [C++ compiler])
  AC_SUBST(CC)
  AC_ARG_VAR([CXXFLAGS_LIBXC],
    [C++ flags for libxc])
  AC_SUBST(CXXFLAGS_LIBXC)
  AC_ARG_VAR([FC],
    [Fortran compiler])
  AC_SUBST(FC)
  AC_ARG_VAR([FPPFLAGS_LIBXC],
    [Fortran preprocessor flags for libxc (not implemented)])
  AC_SUBST(FPPFLAGS_LIBXC)
  AC_ARG_VAR([FCFLAGS_LIBXC],
    [Fortran flags for libxc])
  AC_SUBST(FCFLAGS_LIBXC)
  AC_ARG_VAR([LDFLAGS_LIBXC],
    [Link flags for libxc])
  AC_SUBST(LDFLAGS_LIBXC)
  AC_ARG_VAR([LIBS_LIBXC],
    [Additional libraries for libxc])
  AC_SUBST(LIBS_LIBXC)

  dnl Set environment variables for the package
  if test -z "${CFGFLAGS_LIBXC}"; then
    CFGFLAGS_LIBXC=""
  fi
  if test -z "${CPPFLAGS_LIBXC}"; then
    CPPFLAGS_LIBXC="${CPPFLAGS}"
  fi
  if test -z "${CFLAGS_LIBXC}"; then
    CFLAGS_LIBXC="${CFLAGS}"
  fi
  if test -z "${CXXFLAGS_LIBXC}"; then
    CXXFLAGS_LIBXC="${CXXFLAGS}"
  fi
  if test -z "${FPPFLAGS_LIBXC}"; then
    FPPFLAGS_LIBXC="${FPPFLAGS}"
  fi
  if test -z "${FCFLAGS_LIBXC}"; then
    FCFLAGS_LIBXC="${FCFLAGS}"
  fi
  if test -z "${LDFLAGS_LIBXC}"; then
    LDFLAGS_LIBXC="${LDFLAGS}"
  fi
  if test -z "${LIBS_LIBXC}"; then
    LIBS_LIBXC="${LIBS}"
  fi



  dnl Check whether to activate fallback
  AC_MSG_CHECKING([whether to enable the LIBXC fallback])
  AC_MSG_RESULT([${enable_libxc}])
  if test "${enable_libxc}" = "yes"; then

    dnl Check whether command-line fallback options have been specified
    if test "${with_libxc_incs}" = "" -o "${with_libxc_libs}" = ""; then

      dnl Check for a tarball repository
      dnl Check MD5 sum of source tarball
      AC_MSG_CHECKING([for a source tarball of LIBXC])
      if test -s "${abinit_tardir}/libxc-3.0.0.tar.gz"; then
        AC_MSG_RESULT([yes])
        AX_CHECK_MD5SUM([${abinit_tardir}/libxc-3.0.0.tar.gz],[8227fa3053f8fc215bd9d7b0d36de03c])
        case "${abi_md5_ok}" in
          yes)
            afb_tarball="yes"
            AC_MSG_NOTICE([tarball MD5 check succeeded])
            ;;
          unknown)
            afb_tarball="yes"
            AC_MSG_WARN([could not check integrity of tarball])
            ;;
          no)
            AC_MSG_WARN([tarball MD5 check failed])
            ;;
        esac
      else
        AC_MSG_RESULT([no])
      fi

      dnl Get the package
      if test "${afb_ready}" = "no"; then
        for dl_url in "http://www.tddft.org/programs/octopus/down.php?file=libxc/libxc-3.0.0.tar.gz" "http://forge.abinit.org/fallbacks/libxc-3.0.0.tar.gz"; do
          if test "${afb_tarball}" = "no"; then
            AC_MSG_NOTICE([downloading LIBXC - this may take a while])
            rm -f "${abinit_tardir}/libxc-3.0.0.tar.gz"
            ${afb_downloader} ${afb_dlopts}               "${abinit_tardir}/libxc-3.0.0.tar.gz"               "${dl_url}"
            if test -s "${abinit_tardir}/libxc-3.0.0.tar.gz"; then
              AX_CHECK_MD5SUM([${abinit_tardir}/libxc-3.0.0.tar.gz],[8227fa3053f8fc215bd9d7b0d36de03c])
              case "${abi_md5_ok}" in
                yes)
                  afb_tarball="yes"
                  AC_MSG_NOTICE([tarball MD5 check succeeded])
                ;;
                unknown)
                  afb_tarball="yes"
                  AC_MSG_WARN([could not check integrity of tarball])
                  ;;
                no)
                  AC_MSG_WARN([tarball MD5 check failed])
                  ;;
              esac
            fi
          fi
        done

        dnl Enable fallback support only if the download was successful
        if test "${afb_tarball}" = "yes"; then
          lib_libxc_incs="-I\$(fallbacks_instdir)/include"
          lib_libxc_libs="-L\$(fallbacks_instdir)/lib -lxcf90 -lxc"
        else
          AC_MSG_ERROR([could not download LIBXC fallback tarball
    Disable support for LIBXC or download the tarball manually to
    ${abinit_tardir}])
        fi
      fi
    else
      lib_libxc_incs="${with_libxc_incs}"
      lib_libxc_libs="${with_libxc_libs}"
    fi

  fi

  dnl Apply tricks
  if test "${enable_libxc}" = "yes"; then
    ABI_TRICKS_LIBXC(${fc_vendor},${fc_version})
  fi

  dnl Substitute variables needed for the use of the fallback
  AC_SUBST(lib_libxc_incs)
  AC_SUBST(lib_libxc_libs)

  dnl Inform Automake
  AM_CONDITIONAL(DO_TEST_LIBXC,test "${enable_libxc}" = "yes")
  AM_CONDITIONAL(DO_BUILD_LIBXC,test "${enable_libxc}" = "yes")
]) # ABI_FALLBACK_LIBXC



# ABI_FALLBACK_LINALG()
# ---------------------
#
# Sets all variables needed to handle the LINALG fallback.
#
AC_DEFUN([ABI_FALLBACK_LINALG],[
  dnl Initial setup
  lib_linalg_incs=""
  lib_linalg_libs=""
  afb_download="no"
  afb_ready="no"
  afb_tarball="no"
  afb_bins=""
  afb_incs=""
  afb_libs=""

  dnl Define variables needed to build the package
  linalg_pkg_name="lapack-abinit_6.10"
  AC_SUBST(linalg_pkg_name)
  linalg_pkg_string="Oldish BLAS/LAPACK implementation customized for Abinit"
  AC_SUBST(linalg_pkg_string)

  dnl Define options associated to the package
  AC_ARG_ENABLE([LINALG],
    AC_HELP_STRING([--enable-linalg],
      [Oldish BLAS/LAPACK implementation customized for Abinit]))
  AC_SUBST(enable_linalg)

  dnl Set options associated to the package
  if test "${enable_linalg}" = ""; then
    enable_linalg="yes"
  fi

  dnl Define environment variables for the package
  AC_ARG_VAR([CFGFLAGS_LINALG],
    [Configuration options for linalg])
  AC_SUBST(CFGFLAGS_LINALG)
  AC_ARG_VAR([CPP],
    [C preprocessor])
  AC_SUBST(CPP)
  AC_ARG_VAR([CPPFLAGS_LINALG],
    [C preprocessing flags for linalg])
  AC_SUBST(CPPFLAGS_LINALG)
  AC_ARG_VAR([CC],
    [C compiler])
  AC_SUBST(CC)
  AC_ARG_VAR([CFLAGS_LINALG],
    [C flags for linalg])
  AC_SUBST(CFLAGS_LINALG)
  AC_ARG_VAR([CXX],
    [C++ compiler])
  AC_SUBST(CC)
  AC_ARG_VAR([CXXFLAGS_LINALG],
    [C++ flags for linalg])
  AC_SUBST(CXXFLAGS_LINALG)
  AC_ARG_VAR([FC],
    [Fortran compiler])
  AC_SUBST(FC)
  AC_ARG_VAR([FPPFLAGS_LINALG],
    [Fortran preprocessor flags for linalg (not implemented)])
  AC_SUBST(FPPFLAGS_LINALG)
  AC_ARG_VAR([FCFLAGS_LINALG],
    [Fortran flags for linalg])
  AC_SUBST(FCFLAGS_LINALG)
  AC_ARG_VAR([LDFLAGS_LINALG],
    [Link flags for linalg])
  AC_SUBST(LDFLAGS_LINALG)
  AC_ARG_VAR([LIBS_LINALG],
    [Additional libraries for linalg])
  AC_SUBST(LIBS_LINALG)

  dnl Set environment variables for the package
  if test -z "${CFGFLAGS_LINALG}"; then
    CFGFLAGS_LINALG=""
  fi
  if test -z "${CPPFLAGS_LINALG}"; then
    CPPFLAGS_LINALG="${CPPFLAGS}"
  fi
  if test -z "${CFLAGS_LINALG}"; then
    CFLAGS_LINALG="${CFLAGS}"
  fi
  if test -z "${CXXFLAGS_LINALG}"; then
    CXXFLAGS_LINALG="${CXXFLAGS}"
  fi
  if test -z "${FPPFLAGS_LINALG}"; then
    FPPFLAGS_LINALG="${FPPFLAGS}"
  fi
  if test -z "${FCFLAGS_LINALG}"; then
    FCFLAGS_LINALG="${FCFLAGS}"
  fi
  if test -z "${LDFLAGS_LINALG}"; then
    LDFLAGS_LINALG="${LDFLAGS}"
  fi
  if test -z "${LIBS_LINALG}"; then
    LIBS_LINALG="${LIBS}"
  fi



  dnl Check whether to activate fallback
  AC_MSG_CHECKING([whether to enable the LINALG fallback])
  AC_MSG_RESULT([${enable_linalg}])
  if test "${enable_linalg}" = "yes"; then

    dnl Check whether command-line fallback options have been specified
    if test "${with_linalg_incs}" = "" -o "${with_linalg_libs}" = ""; then

      dnl Check for a tarball repository
      dnl Check MD5 sum of source tarball
      AC_MSG_CHECKING([for a source tarball of LINALG])
      if test -s "${abinit_tardir}/lapack-abinit_6.10.tar.gz"; then
        AC_MSG_RESULT([yes])
        AX_CHECK_MD5SUM([${abinit_tardir}/lapack-abinit_6.10.tar.gz],[12169d5c702ccc63117f4591cd3f1225])
        case "${abi_md5_ok}" in
          yes)
            afb_tarball="yes"
            AC_MSG_NOTICE([tarball MD5 check succeeded])
            ;;
          unknown)
            afb_tarball="yes"
            AC_MSG_WARN([could not check integrity of tarball])
            ;;
          no)
            AC_MSG_WARN([tarball MD5 check failed])
            ;;
        esac
      else
        AC_MSG_RESULT([no])
      fi

      dnl Get the package
      if test "${afb_ready}" = "no"; then
        for dl_url in "http://forge.abinit.org/fallbacks/lapack-abinit_6.10.tar.gz" "http://ypouillon.free.fr/abinit/lapack-abinit_6.10.tar.gz"; do
          if test "${afb_tarball}" = "no"; then
            AC_MSG_NOTICE([downloading LINALG - this may take a while])
            rm -f "${abinit_tardir}/lapack-abinit_6.10.tar.gz"
            ${afb_downloader} ${afb_dlopts}               "${abinit_tardir}/lapack-abinit_6.10.tar.gz"               "${dl_url}"
            if test -s "${abinit_tardir}/lapack-abinit_6.10.tar.gz"; then
              AX_CHECK_MD5SUM([${abinit_tardir}/lapack-abinit_6.10.tar.gz],[12169d5c702ccc63117f4591cd3f1225])
              case "${abi_md5_ok}" in
                yes)
                  afb_tarball="yes"
                  AC_MSG_NOTICE([tarball MD5 check succeeded])
                ;;
                unknown)
                  afb_tarball="yes"
                  AC_MSG_WARN([could not check integrity of tarball])
                  ;;
                no)
                  AC_MSG_WARN([tarball MD5 check failed])
                  ;;
              esac
            fi
          fi
        done

        dnl Enable fallback support only if the download was successful
        if test "${afb_tarball}" = "yes"; then
          lib_linalg_incs="-I\$(fallbacks_instdir)/include"
          lib_linalg_libs="-L\$(fallbacks_instdir)/lib -llapack -lblas"
        else
          AC_MSG_ERROR([could not download LINALG fallback tarball
    Disable support for LINALG or download the tarball manually to
    ${abinit_tardir}])
        fi
      fi
    else
      lib_linalg_incs="${with_linalg_incs}"
      lib_linalg_libs="${with_linalg_libs}"
    fi

  fi

  dnl Apply tricks
  if test "${enable_linalg}" = "yes"; then
    ABI_TRICKS_LINALG(${fc_vendor},${fc_version})
  fi

  dnl Substitute variables needed for the use of the fallback
  AC_SUBST(lib_linalg_incs)
  AC_SUBST(lib_linalg_libs)

  dnl Inform Automake
  AM_CONDITIONAL(DO_TEST_LINALG,test "${enable_linalg}" = "yes")
  AM_CONDITIONAL(DO_BUILD_LINALG,test "${enable_linalg}" = "yes")
]) # ABI_FALLBACK_LINALG



# ABI_FALLBACK_NETCDF()
# ---------------------
#
# Sets all variables needed to handle the NETCDF fallback.
#
AC_DEFUN([ABI_FALLBACK_NETCDF],[
  dnl Initial setup
  lib_netcdf_incs=""
  lib_netcdf_libs=""
  afb_download="no"
  afb_ready="no"
  afb_tarball="no"
  afb_bins=""
  afb_incs=""
  afb_libs=""

  dnl Define variables needed to build the package
  netcdf_pkg_name="netcdf-4.1.1"
  AC_SUBST(netcdf_pkg_name)
  netcdf_pkg_string="NetCDF library 4.1.1 (upstream release)"
  AC_SUBST(netcdf_pkg_string)

  dnl Define options associated to the package
  AC_ARG_ENABLE([NETCDF],
    AC_HELP_STRING([--enable-netcdf],
      [NetCDF library 4.1.1 (upstream release)]))
  AC_SUBST(enable_netcdf)

  dnl Set options associated to the package
  if test "${enable_netcdf}" = ""; then
    enable_netcdf="yes"
  fi

  dnl Define environment variables for the package
  AC_ARG_VAR([CFGFLAGS_NETCDF],
    [Configuration options for netcdf])
  AC_SUBST(CFGFLAGS_NETCDF)
  AC_ARG_VAR([CPP],
    [C preprocessor])
  AC_SUBST(CPP)
  AC_ARG_VAR([CPPFLAGS_NETCDF],
    [C preprocessing flags for netcdf])
  AC_SUBST(CPPFLAGS_NETCDF)
  AC_ARG_VAR([CC],
    [C compiler])
  AC_SUBST(CC)
  AC_ARG_VAR([CFLAGS_NETCDF],
    [C flags for netcdf])
  AC_SUBST(CFLAGS_NETCDF)
  AC_ARG_VAR([CXX],
    [C++ compiler])
  AC_SUBST(CC)
  AC_ARG_VAR([CXXFLAGS_NETCDF],
    [C++ flags for netcdf])
  AC_SUBST(CXXFLAGS_NETCDF)
  AC_ARG_VAR([FC],
    [Fortran compiler])
  AC_SUBST(FC)
  AC_ARG_VAR([FPPFLAGS_NETCDF],
    [Fortran preprocessor flags for netcdf (not implemented)])
  AC_SUBST(FPPFLAGS_NETCDF)
  AC_ARG_VAR([FCFLAGS_NETCDF],
    [Fortran flags for netcdf])
  AC_SUBST(FCFLAGS_NETCDF)
  AC_ARG_VAR([LDFLAGS_NETCDF],
    [Link flags for netcdf])
  AC_SUBST(LDFLAGS_NETCDF)
  AC_ARG_VAR([LIBS_NETCDF],
    [Additional libraries for netcdf])
  AC_SUBST(LIBS_NETCDF)

  dnl Set environment variables for the package
  if test -z "${CFGFLAGS_NETCDF}"; then
    CFGFLAGS_NETCDF=""
  fi
  if test -z "${CPPFLAGS_NETCDF}"; then
    CPPFLAGS_NETCDF="${CPPFLAGS}"
  fi
  if test -z "${CFLAGS_NETCDF}"; then
    CFLAGS_NETCDF="${CFLAGS}"
  fi
  if test -z "${CXXFLAGS_NETCDF}"; then
    CXXFLAGS_NETCDF="${CXXFLAGS}"
  fi
  if test -z "${FPPFLAGS_NETCDF}"; then
    FPPFLAGS_NETCDF="${FPPFLAGS}"
  fi
  if test -z "${FCFLAGS_NETCDF}"; then
    FCFLAGS_NETCDF="${FCFLAGS}"
  fi
  if test -z "${LDFLAGS_NETCDF}"; then
    LDFLAGS_NETCDF="${LDFLAGS}"
  fi
  if test -z "${LIBS_NETCDF}"; then
    LIBS_NETCDF="${LIBS}"
  fi



  dnl Check whether to activate fallback
  AC_MSG_CHECKING([whether to enable the NETCDF fallback])
  AC_MSG_RESULT([${enable_netcdf}])
  if test "${enable_netcdf}" = "yes"; then

    dnl Check whether command-line fallback options have been specified
    if test "${with_netcdf_incs}" = "" -o "${with_netcdf_libs}" = ""; then

      dnl Check for a tarball repository
      dnl Check MD5 sum of source tarball
      AC_MSG_CHECKING([for a source tarball of NETCDF])
      if test -s "${abinit_tardir}/netcdf-4.1.1.tar.gz"; then
        AC_MSG_RESULT([yes])
        AX_CHECK_MD5SUM([${abinit_tardir}/netcdf-4.1.1.tar.gz],[79c5ff14c80d5e18dd8f1fceeae1c8e1])
        case "${abi_md5_ok}" in
          yes)
            afb_tarball="yes"
            AC_MSG_NOTICE([tarball MD5 check succeeded])
            ;;
          unknown)
            afb_tarball="yes"
            AC_MSG_WARN([could not check integrity of tarball])
            ;;
          no)
            AC_MSG_WARN([tarball MD5 check failed])
            ;;
        esac
      else
        AC_MSG_RESULT([no])
      fi

      dnl Get the package
      if test "${afb_ready}" = "no"; then
        for dl_url in "http://www.unidata.ucar.edu/downloads/netcdf/ftp/netcdf-4.1.1.tar.gz" "http://forge.abinit.org/fallbacks/netcdf-4.1.1.tar.gz"; do
          if test "${afb_tarball}" = "no"; then
            AC_MSG_NOTICE([downloading NETCDF - this may take a while])
            rm -f "${abinit_tardir}/netcdf-4.1.1.tar.gz"
            ${afb_downloader} ${afb_dlopts}               "${abinit_tardir}/netcdf-4.1.1.tar.gz"               "${dl_url}"
            if test -s "${abinit_tardir}/netcdf-4.1.1.tar.gz"; then
              AX_CHECK_MD5SUM([${abinit_tardir}/netcdf-4.1.1.tar.gz],[79c5ff14c80d5e18dd8f1fceeae1c8e1])
              case "${abi_md5_ok}" in
                yes)
                  afb_tarball="yes"
                  AC_MSG_NOTICE([tarball MD5 check succeeded])
                ;;
                unknown)
                  afb_tarball="yes"
                  AC_MSG_WARN([could not check integrity of tarball])
                  ;;
                no)
                  AC_MSG_WARN([tarball MD5 check failed])
                  ;;
              esac
            fi
          fi
        done

        dnl Enable fallback support only if the download was successful
        if test "${afb_tarball}" = "yes"; then
          lib_netcdf_incs="-I\$(fallbacks_instdir)/include"
          lib_netcdf_libs="-L\$(fallbacks_instdir)/lib -lnetcdf"
        else
          AC_MSG_ERROR([could not download NETCDF fallback tarball
    Disable support for NETCDF or download the tarball manually to
    ${abinit_tardir}])
        fi
      fi
    else
      lib_netcdf_incs="${with_netcdf_incs}"
      lib_netcdf_libs="${with_netcdf_libs}"
    fi

  fi

  dnl Apply tricks
  if test "${enable_netcdf}" = "yes"; then
    ABI_TRICKS_NETCDF(${fc_vendor},${fc_version})
  fi

  dnl Substitute variables needed for the use of the fallback
  AC_SUBST(lib_netcdf_incs)
  AC_SUBST(lib_netcdf_libs)

  dnl Inform Automake
  AM_CONDITIONAL(DO_TEST_NETCDF,test "${enable_netcdf}" = "yes")
  AM_CONDITIONAL(DO_BUILD_NETCDF,test "${enable_netcdf}" = "yes")
]) # ABI_FALLBACK_NETCDF



# ABI_FALLBACK_WANNIER90()
# ---------------------
#
# Sets all variables needed to handle the WANNIER90 fallback.
#
AC_DEFUN([ABI_FALLBACK_WANNIER90],[
  dnl Initial setup
  lib_wannier90_incs=""
  lib_wannier90_libs=""
  afb_download="no"
  afb_ready="no"
  afb_tarball="no"
  afb_bins=""
  afb_incs=""
  afb_libs=""

  dnl Define variables needed to build the package
  wannier90_pkg_name="wannier90-2.0.1.1"
  AC_SUBST(wannier90_pkg_name)
  wannier90_pkg_string="Wannier90 program 2.0.1.1 (patched edition)"
  AC_SUBST(wannier90_pkg_string)

  dnl Define options associated to the package
  AC_ARG_ENABLE([WANNIER90],
    AC_HELP_STRING([--enable-wannier90],
      [Wannier90 program 2.0.1.1 (patched edition)]))
  AC_SUBST(enable_wannier90)

  dnl Set options associated to the package
  if test "${enable_wannier90}" = ""; then
    enable_wannier90="yes"
  fi

  dnl Define environment variables for the package
  AC_ARG_VAR([CFGFLAGS_WANNIER90],
    [Configuration options for wannier90])
  AC_SUBST(CFGFLAGS_WANNIER90)
  AC_ARG_VAR([CPP],
    [C preprocessor])
  AC_SUBST(CPP)
  AC_ARG_VAR([CPPFLAGS_WANNIER90],
    [C preprocessing flags for wannier90])
  AC_SUBST(CPPFLAGS_WANNIER90)
  AC_ARG_VAR([CC],
    [C compiler])
  AC_SUBST(CC)
  AC_ARG_VAR([CFLAGS_WANNIER90],
    [C flags for wannier90])
  AC_SUBST(CFLAGS_WANNIER90)
  AC_ARG_VAR([CXX],
    [C++ compiler])
  AC_SUBST(CC)
  AC_ARG_VAR([CXXFLAGS_WANNIER90],
    [C++ flags for wannier90])
  AC_SUBST(CXXFLAGS_WANNIER90)
  AC_ARG_VAR([FC],
    [Fortran compiler])
  AC_SUBST(FC)
  AC_ARG_VAR([FPPFLAGS_WANNIER90],
    [Fortran preprocessor flags for wannier90 (not implemented)])
  AC_SUBST(FPPFLAGS_WANNIER90)
  AC_ARG_VAR([FCFLAGS_WANNIER90],
    [Fortran flags for wannier90])
  AC_SUBST(FCFLAGS_WANNIER90)
  AC_ARG_VAR([LDFLAGS_WANNIER90],
    [Link flags for wannier90])
  AC_SUBST(LDFLAGS_WANNIER90)
  AC_ARG_VAR([LIBS_WANNIER90],
    [Additional libraries for wannier90])
  AC_SUBST(LIBS_WANNIER90)

  dnl Set environment variables for the package
  if test -z "${CFGFLAGS_WANNIER90}"; then
    CFGFLAGS_WANNIER90=""
  fi
  if test -z "${CPPFLAGS_WANNIER90}"; then
    CPPFLAGS_WANNIER90="${CPPFLAGS}"
  fi
  if test -z "${CFLAGS_WANNIER90}"; then
    CFLAGS_WANNIER90="${CFLAGS}"
  fi
  if test -z "${CXXFLAGS_WANNIER90}"; then
    CXXFLAGS_WANNIER90="${CXXFLAGS}"
  fi
  if test -z "${FPPFLAGS_WANNIER90}"; then
    FPPFLAGS_WANNIER90="${FPPFLAGS}"
  fi
  if test -z "${FCFLAGS_WANNIER90}"; then
    FCFLAGS_WANNIER90="${FCFLAGS}"
  fi
  if test -z "${LDFLAGS_WANNIER90}"; then
    LDFLAGS_WANNIER90="${LDFLAGS}"
  fi
  if test -z "${LIBS_WANNIER90}"; then
    LIBS_WANNIER90="${LIBS}"
  fi

  if test "${enable_linalg}" = "yes"; then
    LIBS_WANNIER90="-L\$(fallbacks_instdir)/lib -llapack -lblas ${LIBS_WANNIER90}"
  else
    LIBS_WANNIER90="${lib_linalg_libs} ${LIBS_WANNIER90}"
  fi


  dnl Check whether to activate fallback
  AC_MSG_CHECKING([whether to enable the WANNIER90 fallback])
  AC_MSG_RESULT([${enable_wannier90}])
  if test "${enable_wannier90}" = "yes"; then

    dnl Check whether command-line fallback options have been specified
    if test "${with_wannier90_libs}" = ""; then

      dnl Check for a tarball repository
      dnl Check MD5 sum of source tarball
      AC_MSG_CHECKING([for a source tarball of WANNIER90])
      if test -s "${abinit_tardir}/wannier90-2.0.1.1.tar.gz"; then
        AC_MSG_RESULT([yes])
        AX_CHECK_MD5SUM([${abinit_tardir}/wannier90-2.0.1.1.tar.gz],[a8b3819da1325d9dbdd2579761aa4265])
        case "${abi_md5_ok}" in
          yes)
            afb_tarball="yes"
            AC_MSG_NOTICE([tarball MD5 check succeeded])
            ;;
          unknown)
            afb_tarball="yes"
            AC_MSG_WARN([could not check integrity of tarball])
            ;;
          no)
            AC_MSG_WARN([tarball MD5 check failed])
            ;;
        esac
      else
        AC_MSG_RESULT([no])
      fi

      dnl Get the package
      if test "${afb_ready}" = "no"; then
        for dl_url in "http://forge.abinit.org/fallbacks/wannier90-2.0.1.1.release.tar.gz" "https://launchpad.net/wannier90/2.0/2.0.1.1/+download/wannier90-2.0.1.1.tar.gz"; do
          if test "${afb_tarball}" = "no"; then
            AC_MSG_NOTICE([downloading WANNIER90 - this may take a while])
            rm -f "${abinit_tardir}/wannier90-2.0.1.1.tar.gz"
            ${afb_downloader} ${afb_dlopts}               "${abinit_tardir}/wannier90-2.0.1.1.tar.gz"               "${dl_url}"
            if test -s "${abinit_tardir}/wannier90-2.0.1.1.tar.gz"; then
              AX_CHECK_MD5SUM([${abinit_tardir}/wannier90-2.0.1.1.tar.gz],[a8b3819da1325d9dbdd2579761aa4265])
              case "${abi_md5_ok}" in
                yes)
                  afb_tarball="yes"
                  AC_MSG_NOTICE([tarball MD5 check succeeded])
                ;;
                unknown)
                  afb_tarball="yes"
                  AC_MSG_WARN([could not check integrity of tarball])
                  ;;
                no)
                  AC_MSG_WARN([tarball MD5 check failed])
                  ;;
              esac
            fi
          fi
        done

        dnl Enable fallback support only if the download was successful
        if test "${afb_tarball}" = "yes"; then
          lib_wannier90_incs=""
          lib_wannier90_libs="-L\$(fallbacks_instdir)/lib -lwannier90"
        else
          AC_MSG_ERROR([could not download WANNIER90 fallback tarball
    Disable support for WANNIER90 or download the tarball manually to
    ${abinit_tardir}])
        fi
      fi
    else
      lib_wannier90_incs="${with_wannier90_incs}"
      lib_wannier90_libs="${with_wannier90_libs}"
    fi

  fi

  dnl Apply tricks
  if test "${enable_wannier90}" = "yes"; then
    ABI_TRICKS_WANNIER90(${fc_vendor},${fc_version})
  fi

  dnl Substitute variables needed for the use of the fallback
  AC_SUBST(lib_wannier90_incs)
  AC_SUBST(lib_wannier90_libs)

  dnl Inform Automake
  AM_CONDITIONAL(DO_TEST_WANNIER90,test "${enable_wannier90}" = "yes")
  AM_CONDITIONAL(DO_BUILD_WANNIER90,test "${enable_wannier90}" = "yes")
]) # ABI_FALLBACK_WANNIER90
