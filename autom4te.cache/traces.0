m4trace:/usr/share/aclocal/lt~obsolete.m4:36: -1- AC_DEFUN([LTOBSOLETE_VERSION], [m4_if([1])])
m4trace:/usr/share/aclocal/lt~obsolete.m4:38: -1- AC_DEFUN([AC_LIBTOOL_LINKER_OPTION])
m4trace:/usr/share/aclocal/lt~obsolete.m4:40: -1- AC_DEFUN([_LT_AC_PROG_ECHO_BACKSLASH])
m4trace:/usr/share/aclocal/lt~obsolete.m4:41: -1- AC_DEFUN([_LT_AC_SHELL_INIT])
m4trace:/usr/share/aclocal/lt~obsolete.m4:42: -1- AC_DEFUN([_LT_AC_SYS_LIBPATH_AIX])
m4trace:/usr/share/aclocal/lt~obsolete.m4:43: -1- AC_DEFUN([_LT_PROG_LTMAIN])
m4trace:/usr/share/aclocal/lt~obsolete.m4:44: -1- AC_DEFUN([_LT_AC_TAGVAR])
m4trace:/usr/share/aclocal/lt~obsolete.m4:45: -1- AC_DEFUN([AC_LTDL_ENABLE_INSTALL])
m4trace:/usr/share/aclocal/lt~obsolete.m4:46: -1- AC_DEFUN([AC_LTDL_PREOPEN])
m4trace:/usr/share/aclocal/lt~obsolete.m4:47: -1- AC_DEFUN([_LT_AC_SYS_COMPILER])
m4trace:/usr/share/aclocal/lt~obsolete.m4:48: -1- AC_DEFUN([_LT_AC_LOCK])
m4trace:/usr/share/aclocal/lt~obsolete.m4:49: -1- AC_DEFUN([AC_LIBTOOL_SYS_OLD_ARCHIVE])
m4trace:/usr/share/aclocal/lt~obsolete.m4:50: -1- AC_DEFUN([_LT_AC_TRY_DLOPEN_SELF])
m4trace:/usr/share/aclocal/lt~obsolete.m4:51: -1- AC_DEFUN([AC_LIBTOOL_PROG_CC_C_O])
m4trace:/usr/share/aclocal/lt~obsolete.m4:52: -1- AC_DEFUN([AC_LIBTOOL_SYS_HARD_LINK_LOCKS])
m4trace:/usr/share/aclocal/lt~obsolete.m4:53: -1- AC_DEFUN([AC_LIBTOOL_OBJDIR])
m4trace:/usr/share/aclocal/lt~obsolete.m4:54: -1- AC_DEFUN([AC_LTDL_OBJDIR])
m4trace:/usr/share/aclocal/lt~obsolete.m4:55: -1- AC_DEFUN([AC_LIBTOOL_PROG_LD_HARDCODE_LIBPATH])
m4trace:/usr/share/aclocal/lt~obsolete.m4:56: -1- AC_DEFUN([AC_LIBTOOL_SYS_LIB_STRIP])
m4trace:/usr/share/aclocal/lt~obsolete.m4:57: -1- AC_DEFUN([AC_PATH_MAGIC])
m4trace:/usr/share/aclocal/lt~obsolete.m4:58: -1- AC_DEFUN([AC_PROG_LD_GNU])
m4trace:/usr/share/aclocal/lt~obsolete.m4:59: -1- AC_DEFUN([AC_PROG_LD_RELOAD_FLAG])
m4trace:/usr/share/aclocal/lt~obsolete.m4:60: -1- AC_DEFUN([AC_DEPLIBS_CHECK_METHOD])
m4trace:/usr/share/aclocal/lt~obsolete.m4:61: -1- AC_DEFUN([AC_LIBTOOL_PROG_COMPILER_NO_RTTI])
m4trace:/usr/share/aclocal/lt~obsolete.m4:62: -1- AC_DEFUN([AC_LIBTOOL_SYS_GLOBAL_SYMBOL_PIPE])
m4trace:/usr/share/aclocal/lt~obsolete.m4:63: -1- AC_DEFUN([AC_LIBTOOL_PROG_COMPILER_PIC])
m4trace:/usr/share/aclocal/lt~obsolete.m4:64: -1- AC_DEFUN([AC_LIBTOOL_PROG_LD_SHLIBS])
m4trace:/usr/share/aclocal/lt~obsolete.m4:65: -1- AC_DEFUN([AC_LIBTOOL_POSTDEP_PREDEP])
m4trace:/usr/share/aclocal/lt~obsolete.m4:66: -1- AC_DEFUN([LT_AC_PROG_EGREP])
m4trace:/usr/share/aclocal/lt~obsolete.m4:67: -1- AC_DEFUN([LT_AC_PROG_SED])
m4trace:/usr/share/aclocal/lt~obsolete.m4:68: -1- AC_DEFUN([_LT_CC_BASENAME])
m4trace:/usr/share/aclocal/lt~obsolete.m4:69: -1- AC_DEFUN([_LT_COMPILER_BOILERPLATE])
m4trace:/usr/share/aclocal/lt~obsolete.m4:70: -1- AC_DEFUN([_LT_LINKER_BOILERPLATE])
m4trace:/usr/share/aclocal/lt~obsolete.m4:71: -1- AC_DEFUN([_AC_PROG_LIBTOOL])
m4trace:/usr/share/aclocal/lt~obsolete.m4:72: -1- AC_DEFUN([AC_LIBTOOL_SETUP])
m4trace:/usr/share/aclocal/lt~obsolete.m4:73: -1- AC_DEFUN([_LT_AC_CHECK_DLFCN])
m4trace:/usr/share/aclocal/lt~obsolete.m4:74: -1- AC_DEFUN([AC_LIBTOOL_SYS_DYNAMIC_LINKER])
m4trace:/usr/share/aclocal/lt~obsolete.m4:75: -1- AC_DEFUN([_LT_AC_TAGCONFIG])
m4trace:/usr/share/aclocal/lt~obsolete.m4:76: -1- AC_DEFUN([AC_DISABLE_FAST_INSTALL])
m4trace:/usr/share/aclocal/lt~obsolete.m4:77: -1- AC_DEFUN([_LT_AC_LANG_CXX])
m4trace:/usr/share/aclocal/lt~obsolete.m4:78: -1- AC_DEFUN([_LT_AC_LANG_F77])
m4trace:/usr/share/aclocal/lt~obsolete.m4:79: -1- AC_DEFUN([_LT_AC_LANG_GCJ])
m4trace:/usr/share/aclocal/lt~obsolete.m4:80: -1- AC_DEFUN([AC_LIBTOOL_LANG_C_CONFIG])
m4trace:/usr/share/aclocal/lt~obsolete.m4:81: -1- AC_DEFUN([_LT_AC_LANG_C_CONFIG])
m4trace:/usr/share/aclocal/lt~obsolete.m4:82: -1- AC_DEFUN([AC_LIBTOOL_LANG_CXX_CONFIG])
m4trace:/usr/share/aclocal/lt~obsolete.m4:83: -1- AC_DEFUN([_LT_AC_LANG_CXX_CONFIG])
m4trace:/usr/share/aclocal/lt~obsolete.m4:84: -1- AC_DEFUN([AC_LIBTOOL_LANG_F77_CONFIG])
m4trace:/usr/share/aclocal/lt~obsolete.m4:85: -1- AC_DEFUN([_LT_AC_LANG_F77_CONFIG])
m4trace:/usr/share/aclocal/lt~obsolete.m4:86: -1- AC_DEFUN([AC_LIBTOOL_LANG_GCJ_CONFIG])
m4trace:/usr/share/aclocal/lt~obsolete.m4:87: -1- AC_DEFUN([_LT_AC_LANG_GCJ_CONFIG])
m4trace:/usr/share/aclocal/lt~obsolete.m4:88: -1- AC_DEFUN([AC_LIBTOOL_LANG_RC_CONFIG])
m4trace:/usr/share/aclocal/lt~obsolete.m4:89: -1- AC_DEFUN([_LT_AC_LANG_RC_CONFIG])
m4trace:/usr/share/aclocal/lt~obsolete.m4:90: -1- AC_DEFUN([AC_LIBTOOL_CONFIG])
m4trace:/usr/share/aclocal/lt~obsolete.m4:91: -1- AC_DEFUN([_LT_AC_FILE_LTDLL_C])
m4trace:/usr/share/aclocal/lt~obsolete.m4:92: -1- AC_DEFUN([_LT_REQUIRED_DARWIN_CHECKS])
m4trace:/usr/share/aclocal/lt~obsolete.m4:93: -1- AC_DEFUN([_LT_AC_PROG_CXXCPP])
m4trace:/usr/share/aclocal/lt~obsolete.m4:94: -1- AC_DEFUN([_LT_PREPARE_SED_QUOTE_VARS])
m4trace:/usr/share/aclocal/lt~obsolete.m4:95: -1- AC_DEFUN([_LT_PROG_ECHO_BACKSLASH])
m4trace:/usr/share/aclocal/lt~obsolete.m4:96: -1- AC_DEFUN([_LT_PROG_F77])
m4trace:/usr/share/aclocal/lt~obsolete.m4:97: -1- AC_DEFUN([_LT_PROG_FC])
m4trace:/usr/share/aclocal/lt~obsolete.m4:98: -1- AC_DEFUN([_LT_PROG_CXX])
m4trace:/usr/share/aclocal-1.13/amversion.m4:14: -1- AC_DEFUN([AM_AUTOMAKE_VERSION], [am__api_version='1.13'
dnl Some users find AM_AUTOMAKE_VERSION and mistake it for a way to
dnl require some minimum version.  Point them to the right macro.
m4_if([$1], [1.13.4], [],
      [AC_FATAL([Do not call $0, use AM_INIT_AUTOMAKE([$1]).])])dnl
])
m4trace:/usr/share/aclocal-1.13/amversion.m4:33: -1- AC_DEFUN([AM_SET_CURRENT_AUTOMAKE_VERSION], [AM_AUTOMAKE_VERSION([1.13.4])dnl
m4_ifndef([AC_AUTOCONF_VERSION],
  [m4_copy([m4_PACKAGE_VERSION], [AC_AUTOCONF_VERSION])])dnl
_AM_AUTOCONF_VERSION(m4_defn([AC_AUTOCONF_VERSION]))])
m4trace:/usr/share/aclocal-1.13/auxdir.m4:47: -1- AC_DEFUN([AM_AUX_DIR_EXPAND], [dnl Rely on autoconf to set up CDPATH properly.
AC_PREREQ([2.50])dnl
# expand $ac_aux_dir to an absolute path
am_aux_dir=`cd $ac_aux_dir && pwd`
])
m4trace:/usr/share/aclocal-1.13/cond.m4:12: -1- AC_DEFUN([AM_CONDITIONAL], [AC_PREREQ([2.52])dnl
 m4_if([$1], [TRUE],  [AC_FATAL([$0: invalid condition: $1])],
       [$1], [FALSE], [AC_FATAL([$0: invalid condition: $1])])dnl
AC_SUBST([$1_TRUE])dnl
AC_SUBST([$1_FALSE])dnl
_AM_SUBST_NOTMAKE([$1_TRUE])dnl
_AM_SUBST_NOTMAKE([$1_FALSE])dnl
m4_define([_AM_COND_VALUE_$1], [$2])dnl
if $2; then
  $1_TRUE=
  $1_FALSE='#'
else
  $1_TRUE='#'
  $1_FALSE=
fi
AC_CONFIG_COMMANDS_PRE(
[if test -z "${$1_TRUE}" && test -z "${$1_FALSE}"; then
  AC_MSG_ERROR([[conditional "$1" was never defined.
Usually this means the macro was only invoked conditionally.]])
fi])])
m4trace:/usr/share/aclocal-1.13/depend.m4:26: -1- AC_DEFUN([_AM_DEPENDENCIES], [AC_REQUIRE([AM_SET_DEPDIR])dnl
AC_REQUIRE([AM_OUTPUT_DEPENDENCY_COMMANDS])dnl
AC_REQUIRE([AM_MAKE_INCLUDE])dnl
AC_REQUIRE([AM_DEP_TRACK])dnl

m4_if([$1], [CC],   [depcc="$CC"   am_compiler_list=],
      [$1], [CXX],  [depcc="$CXX"  am_compiler_list=],
      [$1], [OBJC], [depcc="$OBJC" am_compiler_list='gcc3 gcc'],
      [$1], [OBJCXX], [depcc="$OBJCXX" am_compiler_list='gcc3 gcc'],
      [$1], [UPC],  [depcc="$UPC"  am_compiler_list=],
      [$1], [GCJ],  [depcc="$GCJ"  am_compiler_list='gcc3 gcc'],
                    [depcc="$$1"   am_compiler_list=])

AC_CACHE_CHECK([dependency style of $depcc],
               [am_cv_$1_dependencies_compiler_type],
[if test -z "$AMDEP_TRUE" && test -f "$am_depcomp"; then
  # We make a subdir and do the tests there.  Otherwise we can end up
  # making bogus files that we don't know about and never remove.  For
  # instance it was reported that on HP-UX the gcc test will end up
  # making a dummy file named 'D' -- because '-MD' means "put the output
  # in D".
  rm -rf conftest.dir
  mkdir conftest.dir
  # Copy depcomp to subdir because otherwise we won't find it if we're
  # using a relative directory.
  cp "$am_depcomp" conftest.dir
  cd conftest.dir
  # We will build objects and dependencies in a subdirectory because
  # it helps to detect inapplicable dependency modes.  For instance
  # both Tru64's cc and ICC support -MD to output dependencies as a
  # side effect of compilation, but ICC will put the dependencies in
  # the current directory while Tru64 will put them in the object
  # directory.
  mkdir sub

  am_cv_$1_dependencies_compiler_type=none
  if test "$am_compiler_list" = ""; then
     am_compiler_list=`sed -n ['s/^#*\([a-zA-Z0-9]*\))$/\1/p'] < ./depcomp`
  fi
  am__universal=false
  m4_case([$1], [CC],
    [case " $depcc " in #(
     *\ -arch\ *\ -arch\ *) am__universal=true ;;
     esac],
    [CXX],
    [case " $depcc " in #(
     *\ -arch\ *\ -arch\ *) am__universal=true ;;
     esac])

  for depmode in $am_compiler_list; do
    # Setup a source with many dependencies, because some compilers
    # like to wrap large dependency lists on column 80 (with \), and
    # we should not choose a depcomp mode which is confused by this.
    #
    # We need to recreate these files for each test, as the compiler may
    # overwrite some of them when testing with obscure command lines.
    # This happens at least with the AIX C compiler.
    : > sub/conftest.c
    for i in 1 2 3 4 5 6; do
      echo '#include "conftst'$i'.h"' >> sub/conftest.c
      # Using ": > sub/conftst$i.h" creates only sub/conftst1.h with
      # Solaris 10 /bin/sh.
      echo '/* dummy */' > sub/conftst$i.h
    done
    echo "${am__include} ${am__quote}sub/conftest.Po${am__quote}" > confmf

    # We check with '-c' and '-o' for the sake of the "dashmstdout"
    # mode.  It turns out that the SunPro C++ compiler does not properly
    # handle '-M -o', and we need to detect this.  Also, some Intel
    # versions had trouble with output in subdirs.
    am__obj=sub/conftest.${OBJEXT-o}
    am__minus_obj="-o $am__obj"
    case $depmode in
    gcc)
      # This depmode causes a compiler race in universal mode.
      test "$am__universal" = false || continue
      ;;
    nosideeffect)
      # After this tag, mechanisms are not by side-effect, so they'll
      # only be used when explicitly requested.
      if test "x$enable_dependency_tracking" = xyes; then
	continue
      else
	break
      fi
      ;;
    msvc7 | msvc7msys | msvisualcpp | msvcmsys)
      # This compiler won't grok '-c -o', but also, the minuso test has
      # not run yet.  These depmodes are late enough in the game, and
      # so weak that their functioning should not be impacted.
      am__obj=conftest.${OBJEXT-o}
      am__minus_obj=
      ;;
    none) break ;;
    esac
    if depmode=$depmode \
       source=sub/conftest.c object=$am__obj \
       depfile=sub/conftest.Po tmpdepfile=sub/conftest.TPo \
       $SHELL ./depcomp $depcc -c $am__minus_obj sub/conftest.c \
         >/dev/null 2>conftest.err &&
       grep sub/conftst1.h sub/conftest.Po > /dev/null 2>&1 &&
       grep sub/conftst6.h sub/conftest.Po > /dev/null 2>&1 &&
       grep $am__obj sub/conftest.Po > /dev/null 2>&1 &&
       ${MAKE-make} -s -f confmf > /dev/null 2>&1; then
      # icc doesn't choke on unknown options, it will just issue warnings
      # or remarks (even with -Werror).  So we grep stderr for any message
      # that says an option was ignored or not supported.
      # When given -MP, icc 7.0 and 7.1 complain thusly:
      #   icc: Command line warning: ignoring option '-M'; no argument required
      # The diagnosis changed in icc 8.0:
      #   icc: Command line remark: option '-MP' not supported
      if (grep 'ignoring option' conftest.err ||
          grep 'not supported' conftest.err) >/dev/null 2>&1; then :; else
        am_cv_$1_dependencies_compiler_type=$depmode
        break
      fi
    fi
  done

  cd ..
  rm -rf conftest.dir
else
  am_cv_$1_dependencies_compiler_type=none
fi
])
AC_SUBST([$1DEPMODE], [depmode=$am_cv_$1_dependencies_compiler_type])
AM_CONDITIONAL([am__fastdep$1], [
  test "x$enable_dependency_tracking" != xno \
  && test "$am_cv_$1_dependencies_compiler_type" = gcc3])
])
m4trace:/usr/share/aclocal-1.13/depend.m4:163: -1- AC_DEFUN([AM_SET_DEPDIR], [AC_REQUIRE([AM_SET_LEADING_DOT])dnl
AC_SUBST([DEPDIR], ["${am__leading_dot}deps"])dnl
])
m4trace:/usr/share/aclocal-1.13/depend.m4:171: -1- AC_DEFUN([AM_DEP_TRACK], [AC_ARG_ENABLE([dependency-tracking], [dnl
AS_HELP_STRING(
  [--enable-dependency-tracking],
  [do not reject slow dependency extractors])
AS_HELP_STRING(
  [--disable-dependency-tracking],
  [speeds up one-time build])])
if test "x$enable_dependency_tracking" != xno; then
  am_depcomp="$ac_aux_dir/depcomp"
  AMDEPBACKSLASH='\'
  am__nodep='_no'
fi
AM_CONDITIONAL([AMDEP], [test "x$enable_dependency_tracking" != xno])
AC_SUBST([AMDEPBACKSLASH])dnl
_AM_SUBST_NOTMAKE([AMDEPBACKSLASH])dnl
AC_SUBST([am__nodep])dnl
_AM_SUBST_NOTMAKE([am__nodep])dnl
])
m4trace:/usr/share/aclocal-1.13/depout.m4:12: -1- AC_DEFUN([_AM_OUTPUT_DEPENDENCY_COMMANDS], [{
  # Older Autoconf quotes --file arguments for eval, but not when files
  # are listed without --file.  Let's play safe and only enable the eval
  # if we detect the quoting.
  case $CONFIG_FILES in
  *\'*) eval set x "$CONFIG_FILES" ;;
  *)   set x $CONFIG_FILES ;;
  esac
  shift
  for mf
  do
    # Strip MF so we end up with the name of the file.
    mf=`echo "$mf" | sed -e 's/:.*$//'`
    # Check whether this is an Automake generated Makefile or not.
    # We used to match only the files named 'Makefile.in', but
    # some people rename them; so instead we look at the file content.
    # Grep'ing the first line is not enough: some people post-process
    # each Makefile.in and add a new line on top of each file to say so.
    # Grep'ing the whole file is not good either: AIX grep has a line
    # limit of 2048, but all sed's we know have understand at least 4000.
    if sed -n 's,^#.*generated by automake.*,X,p' "$mf" | grep X >/dev/null 2>&1; then
      dirpart=`AS_DIRNAME("$mf")`
    else
      continue
    fi
    # Extract the definition of DEPDIR, am__include, and am__quote
    # from the Makefile without running 'make'.
    DEPDIR=`sed -n 's/^DEPDIR = //p' < "$mf"`
    test -z "$DEPDIR" && continue
    am__include=`sed -n 's/^am__include = //p' < "$mf"`
    test -z "$am__include" && continue
    am__quote=`sed -n 's/^am__quote = //p' < "$mf"`
    # Find all dependency output files, they are included files with
    # $(DEPDIR) in their names.  We invoke sed twice because it is the
    # simplest approach to changing $(DEPDIR) to its actual value in the
    # expansion.
    for file in `sed -n "
      s/^$am__include $am__quote\(.*(DEPDIR).*\)$am__quote"'$/\1/p' <"$mf" | \
	 sed -e 's/\$(DEPDIR)/'"$DEPDIR"'/g'`; do
      # Make sure the directory exists.
      test -f "$dirpart/$file" && continue
      fdir=`AS_DIRNAME(["$file"])`
      AS_MKDIR_P([$dirpart/$fdir])
      # echo "creating $dirpart/$file"
      echo '# dummy' > "$dirpart/$file"
    done
  done
}
])
m4trace:/usr/share/aclocal-1.13/depout.m4:71: -1- AC_DEFUN([AM_OUTPUT_DEPENDENCY_COMMANDS], [AC_CONFIG_COMMANDS([depfiles],
     [test x"$AMDEP_TRUE" != x"" || _AM_OUTPUT_DEPENDENCY_COMMANDS],
     [AMDEP_TRUE="$AMDEP_TRUE" ac_aux_dir="$ac_aux_dir"])
])
m4trace:/usr/share/aclocal-1.13/init.m4:23: -1- AC_DEFUN([AM_INIT_AUTOMAKE], [AC_PREREQ([2.65])dnl
dnl Autoconf wants to disallow AM_ names.  We explicitly allow
dnl the ones we care about.
m4_pattern_allow([^AM_[A-Z]+FLAGS$])dnl
AC_REQUIRE([AM_SET_CURRENT_AUTOMAKE_VERSION])dnl
AC_REQUIRE([AC_PROG_INSTALL])dnl
if test "`cd $srcdir && pwd`" != "`pwd`"; then
  # Use -I$(srcdir) only when $(srcdir) != ., so that make's output
  # is not polluted with repeated "-I."
  AC_SUBST([am__isrc], [' -I$(srcdir)'])_AM_SUBST_NOTMAKE([am__isrc])dnl
  # test to see if srcdir already configured
  if test -f $srcdir/config.status; then
    AC_MSG_ERROR([source directory already configured; run "make distclean" there first])
  fi
fi

# test whether we have cygpath
if test -z "$CYGPATH_W"; then
  if (cygpath --version) >/dev/null 2>/dev/null; then
    CYGPATH_W='cygpath -w'
  else
    CYGPATH_W=echo
  fi
fi
AC_SUBST([CYGPATH_W])

# Define the identity of the package.
dnl Distinguish between old-style and new-style calls.
m4_ifval([$2],
[AC_DIAGNOSE([obsolete],
             [$0: two- and three-arguments forms are deprecated.])
m4_ifval([$3], [_AM_SET_OPTION([no-define])])dnl
 AC_SUBST([PACKAGE], [$1])dnl
 AC_SUBST([VERSION], [$2])],
[_AM_SET_OPTIONS([$1])dnl
dnl Diagnose old-style AC_INIT with new-style AM_AUTOMAKE_INIT.
m4_if(
  m4_ifdef([AC_PACKAGE_NAME], [ok]):m4_ifdef([AC_PACKAGE_VERSION], [ok]),
  [ok:ok],,
  [m4_fatal([AC_INIT should be called with package and version arguments])])dnl
 AC_SUBST([PACKAGE], ['AC_PACKAGE_TARNAME'])dnl
 AC_SUBST([VERSION], ['AC_PACKAGE_VERSION'])])dnl

_AM_IF_OPTION([no-define],,
[AC_DEFINE_UNQUOTED([PACKAGE], ["$PACKAGE"], [Name of package])
 AC_DEFINE_UNQUOTED([VERSION], ["$VERSION"], [Version number of package])])dnl

# Some tools Automake needs.
AC_REQUIRE([AM_SANITY_CHECK])dnl
AC_REQUIRE([AC_ARG_PROGRAM])dnl
AM_MISSING_PROG([ACLOCAL], [aclocal-${am__api_version}])
AM_MISSING_PROG([AUTOCONF], [autoconf])
AM_MISSING_PROG([AUTOMAKE], [automake-${am__api_version}])
AM_MISSING_PROG([AUTOHEADER], [autoheader])
AM_MISSING_PROG([MAKEINFO], [makeinfo])
AC_REQUIRE([AM_PROG_INSTALL_SH])dnl
AC_REQUIRE([AM_PROG_INSTALL_STRIP])dnl
AC_REQUIRE([AC_PROG_MKDIR_P])dnl
# For better backward compatibility.  To be removed once Automake 1.9.x
# dies out for good.  For more background, see:
# <http://lists.gnu.org/archive/html/automake/2012-07/msg00001.html>
# <http://lists.gnu.org/archive/html/automake/2012-07/msg00014.html>
AC_SUBST([mkdir_p], ['$(MKDIR_P)'])
# We need awk for the "check" target.  The system "awk" is bad on
# some platforms.
AC_REQUIRE([AC_PROG_AWK])dnl
AC_REQUIRE([AC_PROG_MAKE_SET])dnl
AC_REQUIRE([AM_SET_LEADING_DOT])dnl
_AM_IF_OPTION([tar-ustar], [_AM_PROG_TAR([ustar])],
	      [_AM_IF_OPTION([tar-pax], [_AM_PROG_TAR([pax])],
			     [_AM_PROG_TAR([v7])])])
_AM_IF_OPTION([no-dependencies],,
[AC_PROVIDE_IFELSE([AC_PROG_CC],
		  [_AM_DEPENDENCIES([CC])],
		  [m4_define([AC_PROG_CC],
			     m4_defn([AC_PROG_CC])[_AM_DEPENDENCIES([CC])])])dnl
AC_PROVIDE_IFELSE([AC_PROG_CXX],
		  [_AM_DEPENDENCIES([CXX])],
		  [m4_define([AC_PROG_CXX],
			     m4_defn([AC_PROG_CXX])[_AM_DEPENDENCIES([CXX])])])dnl
AC_PROVIDE_IFELSE([AC_PROG_OBJC],
		  [_AM_DEPENDENCIES([OBJC])],
		  [m4_define([AC_PROG_OBJC],
			     m4_defn([AC_PROG_OBJC])[_AM_DEPENDENCIES([OBJC])])])dnl
AC_PROVIDE_IFELSE([AC_PROG_OBJCXX],
		  [_AM_DEPENDENCIES([OBJCXX])],
		  [m4_define([AC_PROG_OBJCXX],
			     m4_defn([AC_PROG_OBJCXX])[_AM_DEPENDENCIES([OBJCXX])])])dnl
])
AC_REQUIRE([AM_SILENT_RULES])dnl
dnl The testsuite driver may need to know about EXEEXT, so add the
dnl 'am__EXEEXT' conditional if _AM_COMPILER_EXEEXT was seen.  This
dnl macro is hooked onto _AC_COMPILER_EXEEXT early, see below.
AC_CONFIG_COMMANDS_PRE(dnl
[m4_provide_if([_AM_COMPILER_EXEEXT],
  [AM_CONDITIONAL([am__EXEEXT], [test -n "$EXEEXT"])])])dnl
])
m4trace:/usr/share/aclocal-1.13/init.m4:136: -1- AC_DEFUN([_AC_AM_CONFIG_HEADER_HOOK], [# Compute $1's index in $config_headers.
_am_arg=$1
_am_stamp_count=1
for _am_header in $config_headers :; do
  case $_am_header in
    $_am_arg | $_am_arg:* )
      break ;;
    * )
      _am_stamp_count=`expr $_am_stamp_count + 1` ;;
  esac
done
echo "timestamp for $_am_arg" >`AS_DIRNAME(["$_am_arg"])`/stamp-h[]$_am_stamp_count])
m4trace:/usr/share/aclocal-1.13/install-sh.m4:11: -1- AC_DEFUN([AM_PROG_INSTALL_SH], [AC_REQUIRE([AM_AUX_DIR_EXPAND])dnl
if test x"${install_sh}" != xset; then
  case $am_aux_dir in
  *\ * | *\	*)
    install_sh="\${SHELL} '$am_aux_dir/install-sh'" ;;
  *)
    install_sh="\${SHELL} $am_aux_dir/install-sh"
  esac
fi
AC_SUBST([install_sh])])
m4trace:/usr/share/aclocal-1.13/lead-dot.m4:10: -1- AC_DEFUN([AM_SET_LEADING_DOT], [rm -rf .tst 2>/dev/null
mkdir .tst 2>/dev/null
if test -d .tst; then
  am__leading_dot=.
else
  am__leading_dot=_
fi
rmdir .tst 2>/dev/null
AC_SUBST([am__leading_dot])])
m4trace:/usr/share/aclocal-1.13/make.m4:12: -1- AC_DEFUN([AM_MAKE_INCLUDE], [am_make=${MAKE-make}
cat > confinc << 'END'
am__doit:
	@echo this is the am__doit target
.PHONY: am__doit
END
# If we don't find an include directive, just comment out the code.
AC_MSG_CHECKING([for style of include used by $am_make])
am__include="#"
am__quote=
_am_result=none
# First try GNU make style include.
echo "include confinc" > confmf
# Ignore all kinds of additional output from 'make'.
case `$am_make -s -f confmf 2> /dev/null` in #(
*the\ am__doit\ target*)
  am__include=include
  am__quote=
  _am_result=GNU
  ;;
esac
# Now try BSD make style include.
if test "$am__include" = "#"; then
   echo '.include "confinc"' > confmf
   case `$am_make -s -f confmf 2> /dev/null` in #(
   *the\ am__doit\ target*)
     am__include=.include
     am__quote="\""
     _am_result=BSD
     ;;
   esac
fi
AC_SUBST([am__include])
AC_SUBST([am__quote])
AC_MSG_RESULT([$_am_result])
rm -f confinc confmf
])
m4trace:/usr/share/aclocal-1.13/missing.m4:11: -1- AC_DEFUN([AM_MISSING_PROG], [AC_REQUIRE([AM_MISSING_HAS_RUN])
$1=${$1-"${am_missing_run}$2"}
AC_SUBST($1)])
m4trace:/usr/share/aclocal-1.13/missing.m4:20: -1- AC_DEFUN([AM_MISSING_HAS_RUN], [AC_REQUIRE([AM_AUX_DIR_EXPAND])dnl
AC_REQUIRE_AUX_FILE([missing])dnl
if test x"${MISSING+set}" != xset; then
  case $am_aux_dir in
  *\ * | *\	*)
    MISSING="\${SHELL} \"$am_aux_dir/missing\"" ;;
  *)
    MISSING="\${SHELL} $am_aux_dir/missing" ;;
  esac
fi
# Use eval to expand $SHELL
if eval "$MISSING --is-lightweight"; then
  am_missing_run="$MISSING "
else
  am_missing_run=
  AC_MSG_WARN(['missing' script is too old or missing])
fi
])
m4trace:/usr/share/aclocal-1.13/options.m4:11: -1- AC_DEFUN([_AM_MANGLE_OPTION], [[_AM_OPTION_]m4_bpatsubst($1, [[^a-zA-Z0-9_]], [_])])
m4trace:/usr/share/aclocal-1.13/options.m4:17: -1- AC_DEFUN([_AM_SET_OPTION], [m4_define(_AM_MANGLE_OPTION([$1]), [1])])
m4trace:/usr/share/aclocal-1.13/options.m4:23: -1- AC_DEFUN([_AM_SET_OPTIONS], [m4_foreach_w([_AM_Option], [$1], [_AM_SET_OPTION(_AM_Option)])])
m4trace:/usr/share/aclocal-1.13/options.m4:29: -1- AC_DEFUN([_AM_IF_OPTION], [m4_ifset(_AM_MANGLE_OPTION([$1]), [$2], [$3])])
m4trace:/usr/share/aclocal-1.13/runlog.m4:12: -1- AC_DEFUN([AM_RUN_LOG], [{ echo "$as_me:$LINENO: $1" >&AS_MESSAGE_LOG_FD
   ($1) >&AS_MESSAGE_LOG_FD 2>&AS_MESSAGE_LOG_FD
   ac_status=$?
   echo "$as_me:$LINENO: \$? = $ac_status" >&AS_MESSAGE_LOG_FD
   (exit $ac_status); }])
m4trace:/usr/share/aclocal-1.13/sanity.m4:11: -1- AC_DEFUN([AM_SANITY_CHECK], [AC_MSG_CHECKING([whether build environment is sane])
# Reject unsafe characters in $srcdir or the absolute working directory
# name.  Accept space and tab only in the latter.
am_lf='
'
case `pwd` in
  *[[\\\"\#\$\&\'\`$am_lf]]*)
    AC_MSG_ERROR([unsafe absolute working directory name]);;
esac
case $srcdir in
  *[[\\\"\#\$\&\'\`$am_lf\ \	]]*)
    AC_MSG_ERROR([unsafe srcdir value: '$srcdir']);;
esac

# Do 'set' in a subshell so we don't clobber the current shell's
# arguments.  Must try -L first in case configure is actually a
# symlink; some systems play weird games with the mod time of symlinks
# (eg FreeBSD returns the mod time of the symlink's containing
# directory).
if (
   am_has_slept=no
   for am_try in 1 2; do
     echo "timestamp, slept: $am_has_slept" > conftest.file
     set X `ls -Lt "$srcdir/configure" conftest.file 2> /dev/null`
     if test "$[*]" = "X"; then
	# -L didn't work.
	set X `ls -t "$srcdir/configure" conftest.file`
     fi
     if test "$[*]" != "X $srcdir/configure conftest.file" \
	&& test "$[*]" != "X conftest.file $srcdir/configure"; then

	# If neither matched, then we have a broken ls.  This can happen
	# if, for instance, CONFIG_SHELL is bash and it inherits a
	# broken ls alias from the environment.  This has actually
	# happened.  Such a system could not be considered "sane".
	AC_MSG_ERROR([ls -t appears to fail.  Make sure there is not a broken
  alias in your environment])
     fi
     if test "$[2]" = conftest.file || test $am_try -eq 2; then
       break
     fi
     # Just in case.
     sleep 1
     am_has_slept=yes
   done
   test "$[2]" = conftest.file
   )
then
   # Ok.
   :
else
   AC_MSG_ERROR([newly created file is older than distributed files!
Check your system clock])
fi
AC_MSG_RESULT([yes])
# If we didn't sleep, we still need to ensure time stamps of config.status and
# generated files are strictly newer.
am_sleep_pid=
if grep 'slept: no' conftest.file >/dev/null 2>&1; then
  ( sleep 1 ) &
  am_sleep_pid=$!
fi
AC_CONFIG_COMMANDS_PRE(
  [AC_MSG_CHECKING([that generated files are newer than configure])
   if test -n "$am_sleep_pid"; then
     # Hide warnings about reused PIDs.
     wait $am_sleep_pid 2>/dev/null
   fi
   AC_MSG_RESULT([done])])
rm -f conftest.file
])
m4trace:/usr/share/aclocal-1.13/silent.m4:12: -1- AC_DEFUN([AM_SILENT_RULES], [AC_ARG_ENABLE([silent-rules], [dnl
AS_HELP_STRING(
  [--enable-silent-rules],
  [less verbose build output (undo: "make V=1")])
AS_HELP_STRING(
  [--disable-silent-rules],
  [verbose build output (undo: "make V=0")])dnl
])
case $enable_silent_rules in @%:@ (((
  yes) AM_DEFAULT_VERBOSITY=0;;
   no) AM_DEFAULT_VERBOSITY=1;;
    *) AM_DEFAULT_VERBOSITY=m4_if([$1], [yes], [0], [1]);;
esac
dnl
dnl A few 'make' implementations (e.g., NonStop OS and NextStep)
dnl do not support nested variable expansions.
dnl See automake bug#9928 and bug#10237.
am_make=${MAKE-make}
AC_CACHE_CHECK([whether $am_make supports nested variables],
   [am_cv_make_support_nested_variables],
   [if AS_ECHO([['TRUE=$(BAR$(V))
BAR0=false
BAR1=true
V=1
am__doit:
	@$(TRUE)
.PHONY: am__doit']]) | $am_make -f - >/dev/null 2>&1; then
  am_cv_make_support_nested_variables=yes
else
  am_cv_make_support_nested_variables=no
fi])
if test $am_cv_make_support_nested_variables = yes; then
  dnl Using '$V' instead of '$(V)' breaks IRIX make.
  AM_V='$(V)'
  AM_DEFAULT_V='$(AM_DEFAULT_VERBOSITY)'
else
  AM_V=$AM_DEFAULT_VERBOSITY
  AM_DEFAULT_V=$AM_DEFAULT_VERBOSITY
fi
AC_SUBST([AM_V])dnl
AM_SUBST_NOTMAKE([AM_V])dnl
AC_SUBST([AM_DEFAULT_V])dnl
AM_SUBST_NOTMAKE([AM_DEFAULT_V])dnl
AC_SUBST([AM_DEFAULT_VERBOSITY])dnl
AM_BACKSLASH='\'
AC_SUBST([AM_BACKSLASH])dnl
_AM_SUBST_NOTMAKE([AM_BACKSLASH])dnl
])
m4trace:/usr/share/aclocal-1.13/strip.m4:17: -1- AC_DEFUN([AM_PROG_INSTALL_STRIP], [AC_REQUIRE([AM_PROG_INSTALL_SH])dnl
# Installed binaries are usually stripped using 'strip' when the user
# run "make install-strip".  However 'strip' might not be the right
# tool to use in cross-compilation environments, therefore Automake
# will honor the 'STRIP' environment variable to overrule this program.
dnl Don't test for $cross_compiling = yes, because it might be 'maybe'.
if test "$cross_compiling" != no; then
  AC_CHECK_TOOL([STRIP], [strip], :)
fi
INSTALL_STRIP_PROGRAM="\$(install_sh) -c -s"
AC_SUBST([INSTALL_STRIP_PROGRAM])])
m4trace:/usr/share/aclocal-1.13/substnot.m4:12: -1- AC_DEFUN([_AM_SUBST_NOTMAKE])
m4trace:/usr/share/aclocal-1.13/substnot.m4:17: -1- AC_DEFUN([AM_SUBST_NOTMAKE], [_AM_SUBST_NOTMAKE($@)])
m4trace:/usr/share/aclocal-1.13/tar.m4:23: -1- AC_DEFUN([_AM_PROG_TAR], [# Always define AMTAR for backward compatibility.  Yes, it's still used
# in the wild :-(  We should find a proper way to deprecate it ...
AC_SUBST([AMTAR], ['$${TAR-tar}'])

# We'll loop over all known methods to create a tar archive until one works.
_am_tools='gnutar m4_if([$1], [ustar], [plaintar]) pax cpio none'

m4_if([$1], [v7],
  [am__tar='$${TAR-tar} chof - "$$tardir"' am__untar='$${TAR-tar} xf -'],

  [m4_case([$1],
    [ustar],
     [# The POSIX 1988 'ustar' format is defined with fixed-size fields.
      # There is notably a 21 bits limit for the UID and the GID.  In fact,
      # the 'pax' utility can hang on bigger UID/GID (see automake bug#8343
      # and bug#13588).
      am_max_uid=2097151 # 2^21 - 1
      am_max_gid=$am_max_uid
      # The $UID and $GID variables are not portable, so we need to resort
      # to the POSIX-mandated id(1) utility.  Errors in the 'id' calls
      # below are definitely unexpected, so allow the users to see them
      # (that is, avoid stderr redirection).
      am_uid=`id -u || echo unknown`
      am_gid=`id -g || echo unknown`
      AC_MSG_CHECKING([whether UID '$am_uid' is supported by ustar format])
      if test $am_uid -le $am_max_uid; then
         AC_MSG_RESULT([yes])
      else
         AC_MSG_RESULT([no])
         _am_tools=none
      fi
      AC_MSG_CHECKING([whether GID '$am_gid' is supported by ustar format])
      if test $am_gid -le $am_max_gid; then
         AC_MSG_RESULT([yes])
      else
        AC_MSG_RESULT([no])
        _am_tools=none
      fi],

  [pax],
    [],

  [m4_fatal([Unknown tar format])])

  AC_MSG_CHECKING([how to create a $1 tar archive])

  # Go ahead even if we have the value already cached.  We do so because we
  # need to set the values for the 'am__tar' and 'am__untar' variables.
  _am_tools=${am_cv_prog_tar_$1-$_am_tools}

  for _am_tool in $_am_tools; do
    case $_am_tool in
    gnutar)
      for _am_tar in tar gnutar gtar; do
        AM_RUN_LOG([$_am_tar --version]) && break
      done
      am__tar="$_am_tar --format=m4_if([$1], [pax], [posix], [$1]) -chf - "'"$$tardir"'
      am__tar_="$_am_tar --format=m4_if([$1], [pax], [posix], [$1]) -chf - "'"$tardir"'
      am__untar="$_am_tar -xf -"
      ;;
    plaintar)
      # Must skip GNU tar: if it does not support --format= it doesn't create
      # ustar tarball either.
      (tar --version) >/dev/null 2>&1 && continue
      am__tar='tar chf - "$$tardir"'
      am__tar_='tar chf - "$tardir"'
      am__untar='tar xf -'
      ;;
    pax)
      am__tar='pax -L -x $1 -w "$$tardir"'
      am__tar_='pax -L -x $1 -w "$tardir"'
      am__untar='pax -r'
      ;;
    cpio)
      am__tar='find "$$tardir" -print | cpio -o -H $1 -L'
      am__tar_='find "$tardir" -print | cpio -o -H $1 -L'
      am__untar='cpio -i -H $1 -d'
      ;;
    none)
      am__tar=false
      am__tar_=false
      am__untar=false
      ;;
    esac

    # If the value was cached, stop now.  We just wanted to have am__tar
    # and am__untar set.
    test -n "${am_cv_prog_tar_$1}" && break

    # tar/untar a dummy directory, and stop if the command works.
    rm -rf conftest.dir
    mkdir conftest.dir
    echo GrepMe > conftest.dir/file
    AM_RUN_LOG([tardir=conftest.dir && eval $am__tar_ >conftest.tar])
    rm -rf conftest.dir
    if test -s conftest.tar; then
      AM_RUN_LOG([$am__untar <conftest.tar])
      AM_RUN_LOG([cat conftest.dir/file])
      grep GrepMe conftest.dir/file >/dev/null 2>&1 && break
    fi
  done
  rm -rf conftest.dir

  AC_CACHE_VAL([am_cv_prog_tar_$1], [am_cv_prog_tar_$1=$_am_tool])
  AC_MSG_RESULT([$am_cv_prog_tar_$1])])

AC_SUBST([am__tar])
AC_SUBST([am__untar])
])
m4trace:config/m4/arch-gpu.m4:21: -1- AC_DEFUN([_ABI_GPU_CHECK_CUDA], [
  dnl Init
  abi_gpu_cuda_serial="no"
  abi_gpu_cuda_mpi="no"
  abi_gpu_cuda_old="unknown"

  dnl Display variables
  AC_MSG_NOTICE([Cuda incs: ${abi_gpu_cuda_incs}])
  AC_MSG_NOTICE([Cuda libs: ${abi_gpu_cuda_libs}])

  dnl Prepare environment
  ABI_ENV_BACKUP
  CPPFLAGS="${CPPFLAGS} ${abi_gpu_cuda_incs}"
  LDFLAGS="${CC_LDFLAGS} ${CC_LDFLAGS_GPU}"
  abi_saved_LIBS="${LIBS}"
  LIBS="${abi_gpu_cuda_libs} ${LIBS}"
  AC_LANG_PUSH([C])

  dnl Check usability of headers
  AC_CHECK_HEADERS([cuda_runtime_api.h cufft.h cublas.h])

  dnl Look for libraries and routines
  AC_MSG_CHECKING([whether Cuda programs can be compiled])
  AC_LINK_IFELSE([AC_LANG_PROGRAM(
    [[
#if defined HAVE_CUDA_RUNTIME_API_H
#include "cuda_runtime_api.h"
#endif
    ]],
    [[
      cudaError_t err;
      int *count;
      err = cudaGetDeviceCount(count);
    ]])], [abi_gpu_cuda_serial="yes"], [])
  AC_MSG_RESULT([${abi_gpu_cuda_serial}])

  dnl Do we have an old version of Cuda?
  AC_MSG_CHECKING([whether we have Cuda < 4])
  AC_LINK_IFELSE([AC_LANG_PROGRAM(
    [[
#if defined HAVE_CUDA_RUNTIME_API_H
#include "cuda_runtime_api.h"
#endif
    ]],
    [[
      cudaDeviceReset();
    ]])], [abi_gpu_cuda_old="no"], [abi_gpu_cuda_old="yes"])
  AC_MSG_RESULT([${abi_gpu_cuda_old}])

  dnl Check ISO C Binding (Fortran)
  if test "${fc_has_iso_c_binding}" != "yes"; then
    AC_MSG_WARN([your Fortran compiler does not provide any ISO C binding module])
  fi

  dnl Restore build environment
  AC_LANG_POP([C])
  LIBS="${abi_saved_LIBS}"
  ABI_ENV_RESTORE
])
m4trace:config/m4/arch-gpu.m4:92: -1- AC_DEFUN([_ABI_GPU_INIT_CUDA], [
  dnl Init
  abi_gpu_cuda_has_cc="no"
  abi_gpu_cuda_has_common="no"
  abi_gpu_cuda_has_fft="no"
  abi_gpu_cuda_has_incs="no"
  abi_gpu_cuda_has_libs="no"
  abi_gpu_cuda_has_linalg="no"
  abi_gpu_cuda_has_runtime="no"
  abi_gpu_cuda_libdir=""
  abi_gpu_cuda_incs="${with_gpu_incs}"
  abi_gpu_cuda_libs="${with_gpu_libs}"
  abi_gpu_cuda_root="${with_gpu_prefix}"

  dnl Make use of the CUDA_ROOT environment variable
  if test "${abi_gpu_cuda_root}" = ""; then
    abi_gpu_cuda_root="${CUDA_ROOT}"
  fi

  dnl Check whether to look for generic files
  if test "${abi_gpu_cuda_root}" = ""; then

    dnl nVidia C compiler
    if test "${NVCC}" = ""; then
      AC_CHECK_PROGS(NVCC,[nvcc])
    fi
    AC_MSG_CHECKING([for the nVidia C compiler])
    if test "${NVCC}" = ""; then
      AC_MSG_RESULT([none found])
    else
      abi_gpu_cuda_has_cc="yes"
      AC_MSG_RESULT([${NVCC}])
    fi

  else

    dnl nVidia C compiler
    AC_MSG_CHECKING([for the nVidia C compiler])
    if test -x "${abi_gpu_cuda_root}/bin/nvcc"; then
      abi_gpu_cuda_has_cc="yes"
      NVCC="${abi_gpu_cuda_root}/bin/nvcc"
    fi
    if test "${NVCC}" = ""; then
      AC_MSG_RESULT([none found])
    else
      AC_MSG_RESULT([${NVCC}])
    fi

    dnl Headers
    AC_MSG_CHECKING([for Cuda headers])
    abi_result=""
    if test -s "${abi_gpu_cuda_root}/include/cuda_runtime_api.h"; then
      if test "${with_gpu_incs}" = ""; then
        abi_gpu_cuda_incs="-I${abi_gpu_cuda_root}/include"
      fi
      abi_gpu_cuda_has_incs="yes"
      abi_result="${abi_result} run-time"
    fi
    if test -s "${abi_gpu_cuda_root}/include/cufft.h"; then
      abi_result="${abi_result} fft"
    fi
    if test -s "${abi_gpu_cuda_root}/include/cublas.h"; then
      abi_result="${abi_result} blas"
    fi
    if test -s "${abi_gpu_cuda_root}/SDK/C/common/inc/cutil.h"; then
      if test "${with_gpu_incs}" = ""; then
        abi_gpu_cuda_incs="-I${abi_gpu_cuda_root}/SDK/C/common/inc ${abi_gpu_cuda_incs}"
      fi
      abi_result="${abi_result} sdk"
    fi
    if test "${abi_result}" = ""; then
      abi_result="none"
    fi
    AC_MSG_RESULT([${abi_result}])

    dnl Libraries
    AC_MSG_CHECKING([for Cuda libraries])
    abi_result=""
    if test "${abi_cpu_64bits}" = "yes"; then
      abi_gpu_cuda_libdir="${abi_gpu_cuda_root}/lib64"
    else
      abi_gpu_cuda_libdir="${abi_gpu_cuda_root}/lib"
    fi
    for tmp_cuda_dir in \
        /usr/lib \
        /usr/local/lib \
        /usr/local/lib${abi_cpu_bits} \
        /usr/lib/nvidia-current \
        /usr/local/lib/nvidia-current \
        /usr/local/lib${abi_cpu_bits}/nvidia-current; do
      if test "${abi_gpu_cuda_has_common}" = "no"; then
        if test -e "${tmp_cuda_dir}/libcuda.${abi_so_ext}"; then
          abi_gpu_cuda_has_libs="yes"
          abi_gpu_cuda_has_common="yes"
          abi_result="${abi_result} common"
        fi
      fi
    done
    if test -e "${abi_gpu_cuda_libdir}/libcudart.${abi_so_ext}"; then
      if test "${with_gpu_libs}" = ""; then
        abi_gpu_cuda_libs="-lcudart"
      fi
      abi_gpu_cuda_has_libs="yes"
      abi_gpu_cuda_has_runtime="yes"
      abi_result="${abi_result} run-time"
    fi
    if test "${abi_gpu_cuda_has_libs}" = "yes"; then
      if test -e "${abi_gpu_cuda_libdir}/libcufft.${abi_so_ext}"; then
        if test "${with_gpu_libs}" = ""; then
          abi_gpu_cuda_libs="-lcufft ${abi_gpu_cuda_libs}"
        fi
        abi_gpu_cuda_has_fft="yes"
        abi_result="${abi_result} fft"
      fi
      if test -e "${abi_gpu_cuda_libdir}/libcublas.${abi_so_ext}"; then
        if test "${with_gpu_libs}" = ""; then
          abi_gpu_cuda_libs="-lcublas ${abi_gpu_cuda_libs}"
        fi
        abi_gpu_cuda_has_linalg="yes"
        abi_result="${abi_result} blas"
      fi
      if test "${with_gpu_libs}" = ""; then
        abi_gpu_cuda_libs="-L${abi_gpu_cuda_libdir} ${abi_gpu_cuda_libs}"
      fi
    fi
    if test -s "${abi_gpu_cuda_root}/SDK/C/lib/libcutil.a"; then
      if test "${with_gpu_libs}" = ""; then
        abi_gpu_cuda_libs="-L${abi_gpu_cuda_root}/SDK/C/lib -lcutil ${abi_gpu_cuda_libs}"
      fi
      abi_result="${abi_result} sdk"
    fi
    if test "${abi_result}" = ""; then
      abi_result="none"
    fi
    AC_MSG_RESULT([${abi_result}])
    if test "${with_gpu_libs}" = ""; then
      abi_gpu_cuda_libs="${abi_gpu_cuda_libs} -lcuda"
    fi
    if test "${abi_gpu_cuda_has_common}" = "no"; then
      AC_MSG_WARN([could not find libcuda.${abi_so_ext}])
    fi

    dnl C and C++ link flags
    AC_MSG_CHECKING([for Cuda link flags])
    if test "${CC_LDFLAGS_GPU}" = ""; then
      if test "${abi_cpu_64bits}" = "yes"; then
        CC_LDFLAGS_GPU="-Wl,-rpath=${abi_gpu_cuda_root}/lib64"
      else
        CC_LDFLAGS_GPU="-Wl,-rpath=${abi_gpu_cuda_root}/lib"
      fi
    fi
    if test "${CXX_LDFLAGS_GPU}" = ""; then
      if test "${abi_cpu_64bits}" = "yes"; then
        CXX_LDFLAGS_GPU="-Wl,-rpath=${abi_gpu_cuda_root}/lib64"
      else
        CXX_LDFLAGS_GPU="-Wl,-rpath=${abi_gpu_cuda_root}/lib"
      fi
    fi
    AC_MSG_RESULT([${CC_LDFLAGS_GPU}])

  fi dnl abi_gpu_cuda_root

  AC_MSG_NOTICE([Cuda incs: ${abi_gpu_cuda_incs}])
  AC_MSG_NOTICE([Cuda libs: ${abi_gpu_cuda_libs}])
])
m4trace:config/m4/arch-gpu.m4:271: -1- AC_DEFUN([ABI_GPU_INIT], [
  dnl Init
  abi_gpu_complete="unknown"
  abi_gpu_has_cc="no"
  abi_gpu_has_fft="no"
  abi_gpu_has_incs="no"
  abi_gpu_has_libs="no"
  abi_gpu_has_linalg="no"
  abi_gpu_usable="no"
  lib_gpu_fcflags=""
  lib_gpu_ldflags=""
  lib_gpu_flavor="none"
  lib_gpu_incs=""
  lib_gpu_libs=""

  if test "${enable_gpu}" = "yes"; then

    dnl Banner
    AC_MSG_NOTICE([Initializing GPU support])
    AC_MSG_CHECKING([which kind of GPU we want])
    AC_MSG_RESULT([${with_gpu_flavor}])

    dnl Check option consistency
    if test "${with_gpu_prefix}" != ""; then
      if test "${with_gpu_incs}" != ""; then
        AC_MSG_ERROR([use --with-gpu-prefix or --with-gpu-includes, not both])
      fi
      if test "${with_gpu_libs}" != ""; then
        AC_MSG_ERROR([use --with-gpu-prefix or --with-gpu-libs, not both])
      fi
      AC_MSG_NOTICE([looking for GPU support in ${with_gpu_prefix}])
    fi

    dnl Look for prerequisites
    case "${with_gpu_flavor}" in

      cuda*)
        _ABI_GPU_INIT_CUDA
        abi_gpu_has_cc="${abi_gpu_cuda_has_cc}"
        abi_gpu_has_fft="${abi_gpu_cuda_has_fft}"
        abi_gpu_has_incs="${abi_gpu_cuda_has_incs}"
        abi_gpu_has_libs="${abi_gpu_cuda_has_libs}"
        abi_gpu_has_linalg="${abi_gpu_cuda_has_linalg}"
        if test "${abi_gpu_has_cc}" = "yes" -a \
                "${abi_gpu_has_incs}" = "yes" -a \
                "${abi_gpu_has_libs}" = "yes"; then
          abi_gpu_complete="yes"
        else
          abi_gpu_complete="no"
        fi
        ;;

    esac

  else

    AC_MSG_NOTICE([GPU support disabled from command-line])

  fi dnl enable_gpu

  dnl Enable substitution
  AC_SUBST(lib_gpu_fcflags)
  AC_SUBST(lib_gpu_ldflags)
  AC_SUBST(lib_gpu_flavor)
  AC_SUBST(lib_gpu_incs)
  AC_SUBST(lib_gpu_libs)
])
m4trace:config/m4/arch-gpu.m4:350: -1- AC_DEFUN([ABI_GPU_DETECT], [
  AC_REQUIRE([ABI_GPU_INIT])

  dnl Initial setup
  abi_gpu_serial="no"
  abi_gpu_mpi="no"
  abi_gpu_precision=`echo "${with_gpu_flavor}" | cut -d- -f2`
  test "${abi_gpu_precision}" = "" && abi_gpu_precision="single"

  dnl Display user requests
  AC_MSG_CHECKING([whether to activate GPU support])
  AC_MSG_RESULT([${enable_gpu}])

  dnl Look for GPU libraries
  if test "${enable_gpu}" = "yes"; then

    dnl Check whether we have a working gpu environment
    AC_MSG_CHECKING([for the requested GPU support])
    AC_MSG_RESULT([${with_gpu_flavor}])

    case "${with_gpu_flavor}" in

      cuda*)
        _ABI_GPU_CHECK_CUDA
        abi_gpu_serial="${abi_gpu_cuda_serial}"
        abi_gpu_mpi="${abi_gpu_cuda_mpi}"
        if test "${abi_gpu_serial}" = "yes"; then
          AC_DEFINE([HAVE_GPU_CUDA],1,[Define to 1 if you have the Cuda library.])
          if test "${abi_gpu_cuda_old}" = "yes"; then
            AC_DEFINE([HAVE_GPU_CUDA3],1,[Define to 1 if you have a Cuda version < 4.])
          fi
          case "${abi_gpu_precision}" in
            single)
              AC_DEFINE(HAVE_GPU_CUDA_SP,1,[Define to 1 if you want to perform single-precision Cuda calculations.])
              ;;
            double)
              AC_DEFINE(HAVE_GPU_CUDA_DP,1,[Define to 1 if you want to perform double-precision Cuda calculations.])
              ;;
          esac
          lib_gpu_fcflags="${abi_gpu_cuda_fcflags}"
          lib_gpu_ldflags="${abi_gpu_cuda_ldflags}"
          lib_gpu_incs="${abi_gpu_cuda_incs}"
          lib_gpu_libs="${abi_gpu_cuda_libs}"
        fi
        ;;

    esac

    if test "${abi_gpu_serial}" = "no"; then
      AC_MSG_ERROR([GPU support is broken])
    fi

  fi

  dnl Transmit serial status to the source code
  if test "${abi_gpu_serial}" = "yes"; then
    AC_DEFINE([HAVE_GPU],1,[Define to 1 if you have a GPU library.])
    AC_DEFINE([HAVE_GPU_SERIAL],1,[Define to 1 if you have a serial GPU library.])
    lib_gpu_flavor="${with_gpu_flavor}"
  fi

  dnl Transmit MPI status to the source code
  if test "${abi_gpu_mpi}" = "yes"; then
    AC_DEFINE([HAVE_GPU_MPI],1,[Define to 1 if you have a MPI-aware GPU library.])
  fi

  dnl Output final flavor
  if test "${enable_gpu}" = "yes"; then
    AC_MSG_CHECKING([for the actual GPU support])
    AC_MSG_RESULT([${lib_gpu_flavor}])
  fi

  dnl Inform Automake
  AM_CONDITIONAL(DO_BUILD_15_GPU_TOOLBOX,[test "${lib_gpu_flavor}" != "none"])
  AM_CONDITIONAL(DO_BUILD_52_MANAGE_CUDA,[test "${lib_gpu_flavor}" = "cuda-double" -o "${lib_gpu_flavor}" = "cuda-single"])
])
m4trace:config/m4/arch-mpi.m4:21: -1- AC_DEFUN([_ABI_MPI_CHECK_CC], [
  dnl Set default values
  abi_mpi_cc_ok="no"

  dnl Try to compile a C MPI program
  AC_MSG_CHECKING([whether the C compiler supports MPI])

  dnl Back-up build environment
  ABI_ENV_BACKUP

  dnl Prepare build environment
  CPPFLAGS="${CPPFLAGS} ${lib_mpi_incs}"
  LDFLAGS="${CC_LDFLAGS}"
  LIBS="${CC_LIBS} ${lib_mpi_libs}"

  AC_LANG_PUSH([C])
  AC_LINK_IFELSE([AC_LANG_PROGRAM(
    [[#include <stdlib.h>
#include "mpi.h"]],
    [[
      int rc;

      MPI_Init(NULL,NULL);
      rc = MPI_Finalize();
    ]])], [abi_mpi_cc_ok="yes"], [abi_mpi_cc_ok="no"])
  AC_LANG_POP([C])

  dnl Restore build environment
  ABI_ENV_RESTORE

  AC_MSG_RESULT([${abi_mpi_cc_ok}])
])
m4trace:config/m4/arch-mpi.m4:65: -1- AC_DEFUN([_ABI_MPI_CHECK_CXX], [
  dnl Set default values
  abi_mpi_cxx_ok="no"

  dnl Try to compile a C++ MPI program
  AC_MSG_CHECKING([whether the C++ compiler supports MPI])

  dnl Back-up build environment
  ABI_ENV_BACKUP

  dnl Prepare build environment
  CPPFLAGS="${CPPFLAGS} ${lib_mpi_incs}"
  LDFLAGS="${CXX_LDFLAGS}"
  LIBS="${CXX_LIBS} ${lib_mpi_libs}"

  AC_LANG_PUSH([C++])
  AC_LINK_IFELSE([AC_LANG_PROGRAM(
    [[@%:@include "mpi.h"]],
    [[
      MPI::Init();
      MPI::Finalize();
    ]])], [abi_mpi_cxx_ok="yes"], [abi_mpi_cxx_ok="no"])
  AC_LANG_POP([C++])

  dnl Restore build environment
  ABI_ENV_RESTORE

  AC_MSG_RESULT([${abi_mpi_cxx_ok}])
])
m4trace:config/m4/arch-mpi.m4:106: -1- AC_DEFUN([_ABI_MPI_CHECK_FC], [
  dnl Set default values
  abi_mpi_fc_ok="no"

  dnl Try to compile a Fortran MPI program
  AC_MSG_CHECKING([whether the Fortran Compiler supports MPI])

  dnl Back-up build environment
  ABI_ENV_BACKUP

  dnl Prepare build environment
  CPPFLAGS="${CPPFLAGS} ${lib_mpi_incs}"
  LDFLAGS="${FC_LDFLAGS}"
  LIBS="${FC_LIBS} ${lib_mpi_libs}"

  AC_LANG_PUSH([Fortran])
  AC_LINK_IFELSE([AC_LANG_PROGRAM([],
    [[  
      include "mpif.h"
      integer :: ierr
      call mpi_init(ierr)
      call mpi_finalize(ierr)
    ]])], [abi_mpi_fc_ok="yes"], [abi_mpi_fc_ok="no"])
  AC_LANG_POP([Fortran])

  dnl Restore build environment
  ABI_ENV_RESTORE

  AC_MSG_RESULT([${abi_mpi_fc_ok}])
])
m4trace:config/m4/arch-mpi.m4:148: -1- AC_DEFUN([_ABI_MPI_CHECK_FC_LEVEL], [
  dnl Try to compile a MPI-2 Fortran program
  AC_MSG_CHECKING([which level of MPI is supported by the Fortran compiler])

  if test "${abi_mpi_fc_ok}" = "yes"; then

    dnl Back-up build environment
    ABI_ENV_BACKUP

    dnl Prepare build environment
    CPPFLAGS="${CPPFLAGS} ${lib_mpi_incs}"
    LDFLAGS="${FC_LDFLAGS}"
    LIBS="${FC_LIBS} ${lib_mpi_libs}"

    AC_LANG_PUSH([Fortran])
    AC_LINK_IFELSE([AC_LANG_PROGRAM([],
      [[  
              use mpi
              integer :: ierr
              call mpi_init(ierr)
              call mpi_finalize(ierr)
      ]])], [abi_mpi_fc_level="2"], [abi_mpi_fc_level="1"])
    AC_LANG_POP([Fortran])

    dnl Restore build environment
    ABI_ENV_RESTORE
  fi

  AC_MSG_RESULT([${abi_mpi_fc_level}])
])
m4trace:config/m4/arch-mpi.m4:188: -1- AC_DEFUN([_ABI_MPI_CHECK_INTEGER16], [
  dnl Set default values
  abi_mpi_integer16_ok="no"

  dnl Try to compile a Fortran program
  AC_MSG_CHECKING([whether the MPI library supports MPI_INTEGER16])

  dnl We assume a MPI implementation that provides the mpi module

  dnl Back-up build environment
  ABI_ENV_BACKUP
                                                                                            
  dnl Prepare build environment
  CPPFLAGS="${CPPFLAGS} ${lib_mpi_incs}"
  LDFLAGS="${FC_LDFLAGS}"
  LIBS="${FC_LIBS} ${lib_mpi_libs}"

  AC_LANG_PUSH([Fortran])
  AC_LINK_IFELSE([AC_LANG_PROGRAM([],
    [[  
      use mpi

      integer,parameter :: ii = MPI_INTEGER16

    ]])], [abi_mpi_integer16_ok="yes"], [abi_mpi_integer16_ok="no"])
  AC_LANG_POP
                                                                                            
  dnl Restore build environment
  ABI_ENV_RESTORE

  AC_MSG_RESULT([${abi_mpi_integer16_ok}])

  if test "${abi_mpi_integer16_ok}" = "yes"; then
    AC_DEFINE([HAVE_MPI_INTEGER16],1,
      [Define to 1 if your MPI library supports MPI_INTEGER16.])
  fi

])
m4trace:config/m4/arch-mpi.m4:236: -1- AC_DEFUN([_ABI_MPI_CHECK_CREATE_TYPE_STRUCT], [
  dnl Set default values
  abi_mpi_type_create_struct_ok="no"

  dnl Try to compile a Fortran MPI program
  AC_MSG_CHECKING([whether the MPI library supports MPI_CREATE_TYPE_STRUCT])

  if test "${abi_mpi_fc_level}" = "2"; then

    dnl No problem should appear for MPI2 but we test it anyway.

    dnl Back-up build environment
    ABI_ENV_BACKUP
                                                                                              
    dnl Prepare build environment
    CPPFLAGS="${CPPFLAGS} ${lib_mpi_incs}"
    LDFLAGS="${FC_LDFLAGS}"
    LIBS="${FC_LIBS} ${lib_mpi_libs}"
                                                                                              
    AC_LANG_PUSH([Fortran])
    AC_LINK_IFELSE([AC_LANG_PROGRAM([],
      [[  
        use mpi 
        integer,parameter :: ncount=10
        integer :: ierr,new_type
        integer :: block_length(ncount),block_type(ncount)
        integer(MPI_ADDRESS_KIND) :: block_displ(ncount)
                                                                                              
        call mpi_init(ierr)
        call MPI_TYPE_CREATE_STRUCT(ncount,block_length,block_displ,block_type,new_type,ierr)
        call mpi_finalize(ierr)
                                                                                              
      ]])], [abi_mpi_type_create_struct_ok="yes"], [abi_mpi_type_create_struct_ok="no"])
    AC_LANG_POP
                                                                                              
    dnl Restore build environment
    ABI_ENV_RESTORE

  else

    dnl Back-up build environment
    ABI_ENV_BACKUP

    dnl Prepare build environment
    CPPFLAGS="${CPPFLAGS} ${lib_mpi_incs}"
    LDFLAGS="${FC_LDFLAGS}"
    LIBS="${FC_LIBS} ${lib_mpi_libs}"

    AC_LANG_PUSH([Fortran])
    AC_LINK_IFELSE([AC_LANG_PROGRAM([],
      [[  
        include "mpif.h"
        integer,parameter :: ncount=10
        integer :: ierr,new_type
        integer :: block_length(ncount),block_type(ncount)
        integer(MPI_ADDRESS_KIND) :: block_displ(ncount)

        call mpi_init(ierr)
        call MPI_TYPE_CREATE_STRUCT(ncount,block_length,block_displ,block_type,new_type,ierr)
        call mpi_finalize(ierr)

      ]])], [abi_mpi_type_create_struct_ok="yes"], [abi_mpi_type_create_struct_ok="no"])
    AC_LANG_POP

    dnl Restore build environment
    ABI_ENV_RESTORE

  fi

  AC_MSG_RESULT([${abi_mpi_type_create_struct_ok}])

  if test "${abi_mpi_type_create_struct_ok}" = "yes"; then
    AC_DEFINE([HAVE_MPI_TYPE_CREATE_STRUCT],1,
      [Define to 1 if your MPI library supports MPI_TYPE_CREATE_STRUCT.])
  fi

])
m4trace:config/m4/arch-mpi.m4:322: -1- AC_DEFUN([_ABI_MPI_CHECK_IALLTOALL], [
  dnl Set default values
  abi_mpi_ialltoall_ok="no"

  dnl Try to compile a Fortran program
  AC_MSG_CHECKING([whether the MPI library supports MPI_IALLTOALL (MPI3)])

  dnl We assume a MPI implementation that provides the mpi module

  dnl Back-up build environment
  ABI_ENV_BACKUP
                                                                                            
  dnl Prepare build environment
  CPPFLAGS="${CPPFLAGS} ${lib_mpi_incs}"
  LDFLAGS="${FC_LDFLAGS}"
  LIBS="${FC_LIBS} ${lib_mpi_libs}"

  AC_LANG_PUSH([Fortran])
  AC_LINK_IFELSE([AC_LANG_PROGRAM([],
    [[  
      use mpi

      integer,parameter :: siz=5
      integer :: SENDBUF(siz), RECVBUF(siz)
      integer :: SENDCOUNT, SENDTYPE, RECVCOUNT, RECVTYPE
      integer :: COMM, REQUEST, IERROR

      ! Prototype
      ! <type>    SENDBUF(*), RECVBUF(*)
      ! INTEGER    SENDCOUNT, SENDTYPE, RECVCOUNT, RECVTYPE
      ! INTEGER    COMM, REQUEST, IERROR

      call MPI_IALLTOALL(SENDBUF, SENDCOUNT, SENDTYPE, RECVBUF, RECVCOUNT, &
      &  RECVTYPE, COMM, REQUEST, IERROR)

    ]])], [abi_mpi_ialltoall_ok="yes"], [abi_mpi_ialltoall_ok="no"])
  AC_LANG_POP
                                                                                            
  dnl Restore build environment
  ABI_ENV_RESTORE

  AC_MSG_RESULT([${abi_mpi_ialltoall_ok}])

  if test "${abi_mpi_ialltoall_ok}" = "yes"; then
    AC_DEFINE([HAVE_MPI_IALLTOALL],1,
      [Define to 1 if your MPI library supports MPI_IALLTOALL.])
  fi

])
m4trace:config/m4/arch-mpi.m4:381: -1- AC_DEFUN([_ABI_MPI_CHECK_IALLTOALLV], [
  dnl Set default values
  abi_mpi_ialltoallv_ok="no"

  dnl Try to compile a Fortran program
  AC_MSG_CHECKING([whether the MPI library supports MPI_IALLTOALLV (MPI3)])

  dnl We assume a MPI implementation that provides the mpi module

  dnl Back-up build environment
  ABI_ENV_BACKUP
                                                                                            
  dnl Prepare build environment
  CPPFLAGS="${CPPFLAGS} ${lib_mpi_incs}"
  LDFLAGS="${FC_LDFLAGS}"
  LIBS="${FC_LIBS} ${lib_mpi_libs}"

  AC_LANG_PUSH([Fortran])
  AC_LINK_IFELSE([AC_LANG_PROGRAM([],
    [[  
      use mpi

      integer,parameter :: siz=5,group_size=3
      integer :: SENDBUF(siz), RECVBUF(siz)
      integer :: SENDCOUNTS(group_size),  SDISPLS(group_size), RECVCOUNTS(group_size),RDISPLS(group_size)
      integer :: SENDTYPE, RECVTYPE
      integer :: COMM, REQUEST, IERROR

      call MPI_IALLTOALLV(SENDBUF, SENDCOUNTS, SDISPLS, SENDTYPE, RECVBUF, RECVCOUNTS, &
      &  RDISPLS, RECVTYPE, COMM, REQUEST, IERROR)

      !call MPI_Ialltoallv(const void *sendbuf, const int sendcounts[], const int sdispls[],
      !                   MPI_Datatype sendtype, void *recvbuf, const int recvcounts[],
      !                   const int rdispls[], MPI_Datatype recvtype, MPI_Comm comm, MPI_Request *request)

    ]])], [abi_mpi_ialltoallv_ok="yes"], [abi_mpi_ialltoallv_ok="no"])
  AC_LANG_POP
                                                                                            
  dnl Restore build environment
  ABI_ENV_RESTORE

  AC_MSG_RESULT([${abi_mpi_ialltoallv_ok}])

  if test "${abi_mpi_ialltoallv_ok}" = "yes"; then
    AC_DEFINE([HAVE_MPI_IALLTOALLV],1,
      [Define to 1 if your MPI library supports MPI_IALLTOALLV.])
  fi

])
m4trace:config/m4/arch-mpi.m4:440: -1- AC_DEFUN([_ABI_MPI_CHECK_IALLREDUCE], [
  dnl Set default values
  abi_mpi_iallreduce_ok="no"

  dnl Try to compile a Fortran MPI program
  AC_MSG_CHECKING([whether the MPI library supports MPI_IALLREDUCE (MPI3)])

  dnl We assume a MPI implementation that provides the mpi module

  dnl Back-up build environment
  ABI_ENV_BACKUP
                                                                                            
  dnl Prepare build environment
  CPPFLAGS="${CPPFLAGS} ${lib_mpi_incs}"
  LDFLAGS="${FC_LDFLAGS}"
  LIBS="${FC_LIBS} ${lib_mpi_libs}"

  AC_LANG_PUSH([Fortran])
  AC_LINK_IFELSE([AC_LANG_PROGRAM([],
    [[  
      use mpi

      integer,parameter :: count=5
      integer :: SENDBUF(count), RECVBUF(count)
      integer :: SENDCOUNT, SENDTYPE, RECVCOUNT, RECVTYPE
      integer :: COMM, REQUEST, IERROR

      ! Prototype
      !<type> SENDBUF(*), RECVBUF(*) INTEGER COUNT, DATATYPE, OP, COMM, REQUEST, IERROR

      call MPI_IALLREDUCE(sendbuf, recvbuf, count, MPI_INTEGER, MPI_SUM, comm, request, ierror)

    ]])], [abi_mpi_iallreduce_ok="yes"], [abi_mpi_iallreduce_ok="no"])
  AC_LANG_POP
                                                                                            
  dnl Restore build environment
  ABI_ENV_RESTORE

  AC_MSG_RESULT([${abi_mpi_iallreduce_ok}])

  if test "${abi_mpi_iallreduce_ok}" = "yes"; then
    AC_DEFINE([HAVE_MPI_IALLREDUCE],1,
      [Define to 1 if your MPI library supports MPI_IALLREDUCE.])
  fi

])
m4trace:config/m4/arch-mpi.m4:500: -1- AC_DEFUN([_ABI_MPI_CREATE_WRAPPER], [
  dnl Init
  tmp_name=`echo "$1" | sed -e 's/.*/\L&/'`
  ${MKDIR_P} config/wrappers

  dnl Create file
  cat >${abinit_builddir}/config/wrappers/wrap-mpi${tmp_name} <<EOF
#!/bin/sh

$1="$2"
export $1

$3 \[$]{*}
EOF

  dnl Fix permissions
  chmod u+x ${abinit_builddir}/config/wrappers/wrap-mpi${tmp_name}

  dnl Overwrite compiler setting
  eval $1="${abinit_builddir}/config/wrappers/wrap-mpi${tmp_name}"

  dnl Clean-up the mess
  unset tmp_name
])
m4trace:config/m4/arch-mpi.m4:537: -1- AC_DEFUN([ABI_MPI_DUMP], [
  AC_MSG_NOTICE([])
  AC_MSG_NOTICE([dumping all MPI parameters for diagnostics])
  AC_MSG_NOTICE([------------------------------------------])
  AC_MSG_NOTICE([])
  AC_MSG_NOTICE([Configure options:])
  AC_MSG_NOTICE([])
  AC_MSG_NOTICE([  * enable_mpi         = ${abi_mpi_enabled}])
  AC_MSG_NOTICE([  * enable_mpi_inplace = ${enable_mpi_inplace}])
  AC_MSG_NOTICE([  * enable_mpi_io      = ${enable_mpi_io}])
  AC_MSG_NOTICE([  * with_mpi_incs      = ${with_mpi_incs}])
  AC_MSG_NOTICE([  * with_mpi_level     = ${with_mpi_level}])
  AC_MSG_NOTICE([  * with_mpi_libs      = ${with_mpi_libs}])
  AC_MSG_NOTICE([  * with_mpi_prefix    = ${with_mpi_prefix}])
  AC_MSG_NOTICE([  * MPI_RUNNER         = ${MPI_RUNNER}])
  AC_MSG_NOTICE([  * MPI_2PROCS         = ${MPI_2PROCS}])
  AC_MSG_NOTICE([])
  AC_MSG_NOTICE([Internal parameters])
  AC_MSG_NOTICE([])
  AC_MSG_NOTICE([  * MPI C compiler present (required)       : ${abi_mpi_has_cc}])
  AC_MSG_NOTICE([  * MPI C compiler works (required)         : ${abi_mpi_cc_ok}])
  AC_MSG_NOTICE([  * MPI C++ compiler present (optional)     : ${abi_mpi_has_cxx}])
  AC_MSG_NOTICE([  * MPI C++ compiler works (optional)       : ${abi_mpi_cxx_ok}])
  AC_MSG_NOTICE([  * MPI Fortran compiler present (required) : ${abi_mpi_has_fc}])
  AC_MSG_NOTICE([  * MPI Fortran compiler works (required)   : ${abi_mpi_fc_ok}])
  AC_MSG_NOTICE([  * MPI Fortran level supported (1 or 2)    : ${abi_mpi_fc_level}])
  AC_MSG_NOTICE([  * MPI environment complete (required)     : ${abi_mpi_complete}])
  AC_MSG_NOTICE([  * MPI environment usable (required)       : ${abi_mpi_usable}])
  AC_MSG_NOTICE([])
  AC_MSG_NOTICE([All required parameters must be set to 'yes'.])
  AC_MSG_NOTICE([If not, the configuration and/or the build will])
  AC_MSG_NOTICE([very likely fail.])
  AC_MSG_NOTICE([])
])
m4trace:config/m4/arch-mpi.m4:581: -1- AC_DEFUN([ABI_MPI_INIT], [
  dnl Init
  abi_mpi_cc_ok="unknown"
  abi_mpi_cxx_ok="unknown"
  abi_mpi_complete="unknown"
  abi_mpi_enabled="${enable_mpi}"
  abi_mpi_fc_level="none"
  abi_mpi_fc_ok="unknown"
  abi_mpi_has_cc="no"
  abi_mpi_has_cxx="no"
  abi_mpi_has_fc="no"
  abi_mpi_level="${with_mpi_level}"
  abi_mpi_usable="no"
  lib_mpi_incs="${with_mpi_incs}"
  lib_mpi_libs="${with_mpi_libs}"
  test "${MPI_RUNNER}" = "" && MPI_RUNNER="${with_mpi_runner}"
  test "${MPI_2PROCS}" = "" && MPI_2PROCS="-np 2"
  MPI_CC=""
  MPI_CXX=""
  MPI_FC=""

  if test "${enable_mpi}" = "yes" -o "${enable_mpi}" = "auto"; then

    dnl Banner
    AC_MSG_NOTICE([Initializing MPI support])

    dnl Check whether to look for generic files
    if test "${with_mpi_prefix}" != ""; then
      AC_MSG_NOTICE([looking for MPI in ${with_mpi_prefix}])

      dnl Look for incompatibilities
      if test "${CPP}" != ""; then
        AC_MSG_WARN([${CPP} might not be fully compatible with MPI])
      fi
      if test "${MPI_RUNNER}" != ""; then
        AC_MSG_ERROR([use --with-mpi-prefix or set MPI_RUNNER, not both])
      fi
      if test "${with_mpi_incs}" != ""; then
        AC_MSG_ERROR([use --with-mpi-prefix or --with-mpi-includes, not both])
      fi
      if test "${with_mpi_level}" != ""; then
        AC_MSG_WARN([forcing MPI level to ${with_mpi_level} might make the build fail])
      fi
      if test "${with_mpi_libs}" != ""; then
        AC_MSG_ERROR([use --with-mpi-prefix or --with-mpi-libs, not both])
      fi
      if test "${with_mpi_runner}" != ""; then
        AC_MSG_ERROR([use --with-mpi-prefix or --with-mpi-runner, not both])
      fi

      dnl Look for a C compiler
      AC_MSG_CHECKING([for a MPI C compiler])
      if test -x "${with_mpi_prefix}/bin/mpicc"; then
        abi_mpi_has_cc="yes"
        MPI_CC="${with_mpi_prefix}/bin/mpicc"
      fi
      if test "${MPI_CC}" = ""; then
        AC_MSG_RESULT([none found])
      else
        AC_MSG_RESULT([${MPI_CC}])
      fi

      dnl Look for a C++ compiler
      AC_MSG_CHECKING([for a MPI C++ compiler])
      if test -x "${with_mpi_prefix}/bin/mpicxx"; then
        abi_mpi_has_cxx="yes"
        MPI_CXX="${with_mpi_prefix}/bin/mpicxx"
      elif test -x "${with_mpi_prefix}/bin/mpic++"; then
        abi_mpi_has_cxx="yes"
        MPI_CXX="${with_mpi_prefix}/bin/mpic++"
      fi
      if test "${MPI_CXX}" = ""; then
        AC_MSG_RESULT([none found])
      else
        AC_MSG_RESULT([${MPI_CXX}])
      fi

      dnl Look for a Fortran 90 compiler
      AC_MSG_CHECKING([for a MPI Fortran compiler])
      if test -x "${with_mpi_prefix}/bin/mpif90"; then
        abi_mpi_has_fc="yes"
        MPI_FC="${with_mpi_prefix}/bin/mpif90"
      fi
      if test "${MPI_FC}" = ""; then
        AC_MSG_RESULT([none found])
      else
        AC_MSG_RESULT([${MPI_FC}])
      fi

      dnl Report whether generic MPI implementation is sufficiently complete
      if test "${abi_mpi_has_cc}" = "yes" -a \
              "${abi_mpi_has_fc}" = "yes"; then
        abi_mpi_complete="yes"

        dnl "Baise-couillon" for those who set compilers twice
        dnl FIXME: does not handle the case when full path is not
        dnl        provided, e.g. prefix=/usr, CC=mpicc.
        dnl Hint: TRUE_CC=`echo "${CC}" | cut -d' ' -f1`
        dnl       TRUE_CC=`type -t "${TRUE_CC}"`
        dnl       if "file" type -p ...
        tmp_chk_cc="no"
        tmp_chk_redundant="no"
        if test "${CC}" = "${MPI_CC}"; then
          tmp_chk_cc="yes"
          tmp_chk_redundant="yes"
          AC_MSG_WARN([redundant setting of MPI C compiler!
    Use --with-mpi-prefix preferably.])
        fi
        tmp_chk_cxx="no"
        if test "${CXX}" = "${MPI_CXX}"; then
          tmp_chk_cxx="yes"
          AC_MSG_WARN([redundant setting of MPI C++ compiler!
    Use --with-mpi-prefix preferably.])
        fi
        if test "${tmp_chk_cxx}" != "${tmp_chk_redundant}"; then
          AC_MSG_WARN([inconsistent compiler settings!
    Use --with-mpi-prefix or set (CC, CXX, FC), not both.])
        fi
        tmp_chk_fc="no"
        if test "${FC}" = "${MPI_FC}"; then
          tmp_chk_fc="yes"
          AC_MSG_WARN([redundant setting of MPI Fortran compiler
    Use --with-mpi-prefix preferably.])
        fi
        if test "${tmp_chk_fc}" != "${tmp_chk_redundant}"; then
          AC_MSG_ERROR([inconsistent compiler settings!
    Use --with-mpi-prefix or set (CC, CXX, FC), not both.])
        fi
        if test "${tmp_chk_redundant}" = "yes"; then
          CC=""
          CXX=""
          FC=""
          AC_MSG_NOTICE([ignoring CC, CXX, and FC settings])
        fi
        unset tmp_chk_cc tmp_chk_cxx tmp_chk_fc tmp_chk_redundant

        dnl Decide whether to wrap MPI compiler calls
        if test "${CC}" = ""; then
          CC="${MPI_CC}"
        else
          AC_MSG_NOTICE([creating wrapper for MPI C compiler])
          _ABI_MPI_CREATE_WRAPPER([CC],[${CC}],[${MPI_CC}])
        fi
        if test "${CXX}" = ""; then
          CXX="${MPI_CXX}"
        else
          AC_MSG_NOTICE([creating wrapper for MPI C++ compiler])
          _ABI_MPI_CREATE_WRAPPER([CXX],[${CXX}],[${MPI_CXX}])
        fi
        if test "${FC}" = ""; then
          FC="${MPI_FC}"
        else
          AC_MSG_NOTICE([creating wrapper for MPI Fortran compiler])
          _ABI_MPI_CREATE_WRAPPER([FC],[${FC}],[${MPI_FC}])
        fi
      else
        unset MPI_CC
        unset MPI_CXX
        unset MPI_FC
        unset MPI_RUNNER
        unset MPI_2PROCS
        abi_mpi_complete="no"
      fi

    else dnl with_mpi_prefix

      dnl Inform about compiler checks
      AC_MSG_NOTICE([compiler checks deferred])
  
    fi dnl with_mpi_prefix

  else dnl enable_mpi

    AC_MSG_NOTICE([MPI support disabled from command-line])
    enable_mpi_inplace="no"
    enable_mpi_io="no"
    with_mpi_level=""
    with_mpi_prefix=""
    lib_mpi_incs=""
    lib_mpi_libs=""
    MPI_RUNNER=""
    MPI_2PROCS=""

  fi dnl enable_mpi

  dnl Enable substitution
  AC_SUBST(MPI_RUNNER)
  AC_SUBST(MPI_2PROCS)
  AC_SUBST(lib_mpi_fcflags)
  AC_SUBST(lib_mpi_ldflags)
  AC_SUBST(lib_mpi_incs)
  AC_SUBST(lib_mpi_libs)
])
m4trace:config/m4/arch-mpi.m4:787: -1- AC_DEFUN([ABI_MPI_DETECT], [
  dnl Init
  AC_REQUIRE([ABI_MPI_INIT])
  lib_mpi_fcflags=""
  lib_mpi_ldflags=""
  lib_mpi_incs=""
  lib_mpi_libs=""

  dnl Report status
  AC_MSG_CHECKING([whether to build MPI code])
  AC_MSG_RESULT([${enable_mpi}])

  if test "${enable_mpi}" = "yes" -o "${enable_mpi}" = "auto"; then

    dnl Check whether MPI is usable
    if test "${abi_mpi_complete}" != "no"; then
      _ABI_MPI_CHECK_CC
      _ABI_MPI_CHECK_CXX
      _ABI_MPI_CHECK_FC

      if test "${abi_mpi_cc_ok}" = "yes" -a \
              "${abi_mpi_fc_ok}" = "yes"; then
        abi_mpi_usable="yes"
      fi
    fi
    AC_MSG_CHECKING([whether MPI is usable])
    AC_MSG_RESULT([${abi_mpi_usable}])

    if test "${abi_mpi_usable}" = "no"; then

      case "${enable_mpi}" in
        auto)
          AC_MSG_WARN([MPI support is broken - disabling MPI])
          ;;
        yes)
          AC_MSG_ERROR([MPI support is broken - please fix your config parameters and/or MPI installation])
          ;;
      esac

      abi_mpi_enabled="no"
      enable_mpi="no"
      enable_mpi_io="no"

    else

      dnl Force enable_mpi to "yes", for clarity and to avoid having to
      dnl further test "auto"
      enable_mpi="yes"

      dnl Propagate main trigger
      AC_DEFINE([HAVE_MPI],1,[Define to 1 if you want to enable MPI support.])

      dnl Propagate MPI I/O trigger
      AC_MSG_CHECKING([whether to build MPI I/O code])
      AC_MSG_RESULT([${enable_mpi_io}])
      if test "${enable_mpi_io}" = "yes" -o "${enable_mpi_io}" = "auto"; then
        AC_DEFINE([HAVE_MPI_IO],1,[Define to 1 if you want MPI I/O support.])
      fi

      dnl Check MPI I/O trigger
      if test "${enable_mpi}" = "yes" -a "${enable_mpi_io}" = "no"; then
        AC_MSG_WARN([disabling MPI I/O is not recommended])
      fi

      dnl Check MPI level actually supported
      _ABI_MPI_CHECK_FC_LEVEL

      dnl Select MPI level
      if test "${abi_mpi_level}" = ""; then
        abi_mpi_level="${abi_mpi_fc_level}"
      else
        AC_MSG_NOTICE([forcing MPI-${abi_mpi_level} standard support])
        if test "${abi_mpi_level}" != "${abi_mpi_fc_level}"; then
        AC_MSG_WARN([detected MPI-${abi_mpi_fc_level} support but using MPI-${abi_mpi_level} instructions])
        fi
      fi

      dnl Propagate MPI level
      case "${abi_mpi_level}" in
        1)
          AC_DEFINE([HAVE_MPI1],1,[Define to 1 if you have a MPI-1 implementation.])
          ;;
        2)
          AC_DEFINE([HAVE_MPI2],1,[Define to 1 if you have a MPI-2 implementation.])
          ;;
      esac

      dnl Test the availability of problematic MPI constants 
      _ABI_MPI_CHECK_INTEGER16()

      dnl Test the availability of problematic MPI primitives
      _ABI_MPI_CHECK_CREATE_TYPE_STRUCT()

      dnl Check MPI3 extensions (very) important for HPC.
      _ABI_MPI_CHECK_IALLTOALL()
      _ABI_MPI_CHECK_IALLTOALLV()
      _ABI_MPI_CHECK_IALLREDUCE()

    fi dnl mpi_usable

  fi dnl enable_mpi

  AM_CONDITIONAL(DO_TEST_MPI,[test "${enable_mpi}" = "yes"])
])
m4trace:config/m4/auto-autotools.m4:31: -1- AC_DEFUN([ABI_INFO_AUTOTOOLS], [
  dnl Store version numbers
  abi_m4_version="010416"
  abi_ac_version="026900"
  abi_am_version="011304"
  abi_lt_version="020406"

  dnl Display version information
  AC_MSG_NOTICE([M4 ${abi_m4_version} - Autoconf ${abi_ac_version} - Automake ${abi_am_version} - Libtool ${abi_lt_version}])

  dnl Substitute variables
  AC_SUBST(abi_m4_version)
  AC_SUBST(abi_ac_version)
  AC_SUBST(abi_am_version)
  AC_SUBST(abi_lt_version)
])
m4trace:config/m4/auto-autotools.m4:55: -1- AC_DEFUN([ABI_INIT_DIRS], [
  dnl Set paths (needed by other ABINIT macros)
  _AC_SRCDIRS(["."])
  abinit_srcdir="${ac_abs_top_srcdir}"
  abinit_builddir="${ac_abs_top_builddir}"
  abinit_moddir="${abinit_builddir}/src/mods"

  export abinit_srcdir abinit_builddir

  AC_SUBST(abinit_srcdir)
  AC_SUBST(abinit_builddir)
  AC_SUBST(abinit_moddir)
])
m4trace:config/m4/auto-corelibs.m4:31: -1- AC_DEFUN([ABI_CORELIBS_INIT], [
  dnl Set include dirs
  src_01_gsl_ext_incs='-I$(top_builddir)/src/01_gsl_ext -I$(top_srcdir)/src/01_gsl_ext'
  src_02_clib_incs='-I$(top_builddir)/src/02_clib -I$(top_srcdir)/src/02_clib'
  src_10_defs_incs='-I$(top_builddir)/src/10_defs -I$(top_srcdir)/src/10_defs'
  src_10_dumpinfo_incs='-I$(top_builddir)/src/10_dumpinfo -I$(top_srcdir)/src/10_dumpinfo'
  src_11_memory_mpi_incs='-I$(top_builddir)/src/11_memory_mpi -I$(top_srcdir)/src/11_memory_mpi'
  src_12_hide_mpi_incs='-I$(top_builddir)/src/12_hide_mpi -I$(top_srcdir)/src/12_hide_mpi'
  src_14_hidewrite_incs='-I$(top_builddir)/src/14_hidewrite -I$(top_srcdir)/src/14_hidewrite'
  src_15_gpu_toolbox_incs='-I$(top_builddir)/src/15_gpu_toolbox -I$(top_srcdir)/src/15_gpu_toolbox'
  src_16_hideleave_incs='-I$(top_builddir)/src/16_hideleave -I$(top_srcdir)/src/16_hideleave'
  src_17_libtetra_ext_incs='-I$(top_builddir)/src/17_libtetra_ext -I$(top_srcdir)/src/17_libtetra_ext'
  src_18_timing_incs='-I$(top_builddir)/src/18_timing -I$(top_srcdir)/src/18_timing'
  src_21_hashfuncs_incs='-I$(top_builddir)/src/21_hashfuncs -I$(top_srcdir)/src/21_hashfuncs'
  src_27_toolbox_oop_incs='-I$(top_builddir)/src/27_toolbox_oop -I$(top_srcdir)/src/27_toolbox_oop'
  src_28_numeric_noabirule_incs='-I$(top_builddir)/src/28_numeric_noabirule -I$(top_srcdir)/src/28_numeric_noabirule'
  src_29_kpoints_incs='-I$(top_builddir)/src/29_kpoints -I$(top_srcdir)/src/29_kpoints'
  src_32_util_incs='-I$(top_builddir)/src/32_util -I$(top_srcdir)/src/32_util'
  src_41_geometry_incs='-I$(top_builddir)/src/41_geometry -I$(top_srcdir)/src/41_geometry'
  src_41_xc_lowlevel_incs='-I$(top_builddir)/src/41_xc_lowlevel -I$(top_srcdir)/src/41_xc_lowlevel'
  src_42_libpaw_incs='-I$(top_builddir)/src/42_libpaw -I$(top_srcdir)/src/42_libpaw'
  src_42_nlstrain_incs='-I$(top_builddir)/src/42_nlstrain -I$(top_srcdir)/src/42_nlstrain'
  src_42_parser_incs='-I$(top_builddir)/src/42_parser -I$(top_srcdir)/src/42_parser'
  src_43_ptgroups_incs='-I$(top_builddir)/src/43_ptgroups -I$(top_srcdir)/src/43_ptgroups'
  src_43_wvl_wrappers_incs='-I$(top_builddir)/src/43_wvl_wrappers -I$(top_srcdir)/src/43_wvl_wrappers'
  src_44_abitools_incs='-I$(top_builddir)/src/44_abitools -I$(top_srcdir)/src/44_abitools'
  src_44_abitypes_defs_incs='-I$(top_builddir)/src/44_abitypes_defs -I$(top_srcdir)/src/44_abitypes_defs'
  src_45_geomoptim_incs='-I$(top_builddir)/src/45_geomoptim -I$(top_srcdir)/src/45_geomoptim'
  src_45_xgTools_incs='-I$(top_builddir)/src/45_xgTools -I$(top_srcdir)/src/45_xgTools'
  src_46_diago_incs='-I$(top_builddir)/src/46_diago -I$(top_srcdir)/src/46_diago'
  src_49_gw_toolbox_oop_incs='-I$(top_builddir)/src/49_gw_toolbox_oop -I$(top_srcdir)/src/49_gw_toolbox_oop'
  src_51_manage_mpi_incs='-I$(top_builddir)/src/51_manage_mpi -I$(top_srcdir)/src/51_manage_mpi'
  src_52_fft_mpi_noabirule_incs='-I$(top_builddir)/src/52_fft_mpi_noabirule -I$(top_srcdir)/src/52_fft_mpi_noabirule'
  src_52_manage_cuda_incs='-I$(top_builddir)/src/52_manage_cuda -I$(top_srcdir)/src/52_manage_cuda'
  src_53_ffts_incs='-I$(top_builddir)/src/53_ffts -I$(top_srcdir)/src/53_ffts'
  src_54_spacepar_incs='-I$(top_builddir)/src/54_spacepar -I$(top_srcdir)/src/54_spacepar'
  src_55_abiutil_incs='-I$(top_builddir)/src/55_abiutil -I$(top_srcdir)/src/55_abiutil'
  src_56_io_mpi_incs='-I$(top_builddir)/src/56_io_mpi -I$(top_srcdir)/src/56_io_mpi'
  src_56_mixing_incs='-I$(top_builddir)/src/56_mixing -I$(top_srcdir)/src/56_mixing'
  src_56_recipspace_incs='-I$(top_builddir)/src/56_recipspace -I$(top_srcdir)/src/56_recipspace'
  src_56_xc_incs='-I$(top_builddir)/src/56_xc -I$(top_srcdir)/src/56_xc'
  src_57_iopsp_parser_incs='-I$(top_builddir)/src/57_iopsp_parser -I$(top_srcdir)/src/57_iopsp_parser'
  src_57_iovars_incs='-I$(top_builddir)/src/57_iovars -I$(top_srcdir)/src/57_iovars'
  src_59_ionetcdf_incs='-I$(top_builddir)/src/59_ionetcdf -I$(top_srcdir)/src/59_ionetcdf'
  src_61_occeig_incs='-I$(top_builddir)/src/61_occeig -I$(top_srcdir)/src/61_occeig'
  src_62_cg_noabirule_incs='-I$(top_builddir)/src/62_cg_noabirule -I$(top_srcdir)/src/62_cg_noabirule'
  src_62_ctqmc_incs='-I$(top_builddir)/src/62_ctqmc -I$(top_srcdir)/src/62_ctqmc'
  src_62_iowfdenpot_incs='-I$(top_builddir)/src/62_iowfdenpot -I$(top_srcdir)/src/62_iowfdenpot'
  src_62_poisson_incs='-I$(top_builddir)/src/62_poisson -I$(top_srcdir)/src/62_poisson'
  src_62_wvl_wfs_incs='-I$(top_builddir)/src/62_wvl_wfs -I$(top_srcdir)/src/62_wvl_wfs'
  src_63_bader_incs='-I$(top_builddir)/src/63_bader -I$(top_srcdir)/src/63_bader'
  src_64_psp_incs='-I$(top_builddir)/src/64_psp -I$(top_srcdir)/src/64_psp'
  src_65_lotf_base_incs='-I$(top_builddir)/src/65_lotf_base -I$(top_srcdir)/src/65_lotf_base'
  src_65_paw_incs='-I$(top_builddir)/src/65_paw -I$(top_srcdir)/src/65_paw'
  src_66_nonlocal_incs='-I$(top_builddir)/src/66_nonlocal -I$(top_srcdir)/src/66_nonlocal'
  src_66_vdwxc_incs='-I$(top_builddir)/src/66_vdwxc -I$(top_srcdir)/src/66_vdwxc'
  src_66_wfs_incs='-I$(top_builddir)/src/66_wfs -I$(top_srcdir)/src/66_wfs'
  src_67_common_incs='-I$(top_builddir)/src/67_common -I$(top_srcdir)/src/67_common'
  src_67_triqs_ext_incs='-I$(top_builddir)/src/67_triqs_ext -I$(top_srcdir)/src/67_triqs_ext'
  src_68_dmft_incs='-I$(top_builddir)/src/68_dmft -I$(top_srcdir)/src/68_dmft'
  src_68_lotf_incs='-I$(top_builddir)/src/68_lotf -I$(top_srcdir)/src/68_lotf'
  src_68_recursion_incs='-I$(top_builddir)/src/68_recursion -I$(top_srcdir)/src/68_recursion'
  src_68_rsprc_incs='-I$(top_builddir)/src/68_rsprc -I$(top_srcdir)/src/68_rsprc'
  src_69_wfdesc_incs='-I$(top_builddir)/src/69_wfdesc -I$(top_srcdir)/src/69_wfdesc'
  src_70_gw_incs='-I$(top_builddir)/src/70_gw -I$(top_srcdir)/src/70_gw'
  src_71_bse_incs='-I$(top_builddir)/src/71_bse -I$(top_srcdir)/src/71_bse'
  src_71_wannier_incs='-I$(top_builddir)/src/71_wannier -I$(top_srcdir)/src/71_wannier'
  src_72_response_incs='-I$(top_builddir)/src/72_response -I$(top_srcdir)/src/72_response'
  src_77_ddb_incs='-I$(top_builddir)/src/77_ddb -I$(top_srcdir)/src/77_ddb'
  src_77_suscep_incs='-I$(top_builddir)/src/77_suscep -I$(top_srcdir)/src/77_suscep'
  src_78_effpot_incs='-I$(top_builddir)/src/78_effpot -I$(top_srcdir)/src/78_effpot'
  src_78_eph_incs='-I$(top_builddir)/src/78_eph -I$(top_srcdir)/src/78_eph'
  src_79_seqpar_mpi_incs='-I$(top_builddir)/src/79_seqpar_mpi -I$(top_srcdir)/src/79_seqpar_mpi'
  src_80_tdep_incs='-I$(top_builddir)/src/80_tdep -I$(top_srcdir)/src/80_tdep'
  src_83_cut3d_incs='-I$(top_builddir)/src/83_cut3d -I$(top_srcdir)/src/83_cut3d'
  src_84_fold2Bloch_incs='-I$(top_builddir)/src/84_fold2Bloch -I$(top_srcdir)/src/84_fold2Bloch'
  src_94_scfcv_incs='-I$(top_builddir)/src/94_scfcv -I$(top_srcdir)/src/94_scfcv'
  src_95_drive_incs='-I$(top_builddir)/src/95_drive -I$(top_srcdir)/src/95_drive'
  src_incs_incs='-I$(top_builddir)/src/incs -I$(top_srcdir)/src/incs'
  src_mods_incs='-I$(top_builddir)/src/mods -I$(top_srcdir)/src/mods'

  dnl Substitute variables
  AC_SUBST(src_01_gsl_ext_incs)
  AC_SUBST(src_02_clib_incs)
  AC_SUBST(src_10_defs_incs)
  AC_SUBST(src_10_dumpinfo_incs)
  AC_SUBST(src_11_memory_mpi_incs)
  AC_SUBST(src_12_hide_mpi_incs)
  AC_SUBST(src_14_hidewrite_incs)
  AC_SUBST(src_15_gpu_toolbox_incs)
  AC_SUBST(src_16_hideleave_incs)
  AC_SUBST(src_17_libtetra_ext_incs)
  AC_SUBST(src_18_timing_incs)
  AC_SUBST(src_21_hashfuncs_incs)
  AC_SUBST(src_27_toolbox_oop_incs)
  AC_SUBST(src_28_numeric_noabirule_incs)
  AC_SUBST(src_29_kpoints_incs)
  AC_SUBST(src_32_util_incs)
  AC_SUBST(src_41_geometry_incs)
  AC_SUBST(src_41_xc_lowlevel_incs)
  AC_SUBST(src_42_libpaw_incs)
  AC_SUBST(src_42_nlstrain_incs)
  AC_SUBST(src_42_parser_incs)
  AC_SUBST(src_43_ptgroups_incs)
  AC_SUBST(src_43_wvl_wrappers_incs)
  AC_SUBST(src_44_abitools_incs)
  AC_SUBST(src_44_abitypes_defs_incs)
  AC_SUBST(src_45_geomoptim_incs)
  AC_SUBST(src_45_xgTools_incs)
  AC_SUBST(src_46_diago_incs)
  AC_SUBST(src_49_gw_toolbox_oop_incs)
  AC_SUBST(src_51_manage_mpi_incs)
  AC_SUBST(src_52_fft_mpi_noabirule_incs)
  AC_SUBST(src_52_manage_cuda_incs)
  AC_SUBST(src_53_ffts_incs)
  AC_SUBST(src_54_spacepar_incs)
  AC_SUBST(src_55_abiutil_incs)
  AC_SUBST(src_56_io_mpi_incs)
  AC_SUBST(src_56_mixing_incs)
  AC_SUBST(src_56_recipspace_incs)
  AC_SUBST(src_56_xc_incs)
  AC_SUBST(src_57_iopsp_parser_incs)
  AC_SUBST(src_57_iovars_incs)
  AC_SUBST(src_59_ionetcdf_incs)
  AC_SUBST(src_61_occeig_incs)
  AC_SUBST(src_62_cg_noabirule_incs)
  AC_SUBST(src_62_ctqmc_incs)
  AC_SUBST(src_62_iowfdenpot_incs)
  AC_SUBST(src_62_poisson_incs)
  AC_SUBST(src_62_wvl_wfs_incs)
  AC_SUBST(src_63_bader_incs)
  AC_SUBST(src_64_psp_incs)
  AC_SUBST(src_65_lotf_base_incs)
  AC_SUBST(src_65_paw_incs)
  AC_SUBST(src_66_nonlocal_incs)
  AC_SUBST(src_66_vdwxc_incs)
  AC_SUBST(src_66_wfs_incs)
  AC_SUBST(src_67_common_incs)
  AC_SUBST(src_67_triqs_ext_incs)
  AC_SUBST(src_68_dmft_incs)
  AC_SUBST(src_68_lotf_incs)
  AC_SUBST(src_68_recursion_incs)
  AC_SUBST(src_68_rsprc_incs)
  AC_SUBST(src_69_wfdesc_incs)
  AC_SUBST(src_70_gw_incs)
  AC_SUBST(src_71_bse_incs)
  AC_SUBST(src_71_wannier_incs)
  AC_SUBST(src_72_response_incs)
  AC_SUBST(src_77_ddb_incs)
  AC_SUBST(src_77_suscep_incs)
  AC_SUBST(src_78_effpot_incs)
  AC_SUBST(src_78_eph_incs)
  AC_SUBST(src_79_seqpar_mpi_incs)
  AC_SUBST(src_80_tdep_incs)
  AC_SUBST(src_83_cut3d_incs)
  AC_SUBST(src_84_fold2Bloch_incs)
  AC_SUBST(src_94_scfcv_incs)
  AC_SUBST(src_95_drive_incs)
  AC_SUBST(src_incs_incs)
  AC_SUBST(src_mods_incs)

])
m4trace:config/m4/auto-debug.m4:3: -1- AC_DEFUN([ABI_CC_DBGFLAGS], [
  dnl Init
  abi_cc_vendor_dbg="none"
  abi_cc_version_dbg="none"
  abi_cpu_spec_dbg="none"

  dnl Look for debug flags
  AC_MSG_CHECKING([which cc debug flags to apply])

  dnl Case built from config/debug/cc_*.conf
  if test "${abi_cc_vendor}" = "gnu"; then
    abi_cc_vendor_dbg="gnu"
    case "${abi_cc_version}" in
      4.9)
        abi_cc_version_dbg="4.9"
        abi_cpu_spec_dbg="default"
        case "${enable_debug}" in
          naughty)
            enable_debug_dbg="naughty"
            CFLAGS_DEBUG="${CFLAGS_DEBUG} -g3 -ggdb -fdiagnostics-color=auto -Wall -Wextra -fbounds-check"
            ;;
          verbose)
            enable_debug_dbg="verbose"
            
            ;;
          paranoid)
            enable_debug_dbg="paranoid"
            CFLAGS_DEBUG="${CFLAGS_DEBUG} -g3 -ggdb -fdiagnostics-color=auto -Wall -Wextra"
            ;;
          enhanced)
            enable_debug_dbg="enhanced"
            CFLAGS_DEBUG="${CFLAGS_DEBUG} -g3 -ggdb -fdiagnostics-color=auto"
            ;;
          basic)
            enable_debug_dbg="basic"
            
            ;;
        esac   # [case: enable_debug, indent: 3, item: True]
        ;;
      *)
        abi_cc_version_dbg="default"
        abi_cpu_spec_dbg="default"
        case "${enable_debug}" in
          naughty)
            enable_debug_dbg="naughty"
            CFLAGS_DEBUG="${CFLAGS_DEBUG} -g3 -ggdb -Wall -Wextra -fbounds-check"
            ;;
          verbose)
            enable_debug_dbg="verbose"
            
            ;;
          paranoid)
            enable_debug_dbg="paranoid"
            CFLAGS_DEBUG="${CFLAGS_DEBUG} -g3 -ggdb -Wall -Wextra"
            ;;
          enhanced)
            enable_debug_dbg="enhanced"
            CFLAGS_DEBUG="${CFLAGS_DEBUG} -g3 -ggdb"
            ;;
          basic)
            enable_debug_dbg="basic"
            
            ;;
        esac   # [case: enable_debug, indent: 3, item: True]
        ;;
    esac   # [case: abi_cc_version, indent: 1, item: False]
  fi

  dnl Display settings
  AC_MSG_RESULT([${abi_cc_vendor_dbg}/${abi_cc_version_dbg}/${abi_cpu_spec_dbg}])

])
m4trace:config/m4/auto-debug.m4:77: -1- AC_DEFUN([ABI_CXX_DBGFLAGS], [
  dnl Init
  abi_cxx_vendor_dbg="none"
  abi_cxx_version_dbg="none"
  abi_cpu_spec_dbg="none"

  dnl Look for debug flags
  AC_MSG_CHECKING([which cxx debug flags to apply])

  dnl WARNING: no config files were found for language

  dnl Display settings
  AC_MSG_RESULT([${abi_cxx_vendor_dbg}/${abi_cxx_version_dbg}/${abi_cpu_spec_dbg}])

])
m4trace:config/m4/auto-debug.m4:94: -1- AC_DEFUN([ABI_FC_DBGFLAGS], [
  dnl Init
  abi_fc_vendor_dbg="none"
  abi_fc_version_dbg="none"
  abi_cpu_spec_dbg="none"

  dnl Look for debug flags
  AC_MSG_CHECKING([which fc debug flags to apply])

  dnl Case built from config/debug/fc_*.conf
  case "${abi_fc_vendor}" in
    ibm)
      abi_fc_vendor_dbg="ibm"
      abi_fc_version_dbg="default"
      abi_cpu_spec_dbg="default"
      case "${enable_debug}" in
        naughty)
          enable_debug_dbg="naughty"
          FCFLAGS_DEBUG="${FCFLAGS_DEBUG} -qnooptimize -qextcheck -qflag=i:i -qfloat=nans -qinitauto=7FBFFFFF -qflttrap=overflow:underflow:zerodivide:invalid:enable -qsigtrap -C -qcheck"
          ;;
        verbose)
          enable_debug_dbg="verbose"
          
          ;;
        paranoid)
          enable_debug_dbg="paranoid"
          FCFLAGS_DEBUG="${FCFLAGS_DEBUG} -qnooptimize -qextcheck -qflag=i:i -qfloat=nans -qinitauto=7FBFFFFF -qflttrap=overflow:underflow:zerodivide:invalid:enable -qsigtrap"
          ;;
        enhanced)
          enable_debug_dbg="enhanced"
          FCFLAGS_DEBUG="${FCFLAGS_DEBUG} -qnooptimize -qextcheck -qflag=i:i -qfloat=nans -qinitauto=7FBFFFFF"
          ;;
        basic)
          enable_debug_dbg="basic"
          
          ;;
      esac   # [case: enable_debug, indent: 2, item: True]
      ;;
    gnu)
      abi_fc_vendor_dbg="gnu"
      case "${abi_fc_version}" in
        4.9)
          abi_fc_version_dbg="4.9"
          abi_cpu_spec_dbg="default"
          case "${enable_debug}" in
            naughty)
              enable_debug_dbg="naughty"
              FCFLAGS_DEBUG="${FCFLAGS_DEBUG} -fbacktrace -finit-real=nan -Wimplicit-interface -Wtabs -Wsurprising -fdiagnostics-color=auto -Wall -Wextra -Wfunction-elimination -fbounds-check"
              ;;
            verbose)
              enable_debug_dbg="verbose"
              
              ;;
            paranoid)
              enable_debug_dbg="paranoid"
              FCFLAGS_DEBUG="${FCFLAGS_DEBUG} -fbacktrace -finit-real=nan -Wimplicit-interface -Wtabs -Wsurprising -fdiagnostics-color=auto -Wall -Wextra -Wfunction-elimination"
              ;;
            enhanced)
              enable_debug_dbg="enhanced"
              FCFLAGS_DEBUG="${FCFLAGS_DEBUG} -fbacktrace -finit-real=nan -Wimplicit-interface -Wtabs -Wsurprising -fdiagnostics-color=auto"
              ;;
            basic)
              enable_debug_dbg="basic"
              
              ;;
          esac   # [case: enable_debug, indent: 4, item: True]
          ;;
        *)
          abi_fc_version_dbg="default"
          abi_cpu_spec_dbg="default"
          case "${enable_debug}" in
            naughty)
              enable_debug_dbg="naughty"
              FCFLAGS_DEBUG="${FCFLAGS_DEBUG} -fbacktrace -finit-real=nan -Wimplicit-interface -Wtabs -Wall -Wextra -fbounds-check"
              ;;
            verbose)
              enable_debug_dbg="verbose"
              
              ;;
            paranoid)
              enable_debug_dbg="paranoid"
              FCFLAGS_DEBUG="${FCFLAGS_DEBUG} -fbacktrace -finit-real=nan -Wimplicit-interface -Wtabs -Wall -Wextra"
              ;;
            enhanced)
              enable_debug_dbg="enhanced"
              FCFLAGS_DEBUG="${FCFLAGS_DEBUG} -fbacktrace -finit-real=nan -Wimplicit-interface -Wtabs"
              ;;
            basic)
              enable_debug_dbg="basic"
              
              ;;
          esac   # [case: enable_debug, indent: 4, item: True]
          ;;
      esac   # [case: abi_fc_version, indent: 2, item: True]
      ;;
    open64)
      abi_fc_vendor_dbg="open64"
      abi_fc_version_dbg="default"
      abi_cpu_spec_dbg="default"
      case "${enable_debug}" in
        naughty)
          enable_debug_dbg="naughty"
          FCFLAGS_DEBUG="${FCFLAGS_DEBUG} -g3 -fullwarn -trapuv -Wall -Wendif-labels -Wunused -ansi -fno-permissive -Wfloat-equal -Wunreachable-code -C"
          ;;
        verbose)
          enable_debug_dbg="verbose"
          
          ;;
        paranoid)
          enable_debug_dbg="paranoid"
          FCFLAGS_DEBUG="${FCFLAGS_DEBUG} -g3 -fullwarn -trapuv -Wall -Wendif-labels -Wunused -ansi -fno-permissive -Wfloat-equal -Wunreachable-code"
          ;;
        enhanced)
          enable_debug_dbg="enhanced"
          FCFLAGS_DEBUG="${FCFLAGS_DEBUG} -g3 -fullwarn -trapuv -Wall -Wendif-labels -Wunused"
          ;;
        basic)
          enable_debug_dbg="basic"
          
          ;;
      esac   # [case: enable_debug, indent: 2, item: True]
      ;;
    g95)
      abi_fc_vendor_dbg="g95"
      abi_fc_version_dbg="default"
      abi_cpu_spec_dbg="default"
      case "${enable_debug}" in
        naughty)
          enable_debug_dbg="naughty"
          FCFLAGS_DEBUG="${FCFLAGS_DEBUG} -On -Sw -Ds"
          ;;
        verbose)
          enable_debug_dbg="verbose"
          
          ;;
        paranoid)
          enable_debug_dbg="paranoid"
          FCFLAGS_DEBUG="${FCFLAGS_DEBUG} -On -Sw"
          ;;
        enhanced)
          enable_debug_dbg="enhanced"
          FCFLAGS_DEBUG="${FCFLAGS_DEBUG} -On"
          ;;
        basic)
          enable_debug_dbg="basic"
          
          ;;
      esac   # [case: enable_debug, indent: 2, item: True]
      ;;
    fujitsu)
      abi_fc_vendor_dbg="fujitsu"
      abi_fc_version_dbg="default"
      abi_cpu_spec_dbg="default"
      case "${enable_debug}" in
        naughty)
          enable_debug_dbg="naughty"
          FCFLAGS_DEBUG="${FCFLAGS_DEBUG} -AT -Du -Si"
          ;;
        verbose)
          enable_debug_dbg="verbose"
          
          ;;
        paranoid)
          enable_debug_dbg="paranoid"
          FCFLAGS_DEBUG="${FCFLAGS_DEBUG} -AT -Du -Si"
          ;;
        enhanced)
          enable_debug_dbg="enhanced"
          FCFLAGS_DEBUG="${FCFLAGS_DEBUG} -AT -Du -Si"
          ;;
        basic)
          enable_debug_dbg="basic"
          
          ;;
      esac   # [case: enable_debug, indent: 2, item: True]
      ;;
    pathscale)
      abi_fc_vendor_dbg="pathscale"
      abi_fc_version_dbg="default"
      abi_cpu_spec_dbg="default"
      case "${enable_debug}" in
        naughty)
          enable_debug_dbg="naughty"
          FCFLAGS_DEBUG="${FCFLAGS_DEBUG} -trapuv -fullwarn -Wall -fno-permissive -Wendif-labels -ffortran-bounds-check"
          ;;
        verbose)
          enable_debug_dbg="verbose"
          
          ;;
        paranoid)
          enable_debug_dbg="paranoid"
          FCFLAGS_DEBUG="${FCFLAGS_DEBUG} -trapuv -fullwarn -Wall -fno-permissive -Wendif-labels"
          ;;
        enhanced)
          enable_debug_dbg="enhanced"
          FCFLAGS_DEBUG="${FCFLAGS_DEBUG} -trapuv -fullwarn -Wall"
          ;;
        basic)
          enable_debug_dbg="basic"
          
          ;;
      esac   # [case: enable_debug, indent: 2, item: True]
      ;;
    nag)
      abi_fc_vendor_dbg="nag"
      abi_fc_version_dbg="default"
      abi_cpu_spec_dbg="default"
      case "${enable_debug}" in
        naughty)
          enable_debug_dbg="naughty"
          FCFLAGS_DEBUG="${FCFLAGS_DEBUG} -gline -mtrace=verbose -nan -info -C"
          FC_LDFLAGS_DEBUG="${FC_LDFLAGS_DEBUG} -mtrace=verbose"
          ;;
        verbose)
          enable_debug_dbg="verbose"
          
          ;;
        paranoid)
          enable_debug_dbg="paranoid"
          FCFLAGS_DEBUG="${FCFLAGS_DEBUG} -gline -mtrace=verbose -nan -info"
          FC_LDFLAGS_DEBUG="${FC_LDFLAGS_DEBUG} -mtrace=verbose"
          ;;
        enhanced)
          enable_debug_dbg="enhanced"
          FCFLAGS_DEBUG="${FCFLAGS_DEBUG} -gline -mtrace=verbose -nan"
          FC_LDFLAGS_DEBUG="${FC_LDFLAGS_DEBUG} -mtrace=verbose"
          ;;
        basic)
          enable_debug_dbg="basic"
          
          ;;
      esac   # [case: enable_debug, indent: 2, item: True]
      ;;
    intel)
      abi_fc_vendor_dbg="intel"
      abi_fc_version_dbg="default"
      abi_cpu_spec_dbg="default"
      case "${enable_debug}" in
        naughty)
          enable_debug_dbg="naughty"
          FCFLAGS_DEBUG="${FCFLAGS_DEBUG} -debug all -check uninit -ftrapuv -traceback -warn all -fp-stack-check -check bounds -WB"
          ;;
        verbose)
          enable_debug_dbg="verbose"
          
          ;;
        paranoid)
          enable_debug_dbg="paranoid"
          FCFLAGS_DEBUG="${FCFLAGS_DEBUG} -debug all -check uninit -ftrapuv -traceback -warn all -fp-stack-check"
          ;;
        enhanced)
          enable_debug_dbg="enhanced"
          FCFLAGS_DEBUG="${FCFLAGS_DEBUG} -debug all -check uninit -ftrapuv -traceback"
          ;;
        basic)
          enable_debug_dbg="basic"
          
          ;;
      esac   # [case: enable_debug, indent: 2, item: True]
      ;;
  esac   # [case: abi_fc_vendor, indent: 0, item: True]

  dnl Display settings
  AC_MSG_RESULT([${abi_fc_vendor_dbg}/${abi_fc_version_dbg}/${abi_cpu_spec_dbg}])

])
m4trace:config/m4/auto-dirflags.m4:32: -1- AC_DEFUN([ABI_OPTFLAGS_DIRS], [
  dnl Check arguments
  m4_if([$1], , [AC_FATAL([$0: missing argument 1])])dnl

  AC_MSG_CHECKING([whether to apply per-directory optimizations])
  if test "${enable_optim}" = "no" -o "${FCFLAGS}" != ""; then
    AC_MSG_RESULT([no])
  else
    AC_MSG_RESULT([yes])
  fi

  dnl Set default
  fcflags_opt_default="$1"
  echo "fcflags_opt_default='${fcflags_opt_default}'" >config.optim
  fcflags_opt_dirlist=""

  dnl atompaw library
  if test "${FCFLAGS}" = ""; then
    if test "${fcflags_opt_atompaw}" = "" -o "${enable_optim}" = "no"; then
      fcflags_opt_atompaw="${fcflags_opt_default}"
    else
      AC_MSG_NOTICE([optimization for atompaw is ${fcflags_opt_atompaw}])
      echo "fcflags_opt_atompaw='${fcflags_opt_atompaw}'" >>config.optim
      fcflags_opt_dirlist="${fcflags_opt_dirlist} atompaw"
    fi
  else
    if test "${fcflags_opt_atompaw}" != ""; then
      fcflags_opt_atompaw=""
      AC_MSG_NOTICE([fcflags_opt_atompaw overriden by FCFLAGS])
    fi
  fi
  AC_SUBST(fcflags_opt_atompaw)

  dnl algo library
  if test "${FCFLAGS}" = ""; then
    if test "${fcflags_opt_algo}" = "" -o "${enable_optim}" = "no"; then
      fcflags_opt_algo="${fcflags_opt_default}"
    else
      AC_MSG_NOTICE([optimization for algo is ${fcflags_opt_algo}])
      echo "fcflags_opt_algo='${fcflags_opt_algo}'" >>config.optim
      fcflags_opt_dirlist="${fcflags_opt_dirlist} algo"
    fi
  else
    if test "${fcflags_opt_algo}" != ""; then
      fcflags_opt_algo=""
      AC_MSG_NOTICE([fcflags_opt_algo overriden by FCFLAGS])
    fi
  fi
  AC_SUBST(fcflags_opt_algo)

  dnl bigdft library
  if test "${FCFLAGS}" = ""; then
    if test "${fcflags_opt_bigdft}" = "" -o "${enable_optim}" = "no"; then
      fcflags_opt_bigdft="${fcflags_opt_default}"
    else
      AC_MSG_NOTICE([optimization for bigdft is ${fcflags_opt_bigdft}])
      echo "fcflags_opt_bigdft='${fcflags_opt_bigdft}'" >>config.optim
      fcflags_opt_dirlist="${fcflags_opt_dirlist} bigdft"
    fi
  else
    if test "${fcflags_opt_bigdft}" != ""; then
      fcflags_opt_bigdft=""
      AC_MSG_NOTICE([fcflags_opt_bigdft overriden by FCFLAGS])
    fi
  fi
  AC_SUBST(fcflags_opt_bigdft)

  dnl libxc library
  if test "${FCFLAGS}" = ""; then
    if test "${fcflags_opt_libxc}" = "" -o "${enable_optim}" = "no"; then
      fcflags_opt_libxc="${fcflags_opt_default}"
    else
      AC_MSG_NOTICE([optimization for libxc is ${fcflags_opt_libxc}])
      echo "fcflags_opt_libxc='${fcflags_opt_libxc}'" >>config.optim
      fcflags_opt_dirlist="${fcflags_opt_dirlist} libxc"
    fi
  else
    if test "${fcflags_opt_libxc}" != ""; then
      fcflags_opt_libxc=""
      AC_MSG_NOTICE([fcflags_opt_libxc overriden by FCFLAGS])
    fi
  fi
  AC_SUBST(fcflags_opt_libxc)

  dnl linalg library
  if test "${FCFLAGS}" = ""; then
    if test "${fcflags_opt_linalg}" = "" -o "${enable_optim}" = "no"; then
      fcflags_opt_linalg="${fcflags_opt_default}"
    else
      AC_MSG_NOTICE([optimization for linalg is ${fcflags_opt_linalg}])
      echo "fcflags_opt_linalg='${fcflags_opt_linalg}'" >>config.optim
      fcflags_opt_dirlist="${fcflags_opt_dirlist} linalg"
    fi
  else
    if test "${fcflags_opt_linalg}" != ""; then
      fcflags_opt_linalg=""
      AC_MSG_NOTICE([fcflags_opt_linalg overriden by FCFLAGS])
    fi
  fi
  AC_SUBST(fcflags_opt_linalg)

  dnl netcdf library
  if test "${FCFLAGS}" = ""; then
    if test "${fcflags_opt_netcdf}" = "" -o "${enable_optim}" = "no"; then
      fcflags_opt_netcdf="${fcflags_opt_default}"
    else
      AC_MSG_NOTICE([optimization for netcdf is ${fcflags_opt_netcdf}])
      echo "fcflags_opt_netcdf='${fcflags_opt_netcdf}'" >>config.optim
      fcflags_opt_dirlist="${fcflags_opt_dirlist} netcdf"
    fi
  else
    if test "${fcflags_opt_netcdf}" != ""; then
      fcflags_opt_netcdf=""
      AC_MSG_NOTICE([fcflags_opt_netcdf overriden by FCFLAGS])
    fi
  fi
  AC_SUBST(fcflags_opt_netcdf)

  dnl psml library
  if test "${FCFLAGS}" = ""; then
    if test "${fcflags_opt_psml}" = "" -o "${enable_optim}" = "no"; then
      fcflags_opt_psml="${fcflags_opt_default}"
    else
      AC_MSG_NOTICE([optimization for psml is ${fcflags_opt_psml}])
      echo "fcflags_opt_psml='${fcflags_opt_psml}'" >>config.optim
      fcflags_opt_dirlist="${fcflags_opt_dirlist} psml"
    fi
  else
    if test "${fcflags_opt_psml}" != ""; then
      fcflags_opt_psml=""
      AC_MSG_NOTICE([fcflags_opt_psml overriden by FCFLAGS])
    fi
  fi
  AC_SUBST(fcflags_opt_psml)

  dnl triqs library
  if test "${FCFLAGS}" = ""; then
    if test "${fcflags_opt_triqs}" = "" -o "${enable_optim}" = "no"; then
      fcflags_opt_triqs="${fcflags_opt_default}"
    else
      AC_MSG_NOTICE([optimization for triqs is ${fcflags_opt_triqs}])
      echo "fcflags_opt_triqs='${fcflags_opt_triqs}'" >>config.optim
      fcflags_opt_dirlist="${fcflags_opt_dirlist} triqs"
    fi
  else
    if test "${fcflags_opt_triqs}" != ""; then
      fcflags_opt_triqs=""
      AC_MSG_NOTICE([fcflags_opt_triqs overriden by FCFLAGS])
    fi
  fi
  AC_SUBST(fcflags_opt_triqs)

  dnl wannier90 library
  if test "${FCFLAGS}" = ""; then
    if test "${fcflags_opt_wannier90}" = "" -o "${enable_optim}" = "no"; then
      fcflags_opt_wannier90="${fcflags_opt_default}"
    else
      AC_MSG_NOTICE([optimization for wannier90 is ${fcflags_opt_wannier90}])
      echo "fcflags_opt_wannier90='${fcflags_opt_wannier90}'" >>config.optim
      fcflags_opt_dirlist="${fcflags_opt_dirlist} wannier90"
    fi
  else
    if test "${fcflags_opt_wannier90}" != ""; then
      fcflags_opt_wannier90=""
      AC_MSG_NOTICE([fcflags_opt_wannier90 overriden by FCFLAGS])
    fi
  fi
  AC_SUBST(fcflags_opt_wannier90)

  dnl yaml library
  if test "${FCFLAGS}" = ""; then
    if test "${fcflags_opt_yaml}" = "" -o "${enable_optim}" = "no"; then
      fcflags_opt_yaml="${fcflags_opt_default}"
    else
      AC_MSG_NOTICE([optimization for yaml is ${fcflags_opt_yaml}])
      echo "fcflags_opt_yaml='${fcflags_opt_yaml}'" >>config.optim
      fcflags_opt_dirlist="${fcflags_opt_dirlist} yaml"
    fi
  else
    if test "${fcflags_opt_yaml}" != ""; then
      fcflags_opt_yaml=""
      AC_MSG_NOTICE([fcflags_opt_yaml overriden by FCFLAGS])
    fi
  fi
  AC_SUBST(fcflags_opt_yaml)

  dnl 01_gsl_ext library
  if test "${FCFLAGS}" = ""; then
    if test "${fcflags_opt_01_gsl_ext}" = "" -o "${enable_optim}" = "no"; then
      fcflags_opt_01_gsl_ext="${fcflags_opt_default}"
    else
      AC_MSG_NOTICE([optimization for 01_gsl_ext is ${fcflags_opt_01_gsl_ext}])
      echo "fcflags_opt_01_gsl_ext='${fcflags_opt_01_gsl_ext}'" >>config.optim
      fcflags_opt_dirlist="${fcflags_opt_dirlist} 01_gsl_ext"
    fi
  else
    if test "${fcflags_opt_01_gsl_ext}" != ""; then
      fcflags_opt_01_gsl_ext=""
      AC_MSG_NOTICE([fcflags_opt_01_gsl_ext overriden by FCFLAGS])
    fi
  fi
  AC_SUBST(fcflags_opt_01_gsl_ext)

  dnl 02_clib library
  if test "${FCFLAGS}" = ""; then
    if test "${fcflags_opt_02_clib}" = "" -o "${enable_optim}" = "no"; then
      fcflags_opt_02_clib="${fcflags_opt_default}"
    else
      AC_MSG_NOTICE([optimization for 02_clib is ${fcflags_opt_02_clib}])
      echo "fcflags_opt_02_clib='${fcflags_opt_02_clib}'" >>config.optim
      fcflags_opt_dirlist="${fcflags_opt_dirlist} 02_clib"
    fi
  else
    if test "${fcflags_opt_02_clib}" != ""; then
      fcflags_opt_02_clib=""
      AC_MSG_NOTICE([fcflags_opt_02_clib overriden by FCFLAGS])
    fi
  fi
  AC_SUBST(fcflags_opt_02_clib)

  dnl 10_defs library
  if test "${FCFLAGS}" = ""; then
    if test "${fcflags_opt_10_defs}" = "" -o "${enable_optim}" = "no"; then
      fcflags_opt_10_defs="${fcflags_opt_default}"
    else
      AC_MSG_NOTICE([optimization for 10_defs is ${fcflags_opt_10_defs}])
      echo "fcflags_opt_10_defs='${fcflags_opt_10_defs}'" >>config.optim
      fcflags_opt_dirlist="${fcflags_opt_dirlist} 10_defs"
    fi
  else
    if test "${fcflags_opt_10_defs}" != ""; then
      fcflags_opt_10_defs=""
      AC_MSG_NOTICE([fcflags_opt_10_defs overriden by FCFLAGS])
    fi
  fi
  AC_SUBST(fcflags_opt_10_defs)

  dnl 10_dumpinfo library
  if test "${FCFLAGS}" = ""; then
    if test "${fcflags_opt_10_dumpinfo}" = "" -o "${enable_optim}" = "no"; then
      fcflags_opt_10_dumpinfo="${fcflags_opt_default}"
    else
      AC_MSG_NOTICE([optimization for 10_dumpinfo is ${fcflags_opt_10_dumpinfo}])
      echo "fcflags_opt_10_dumpinfo='${fcflags_opt_10_dumpinfo}'" >>config.optim
      fcflags_opt_dirlist="${fcflags_opt_dirlist} 10_dumpinfo"
    fi
  else
    if test "${fcflags_opt_10_dumpinfo}" != ""; then
      fcflags_opt_10_dumpinfo=""
      AC_MSG_NOTICE([fcflags_opt_10_dumpinfo overriden by FCFLAGS])
    fi
  fi
  AC_SUBST(fcflags_opt_10_dumpinfo)

  dnl 11_memory_mpi library
  if test "${FCFLAGS}" = ""; then
    if test "${fcflags_opt_11_memory_mpi}" = "" -o "${enable_optim}" = "no"; then
      fcflags_opt_11_memory_mpi="${fcflags_opt_default}"
    else
      AC_MSG_NOTICE([optimization for 11_memory_mpi is ${fcflags_opt_11_memory_mpi}])
      echo "fcflags_opt_11_memory_mpi='${fcflags_opt_11_memory_mpi}'" >>config.optim
      fcflags_opt_dirlist="${fcflags_opt_dirlist} 11_memory_mpi"
    fi
  else
    if test "${fcflags_opt_11_memory_mpi}" != ""; then
      fcflags_opt_11_memory_mpi=""
      AC_MSG_NOTICE([fcflags_opt_11_memory_mpi overriden by FCFLAGS])
    fi
  fi
  AC_SUBST(fcflags_opt_11_memory_mpi)

  dnl 12_hide_mpi library
  if test "${FCFLAGS}" = ""; then
    if test "${fcflags_opt_12_hide_mpi}" = "" -o "${enable_optim}" = "no"; then
      fcflags_opt_12_hide_mpi="${fcflags_opt_default}"
    else
      AC_MSG_NOTICE([optimization for 12_hide_mpi is ${fcflags_opt_12_hide_mpi}])
      echo "fcflags_opt_12_hide_mpi='${fcflags_opt_12_hide_mpi}'" >>config.optim
      fcflags_opt_dirlist="${fcflags_opt_dirlist} 12_hide_mpi"
    fi
  else
    if test "${fcflags_opt_12_hide_mpi}" != ""; then
      fcflags_opt_12_hide_mpi=""
      AC_MSG_NOTICE([fcflags_opt_12_hide_mpi overriden by FCFLAGS])
    fi
  fi
  AC_SUBST(fcflags_opt_12_hide_mpi)

  dnl 14_hidewrite library
  if test "${FCFLAGS}" = ""; then
    if test "${fcflags_opt_14_hidewrite}" = "" -o "${enable_optim}" = "no"; then
      fcflags_opt_14_hidewrite="${fcflags_opt_default}"
    else
      AC_MSG_NOTICE([optimization for 14_hidewrite is ${fcflags_opt_14_hidewrite}])
      echo "fcflags_opt_14_hidewrite='${fcflags_opt_14_hidewrite}'" >>config.optim
      fcflags_opt_dirlist="${fcflags_opt_dirlist} 14_hidewrite"
    fi
  else
    if test "${fcflags_opt_14_hidewrite}" != ""; then
      fcflags_opt_14_hidewrite=""
      AC_MSG_NOTICE([fcflags_opt_14_hidewrite overriden by FCFLAGS])
    fi
  fi
  AC_SUBST(fcflags_opt_14_hidewrite)

  dnl 15_gpu_toolbox library
  if test "${FCFLAGS}" = ""; then
    if test "${fcflags_opt_15_gpu_toolbox}" = "" -o "${enable_optim}" = "no"; then
      fcflags_opt_15_gpu_toolbox="${fcflags_opt_default}"
    else
      AC_MSG_NOTICE([optimization for 15_gpu_toolbox is ${fcflags_opt_15_gpu_toolbox}])
      echo "fcflags_opt_15_gpu_toolbox='${fcflags_opt_15_gpu_toolbox}'" >>config.optim
      fcflags_opt_dirlist="${fcflags_opt_dirlist} 15_gpu_toolbox"
    fi
  else
    if test "${fcflags_opt_15_gpu_toolbox}" != ""; then
      fcflags_opt_15_gpu_toolbox=""
      AC_MSG_NOTICE([fcflags_opt_15_gpu_toolbox overriden by FCFLAGS])
    fi
  fi
  AC_SUBST(fcflags_opt_15_gpu_toolbox)

  dnl 16_hideleave library
  if test "${FCFLAGS}" = ""; then
    if test "${fcflags_opt_16_hideleave}" = "" -o "${enable_optim}" = "no"; then
      fcflags_opt_16_hideleave="${fcflags_opt_default}"
    else
      AC_MSG_NOTICE([optimization for 16_hideleave is ${fcflags_opt_16_hideleave}])
      echo "fcflags_opt_16_hideleave='${fcflags_opt_16_hideleave}'" >>config.optim
      fcflags_opt_dirlist="${fcflags_opt_dirlist} 16_hideleave"
    fi
  else
    if test "${fcflags_opt_16_hideleave}" != ""; then
      fcflags_opt_16_hideleave=""
      AC_MSG_NOTICE([fcflags_opt_16_hideleave overriden by FCFLAGS])
    fi
  fi
  AC_SUBST(fcflags_opt_16_hideleave)

  dnl 17_libtetra_ext library
  if test "${FCFLAGS}" = ""; then
    if test "${fcflags_opt_17_libtetra_ext}" = "" -o "${enable_optim}" = "no"; then
      fcflags_opt_17_libtetra_ext="${fcflags_opt_default}"
    else
      AC_MSG_NOTICE([optimization for 17_libtetra_ext is ${fcflags_opt_17_libtetra_ext}])
      echo "fcflags_opt_17_libtetra_ext='${fcflags_opt_17_libtetra_ext}'" >>config.optim
      fcflags_opt_dirlist="${fcflags_opt_dirlist} 17_libtetra_ext"
    fi
  else
    if test "${fcflags_opt_17_libtetra_ext}" != ""; then
      fcflags_opt_17_libtetra_ext=""
      AC_MSG_NOTICE([fcflags_opt_17_libtetra_ext overriden by FCFLAGS])
    fi
  fi
  AC_SUBST(fcflags_opt_17_libtetra_ext)

  dnl 18_timing library
  if test "${FCFLAGS}" = ""; then
    if test "${fcflags_opt_18_timing}" = "" -o "${enable_optim}" = "no"; then
      fcflags_opt_18_timing="${fcflags_opt_default}"
    else
      AC_MSG_NOTICE([optimization for 18_timing is ${fcflags_opt_18_timing}])
      echo "fcflags_opt_18_timing='${fcflags_opt_18_timing}'" >>config.optim
      fcflags_opt_dirlist="${fcflags_opt_dirlist} 18_timing"
    fi
  else
    if test "${fcflags_opt_18_timing}" != ""; then
      fcflags_opt_18_timing=""
      AC_MSG_NOTICE([fcflags_opt_18_timing overriden by FCFLAGS])
    fi
  fi
  AC_SUBST(fcflags_opt_18_timing)

  dnl 21_hashfuncs library
  if test "${FCFLAGS}" = ""; then
    if test "${fcflags_opt_21_hashfuncs}" = "" -o "${enable_optim}" = "no"; then
      fcflags_opt_21_hashfuncs="${fcflags_opt_default}"
    else
      AC_MSG_NOTICE([optimization for 21_hashfuncs is ${fcflags_opt_21_hashfuncs}])
      echo "fcflags_opt_21_hashfuncs='${fcflags_opt_21_hashfuncs}'" >>config.optim
      fcflags_opt_dirlist="${fcflags_opt_dirlist} 21_hashfuncs"
    fi
  else
    if test "${fcflags_opt_21_hashfuncs}" != ""; then
      fcflags_opt_21_hashfuncs=""
      AC_MSG_NOTICE([fcflags_opt_21_hashfuncs overriden by FCFLAGS])
    fi
  fi
  AC_SUBST(fcflags_opt_21_hashfuncs)

  dnl 27_toolbox_oop library
  if test "${FCFLAGS}" = ""; then
    if test "${fcflags_opt_27_toolbox_oop}" = "" -o "${enable_optim}" = "no"; then
      fcflags_opt_27_toolbox_oop="${fcflags_opt_default}"
    else
      AC_MSG_NOTICE([optimization for 27_toolbox_oop is ${fcflags_opt_27_toolbox_oop}])
      echo "fcflags_opt_27_toolbox_oop='${fcflags_opt_27_toolbox_oop}'" >>config.optim
      fcflags_opt_dirlist="${fcflags_opt_dirlist} 27_toolbox_oop"
    fi
  else
    if test "${fcflags_opt_27_toolbox_oop}" != ""; then
      fcflags_opt_27_toolbox_oop=""
      AC_MSG_NOTICE([fcflags_opt_27_toolbox_oop overriden by FCFLAGS])
    fi
  fi
  AC_SUBST(fcflags_opt_27_toolbox_oop)

  dnl 28_numeric_noabirule library
  if test "${FCFLAGS}" = ""; then
    if test "${fcflags_opt_28_numeric_noabirule}" = "" -o "${enable_optim}" = "no"; then
      fcflags_opt_28_numeric_noabirule="${fcflags_opt_default}"
    else
      AC_MSG_NOTICE([optimization for 28_numeric_noabirule is ${fcflags_opt_28_numeric_noabirule}])
      echo "fcflags_opt_28_numeric_noabirule='${fcflags_opt_28_numeric_noabirule}'" >>config.optim
      fcflags_opt_dirlist="${fcflags_opt_dirlist} 28_numeric_noabirule"
    fi
  else
    if test "${fcflags_opt_28_numeric_noabirule}" != ""; then
      fcflags_opt_28_numeric_noabirule=""
      AC_MSG_NOTICE([fcflags_opt_28_numeric_noabirule overriden by FCFLAGS])
    fi
  fi
  AC_SUBST(fcflags_opt_28_numeric_noabirule)

  dnl 29_kpoints library
  if test "${FCFLAGS}" = ""; then
    if test "${fcflags_opt_29_kpoints}" = "" -o "${enable_optim}" = "no"; then
      fcflags_opt_29_kpoints="${fcflags_opt_default}"
    else
      AC_MSG_NOTICE([optimization for 29_kpoints is ${fcflags_opt_29_kpoints}])
      echo "fcflags_opt_29_kpoints='${fcflags_opt_29_kpoints}'" >>config.optim
      fcflags_opt_dirlist="${fcflags_opt_dirlist} 29_kpoints"
    fi
  else
    if test "${fcflags_opt_29_kpoints}" != ""; then
      fcflags_opt_29_kpoints=""
      AC_MSG_NOTICE([fcflags_opt_29_kpoints overriden by FCFLAGS])
    fi
  fi
  AC_SUBST(fcflags_opt_29_kpoints)

  dnl 32_util library
  if test "${FCFLAGS}" = ""; then
    if test "${fcflags_opt_32_util}" = "" -o "${enable_optim}" = "no"; then
      fcflags_opt_32_util="${fcflags_opt_default}"
    else
      AC_MSG_NOTICE([optimization for 32_util is ${fcflags_opt_32_util}])
      echo "fcflags_opt_32_util='${fcflags_opt_32_util}'" >>config.optim
      fcflags_opt_dirlist="${fcflags_opt_dirlist} 32_util"
    fi
  else
    if test "${fcflags_opt_32_util}" != ""; then
      fcflags_opt_32_util=""
      AC_MSG_NOTICE([fcflags_opt_32_util overriden by FCFLAGS])
    fi
  fi
  AC_SUBST(fcflags_opt_32_util)

  dnl 41_geometry library
  if test "${FCFLAGS}" = ""; then
    if test "${fcflags_opt_41_geometry}" = "" -o "${enable_optim}" = "no"; then
      fcflags_opt_41_geometry="${fcflags_opt_default}"
    else
      AC_MSG_NOTICE([optimization for 41_geometry is ${fcflags_opt_41_geometry}])
      echo "fcflags_opt_41_geometry='${fcflags_opt_41_geometry}'" >>config.optim
      fcflags_opt_dirlist="${fcflags_opt_dirlist} 41_geometry"
    fi
  else
    if test "${fcflags_opt_41_geometry}" != ""; then
      fcflags_opt_41_geometry=""
      AC_MSG_NOTICE([fcflags_opt_41_geometry overriden by FCFLAGS])
    fi
  fi
  AC_SUBST(fcflags_opt_41_geometry)

  dnl 41_xc_lowlevel library
  if test "${FCFLAGS}" = ""; then
    if test "${fcflags_opt_41_xc_lowlevel}" = "" -o "${enable_optim}" = "no"; then
      fcflags_opt_41_xc_lowlevel="${fcflags_opt_default}"
    else
      AC_MSG_NOTICE([optimization for 41_xc_lowlevel is ${fcflags_opt_41_xc_lowlevel}])
      echo "fcflags_opt_41_xc_lowlevel='${fcflags_opt_41_xc_lowlevel}'" >>config.optim
      fcflags_opt_dirlist="${fcflags_opt_dirlist} 41_xc_lowlevel"
    fi
  else
    if test "${fcflags_opt_41_xc_lowlevel}" != ""; then
      fcflags_opt_41_xc_lowlevel=""
      AC_MSG_NOTICE([fcflags_opt_41_xc_lowlevel overriden by FCFLAGS])
    fi
  fi
  AC_SUBST(fcflags_opt_41_xc_lowlevel)

  dnl 42_libpaw library
  if test "${FCFLAGS}" = ""; then
    if test "${fcflags_opt_42_libpaw}" = "" -o "${enable_optim}" = "no"; then
      fcflags_opt_42_libpaw="${fcflags_opt_default}"
    else
      AC_MSG_NOTICE([optimization for 42_libpaw is ${fcflags_opt_42_libpaw}])
      echo "fcflags_opt_42_libpaw='${fcflags_opt_42_libpaw}'" >>config.optim
      fcflags_opt_dirlist="${fcflags_opt_dirlist} 42_libpaw"
    fi
  else
    if test "${fcflags_opt_42_libpaw}" != ""; then
      fcflags_opt_42_libpaw=""
      AC_MSG_NOTICE([fcflags_opt_42_libpaw overriden by FCFLAGS])
    fi
  fi
  AC_SUBST(fcflags_opt_42_libpaw)

  dnl 42_nlstrain library
  if test "${FCFLAGS}" = ""; then
    if test "${fcflags_opt_42_nlstrain}" = "" -o "${enable_optim}" = "no"; then
      fcflags_opt_42_nlstrain="${fcflags_opt_default}"
    else
      AC_MSG_NOTICE([optimization for 42_nlstrain is ${fcflags_opt_42_nlstrain}])
      echo "fcflags_opt_42_nlstrain='${fcflags_opt_42_nlstrain}'" >>config.optim
      fcflags_opt_dirlist="${fcflags_opt_dirlist} 42_nlstrain"
    fi
  else
    if test "${fcflags_opt_42_nlstrain}" != ""; then
      fcflags_opt_42_nlstrain=""
      AC_MSG_NOTICE([fcflags_opt_42_nlstrain overriden by FCFLAGS])
    fi
  fi
  AC_SUBST(fcflags_opt_42_nlstrain)

  dnl 42_parser library
  if test "${FCFLAGS}" = ""; then
    if test "${fcflags_opt_42_parser}" = "" -o "${enable_optim}" = "no"; then
      fcflags_opt_42_parser="${fcflags_opt_default}"
    else
      AC_MSG_NOTICE([optimization for 42_parser is ${fcflags_opt_42_parser}])
      echo "fcflags_opt_42_parser='${fcflags_opt_42_parser}'" >>config.optim
      fcflags_opt_dirlist="${fcflags_opt_dirlist} 42_parser"
    fi
  else
    if test "${fcflags_opt_42_parser}" != ""; then
      fcflags_opt_42_parser=""
      AC_MSG_NOTICE([fcflags_opt_42_parser overriden by FCFLAGS])
    fi
  fi
  AC_SUBST(fcflags_opt_42_parser)

  dnl 43_ptgroups library
  if test "${FCFLAGS}" = ""; then
    if test "${fcflags_opt_43_ptgroups}" = "" -o "${enable_optim}" = "no"; then
      fcflags_opt_43_ptgroups="${fcflags_opt_default}"
    else
      AC_MSG_NOTICE([optimization for 43_ptgroups is ${fcflags_opt_43_ptgroups}])
      echo "fcflags_opt_43_ptgroups='${fcflags_opt_43_ptgroups}'" >>config.optim
      fcflags_opt_dirlist="${fcflags_opt_dirlist} 43_ptgroups"
    fi
  else
    if test "${fcflags_opt_43_ptgroups}" != ""; then
      fcflags_opt_43_ptgroups=""
      AC_MSG_NOTICE([fcflags_opt_43_ptgroups overriden by FCFLAGS])
    fi
  fi
  AC_SUBST(fcflags_opt_43_ptgroups)

  dnl 43_wvl_wrappers library
  if test "${FCFLAGS}" = ""; then
    if test "${fcflags_opt_43_wvl_wrappers}" = "" -o "${enable_optim}" = "no"; then
      fcflags_opt_43_wvl_wrappers="${fcflags_opt_default}"
    else
      AC_MSG_NOTICE([optimization for 43_wvl_wrappers is ${fcflags_opt_43_wvl_wrappers}])
      echo "fcflags_opt_43_wvl_wrappers='${fcflags_opt_43_wvl_wrappers}'" >>config.optim
      fcflags_opt_dirlist="${fcflags_opt_dirlist} 43_wvl_wrappers"
    fi
  else
    if test "${fcflags_opt_43_wvl_wrappers}" != ""; then
      fcflags_opt_43_wvl_wrappers=""
      AC_MSG_NOTICE([fcflags_opt_43_wvl_wrappers overriden by FCFLAGS])
    fi
  fi
  AC_SUBST(fcflags_opt_43_wvl_wrappers)

  dnl 44_abitools library
  if test "${FCFLAGS}" = ""; then
    if test "${fcflags_opt_44_abitools}" = "" -o "${enable_optim}" = "no"; then
      fcflags_opt_44_abitools="${fcflags_opt_default}"
    else
      AC_MSG_NOTICE([optimization for 44_abitools is ${fcflags_opt_44_abitools}])
      echo "fcflags_opt_44_abitools='${fcflags_opt_44_abitools}'" >>config.optim
      fcflags_opt_dirlist="${fcflags_opt_dirlist} 44_abitools"
    fi
  else
    if test "${fcflags_opt_44_abitools}" != ""; then
      fcflags_opt_44_abitools=""
      AC_MSG_NOTICE([fcflags_opt_44_abitools overriden by FCFLAGS])
    fi
  fi
  AC_SUBST(fcflags_opt_44_abitools)

  dnl 44_abitypes_defs library
  if test "${FCFLAGS}" = ""; then
    if test "${fcflags_opt_44_abitypes_defs}" = "" -o "${enable_optim}" = "no"; then
      fcflags_opt_44_abitypes_defs="${fcflags_opt_default}"
    else
      AC_MSG_NOTICE([optimization for 44_abitypes_defs is ${fcflags_opt_44_abitypes_defs}])
      echo "fcflags_opt_44_abitypes_defs='${fcflags_opt_44_abitypes_defs}'" >>config.optim
      fcflags_opt_dirlist="${fcflags_opt_dirlist} 44_abitypes_defs"
    fi
  else
    if test "${fcflags_opt_44_abitypes_defs}" != ""; then
      fcflags_opt_44_abitypes_defs=""
      AC_MSG_NOTICE([fcflags_opt_44_abitypes_defs overriden by FCFLAGS])
    fi
  fi
  AC_SUBST(fcflags_opt_44_abitypes_defs)

  dnl 45_geomoptim library
  if test "${FCFLAGS}" = ""; then
    if test "${fcflags_opt_45_geomoptim}" = "" -o "${enable_optim}" = "no"; then
      fcflags_opt_45_geomoptim="${fcflags_opt_default}"
    else
      AC_MSG_NOTICE([optimization for 45_geomoptim is ${fcflags_opt_45_geomoptim}])
      echo "fcflags_opt_45_geomoptim='${fcflags_opt_45_geomoptim}'" >>config.optim
      fcflags_opt_dirlist="${fcflags_opt_dirlist} 45_geomoptim"
    fi
  else
    if test "${fcflags_opt_45_geomoptim}" != ""; then
      fcflags_opt_45_geomoptim=""
      AC_MSG_NOTICE([fcflags_opt_45_geomoptim overriden by FCFLAGS])
    fi
  fi
  AC_SUBST(fcflags_opt_45_geomoptim)

  dnl 45_xgTools library
  if test "${FCFLAGS}" = ""; then
    if test "${fcflags_opt_45_xgTools}" = "" -o "${enable_optim}" = "no"; then
      fcflags_opt_45_xgTools="${fcflags_opt_default}"
    else
      AC_MSG_NOTICE([optimization for 45_xgTools is ${fcflags_opt_45_xgTools}])
      echo "fcflags_opt_45_xgTools='${fcflags_opt_45_xgTools}'" >>config.optim
      fcflags_opt_dirlist="${fcflags_opt_dirlist} 45_xgTools"
    fi
  else
    if test "${fcflags_opt_45_xgTools}" != ""; then
      fcflags_opt_45_xgTools=""
      AC_MSG_NOTICE([fcflags_opt_45_xgTools overriden by FCFLAGS])
    fi
  fi
  AC_SUBST(fcflags_opt_45_xgTools)

  dnl 46_diago library
  if test "${FCFLAGS}" = ""; then
    if test "${fcflags_opt_46_diago}" = "" -o "${enable_optim}" = "no"; then
      fcflags_opt_46_diago="${fcflags_opt_default}"
    else
      AC_MSG_NOTICE([optimization for 46_diago is ${fcflags_opt_46_diago}])
      echo "fcflags_opt_46_diago='${fcflags_opt_46_diago}'" >>config.optim
      fcflags_opt_dirlist="${fcflags_opt_dirlist} 46_diago"
    fi
  else
    if test "${fcflags_opt_46_diago}" != ""; then
      fcflags_opt_46_diago=""
      AC_MSG_NOTICE([fcflags_opt_46_diago overriden by FCFLAGS])
    fi
  fi
  AC_SUBST(fcflags_opt_46_diago)

  dnl 49_gw_toolbox_oop library
  if test "${FCFLAGS}" = ""; then
    if test "${fcflags_opt_49_gw_toolbox_oop}" = "" -o "${enable_optim}" = "no"; then
      fcflags_opt_49_gw_toolbox_oop="${fcflags_opt_default}"
    else
      AC_MSG_NOTICE([optimization for 49_gw_toolbox_oop is ${fcflags_opt_49_gw_toolbox_oop}])
      echo "fcflags_opt_49_gw_toolbox_oop='${fcflags_opt_49_gw_toolbox_oop}'" >>config.optim
      fcflags_opt_dirlist="${fcflags_opt_dirlist} 49_gw_toolbox_oop"
    fi
  else
    if test "${fcflags_opt_49_gw_toolbox_oop}" != ""; then
      fcflags_opt_49_gw_toolbox_oop=""
      AC_MSG_NOTICE([fcflags_opt_49_gw_toolbox_oop overriden by FCFLAGS])
    fi
  fi
  AC_SUBST(fcflags_opt_49_gw_toolbox_oop)

  dnl 51_manage_mpi library
  if test "${FCFLAGS}" = ""; then
    if test "${fcflags_opt_51_manage_mpi}" = "" -o "${enable_optim}" = "no"; then
      fcflags_opt_51_manage_mpi="${fcflags_opt_default}"
    else
      AC_MSG_NOTICE([optimization for 51_manage_mpi is ${fcflags_opt_51_manage_mpi}])
      echo "fcflags_opt_51_manage_mpi='${fcflags_opt_51_manage_mpi}'" >>config.optim
      fcflags_opt_dirlist="${fcflags_opt_dirlist} 51_manage_mpi"
    fi
  else
    if test "${fcflags_opt_51_manage_mpi}" != ""; then
      fcflags_opt_51_manage_mpi=""
      AC_MSG_NOTICE([fcflags_opt_51_manage_mpi overriden by FCFLAGS])
    fi
  fi
  AC_SUBST(fcflags_opt_51_manage_mpi)

  dnl 52_fft_mpi_noabirule library
  if test "${FCFLAGS}" = ""; then
    if test "${fcflags_opt_52_fft_mpi_noabirule}" = "" -o "${enable_optim}" = "no"; then
      fcflags_opt_52_fft_mpi_noabirule="${fcflags_opt_default}"
    else
      AC_MSG_NOTICE([optimization for 52_fft_mpi_noabirule is ${fcflags_opt_52_fft_mpi_noabirule}])
      echo "fcflags_opt_52_fft_mpi_noabirule='${fcflags_opt_52_fft_mpi_noabirule}'" >>config.optim
      fcflags_opt_dirlist="${fcflags_opt_dirlist} 52_fft_mpi_noabirule"
    fi
  else
    if test "${fcflags_opt_52_fft_mpi_noabirule}" != ""; then
      fcflags_opt_52_fft_mpi_noabirule=""
      AC_MSG_NOTICE([fcflags_opt_52_fft_mpi_noabirule overriden by FCFLAGS])
    fi
  fi
  AC_SUBST(fcflags_opt_52_fft_mpi_noabirule)

  dnl 52_manage_cuda library
  if test "${FCFLAGS}" = ""; then
    if test "${fcflags_opt_52_manage_cuda}" = "" -o "${enable_optim}" = "no"; then
      fcflags_opt_52_manage_cuda="${fcflags_opt_default}"
    else
      AC_MSG_NOTICE([optimization for 52_manage_cuda is ${fcflags_opt_52_manage_cuda}])
      echo "fcflags_opt_52_manage_cuda='${fcflags_opt_52_manage_cuda}'" >>config.optim
      fcflags_opt_dirlist="${fcflags_opt_dirlist} 52_manage_cuda"
    fi
  else
    if test "${fcflags_opt_52_manage_cuda}" != ""; then
      fcflags_opt_52_manage_cuda=""
      AC_MSG_NOTICE([fcflags_opt_52_manage_cuda overriden by FCFLAGS])
    fi
  fi
  AC_SUBST(fcflags_opt_52_manage_cuda)

  dnl 53_ffts library
  if test "${FCFLAGS}" = ""; then
    if test "${fcflags_opt_53_ffts}" = "" -o "${enable_optim}" = "no"; then
      fcflags_opt_53_ffts="${fcflags_opt_default}"
    else
      AC_MSG_NOTICE([optimization for 53_ffts is ${fcflags_opt_53_ffts}])
      echo "fcflags_opt_53_ffts='${fcflags_opt_53_ffts}'" >>config.optim
      fcflags_opt_dirlist="${fcflags_opt_dirlist} 53_ffts"
    fi
  else
    if test "${fcflags_opt_53_ffts}" != ""; then
      fcflags_opt_53_ffts=""
      AC_MSG_NOTICE([fcflags_opt_53_ffts overriden by FCFLAGS])
    fi
  fi
  AC_SUBST(fcflags_opt_53_ffts)

  dnl 54_spacepar library
  if test "${FCFLAGS}" = ""; then
    if test "${fcflags_opt_54_spacepar}" = "" -o "${enable_optim}" = "no"; then
      fcflags_opt_54_spacepar="${fcflags_opt_default}"
    else
      AC_MSG_NOTICE([optimization for 54_spacepar is ${fcflags_opt_54_spacepar}])
      echo "fcflags_opt_54_spacepar='${fcflags_opt_54_spacepar}'" >>config.optim
      fcflags_opt_dirlist="${fcflags_opt_dirlist} 54_spacepar"
    fi
  else
    if test "${fcflags_opt_54_spacepar}" != ""; then
      fcflags_opt_54_spacepar=""
      AC_MSG_NOTICE([fcflags_opt_54_spacepar overriden by FCFLAGS])
    fi
  fi
  AC_SUBST(fcflags_opt_54_spacepar)

  dnl 55_abiutil library
  if test "${FCFLAGS}" = ""; then
    if test "${fcflags_opt_55_abiutil}" = "" -o "${enable_optim}" = "no"; then
      fcflags_opt_55_abiutil="${fcflags_opt_default}"
    else
      AC_MSG_NOTICE([optimization for 55_abiutil is ${fcflags_opt_55_abiutil}])
      echo "fcflags_opt_55_abiutil='${fcflags_opt_55_abiutil}'" >>config.optim
      fcflags_opt_dirlist="${fcflags_opt_dirlist} 55_abiutil"
    fi
  else
    if test "${fcflags_opt_55_abiutil}" != ""; then
      fcflags_opt_55_abiutil=""
      AC_MSG_NOTICE([fcflags_opt_55_abiutil overriden by FCFLAGS])
    fi
  fi
  AC_SUBST(fcflags_opt_55_abiutil)

  dnl 56_io_mpi library
  if test "${FCFLAGS}" = ""; then
    if test "${fcflags_opt_56_io_mpi}" = "" -o "${enable_optim}" = "no"; then
      fcflags_opt_56_io_mpi="${fcflags_opt_default}"
    else
      AC_MSG_NOTICE([optimization for 56_io_mpi is ${fcflags_opt_56_io_mpi}])
      echo "fcflags_opt_56_io_mpi='${fcflags_opt_56_io_mpi}'" >>config.optim
      fcflags_opt_dirlist="${fcflags_opt_dirlist} 56_io_mpi"
    fi
  else
    if test "${fcflags_opt_56_io_mpi}" != ""; then
      fcflags_opt_56_io_mpi=""
      AC_MSG_NOTICE([fcflags_opt_56_io_mpi overriden by FCFLAGS])
    fi
  fi
  AC_SUBST(fcflags_opt_56_io_mpi)

  dnl 56_mixing library
  if test "${FCFLAGS}" = ""; then
    if test "${fcflags_opt_56_mixing}" = "" -o "${enable_optim}" = "no"; then
      fcflags_opt_56_mixing="${fcflags_opt_default}"
    else
      AC_MSG_NOTICE([optimization for 56_mixing is ${fcflags_opt_56_mixing}])
      echo "fcflags_opt_56_mixing='${fcflags_opt_56_mixing}'" >>config.optim
      fcflags_opt_dirlist="${fcflags_opt_dirlist} 56_mixing"
    fi
  else
    if test "${fcflags_opt_56_mixing}" != ""; then
      fcflags_opt_56_mixing=""
      AC_MSG_NOTICE([fcflags_opt_56_mixing overriden by FCFLAGS])
    fi
  fi
  AC_SUBST(fcflags_opt_56_mixing)

  dnl 56_recipspace library
  if test "${FCFLAGS}" = ""; then
    if test "${fcflags_opt_56_recipspace}" = "" -o "${enable_optim}" = "no"; then
      fcflags_opt_56_recipspace="${fcflags_opt_default}"
    else
      AC_MSG_NOTICE([optimization for 56_recipspace is ${fcflags_opt_56_recipspace}])
      echo "fcflags_opt_56_recipspace='${fcflags_opt_56_recipspace}'" >>config.optim
      fcflags_opt_dirlist="${fcflags_opt_dirlist} 56_recipspace"
    fi
  else
    if test "${fcflags_opt_56_recipspace}" != ""; then
      fcflags_opt_56_recipspace=""
      AC_MSG_NOTICE([fcflags_opt_56_recipspace overriden by FCFLAGS])
    fi
  fi
  AC_SUBST(fcflags_opt_56_recipspace)

  dnl 56_xc library
  if test "${FCFLAGS}" = ""; then
    if test "${fcflags_opt_56_xc}" = "" -o "${enable_optim}" = "no"; then
      fcflags_opt_56_xc="${fcflags_opt_default}"
    else
      AC_MSG_NOTICE([optimization for 56_xc is ${fcflags_opt_56_xc}])
      echo "fcflags_opt_56_xc='${fcflags_opt_56_xc}'" >>config.optim
      fcflags_opt_dirlist="${fcflags_opt_dirlist} 56_xc"
    fi
  else
    if test "${fcflags_opt_56_xc}" != ""; then
      fcflags_opt_56_xc=""
      AC_MSG_NOTICE([fcflags_opt_56_xc overriden by FCFLAGS])
    fi
  fi
  AC_SUBST(fcflags_opt_56_xc)

  dnl 57_iopsp_parser library
  if test "${FCFLAGS}" = ""; then
    if test "${fcflags_opt_57_iopsp_parser}" = "" -o "${enable_optim}" = "no"; then
      fcflags_opt_57_iopsp_parser="${fcflags_opt_default}"
    else
      AC_MSG_NOTICE([optimization for 57_iopsp_parser is ${fcflags_opt_57_iopsp_parser}])
      echo "fcflags_opt_57_iopsp_parser='${fcflags_opt_57_iopsp_parser}'" >>config.optim
      fcflags_opt_dirlist="${fcflags_opt_dirlist} 57_iopsp_parser"
    fi
  else
    if test "${fcflags_opt_57_iopsp_parser}" != ""; then
      fcflags_opt_57_iopsp_parser=""
      AC_MSG_NOTICE([fcflags_opt_57_iopsp_parser overriden by FCFLAGS])
    fi
  fi
  AC_SUBST(fcflags_opt_57_iopsp_parser)

  dnl 57_iovars library
  if test "${FCFLAGS}" = ""; then
    if test "${fcflags_opt_57_iovars}" = "" -o "${enable_optim}" = "no"; then
      fcflags_opt_57_iovars="${fcflags_opt_default}"
    else
      AC_MSG_NOTICE([optimization for 57_iovars is ${fcflags_opt_57_iovars}])
      echo "fcflags_opt_57_iovars='${fcflags_opt_57_iovars}'" >>config.optim
      fcflags_opt_dirlist="${fcflags_opt_dirlist} 57_iovars"
    fi
  else
    if test "${fcflags_opt_57_iovars}" != ""; then
      fcflags_opt_57_iovars=""
      AC_MSG_NOTICE([fcflags_opt_57_iovars overriden by FCFLAGS])
    fi
  fi
  AC_SUBST(fcflags_opt_57_iovars)

  dnl 59_ionetcdf library
  if test "${FCFLAGS}" = ""; then
    if test "${fcflags_opt_59_ionetcdf}" = "" -o "${enable_optim}" = "no"; then
      fcflags_opt_59_ionetcdf="${fcflags_opt_default}"
    else
      AC_MSG_NOTICE([optimization for 59_ionetcdf is ${fcflags_opt_59_ionetcdf}])
      echo "fcflags_opt_59_ionetcdf='${fcflags_opt_59_ionetcdf}'" >>config.optim
      fcflags_opt_dirlist="${fcflags_opt_dirlist} 59_ionetcdf"
    fi
  else
    if test "${fcflags_opt_59_ionetcdf}" != ""; then
      fcflags_opt_59_ionetcdf=""
      AC_MSG_NOTICE([fcflags_opt_59_ionetcdf overriden by FCFLAGS])
    fi
  fi
  AC_SUBST(fcflags_opt_59_ionetcdf)

  dnl 61_occeig library
  if test "${FCFLAGS}" = ""; then
    if test "${fcflags_opt_61_occeig}" = "" -o "${enable_optim}" = "no"; then
      fcflags_opt_61_occeig="${fcflags_opt_default}"
    else
      AC_MSG_NOTICE([optimization for 61_occeig is ${fcflags_opt_61_occeig}])
      echo "fcflags_opt_61_occeig='${fcflags_opt_61_occeig}'" >>config.optim
      fcflags_opt_dirlist="${fcflags_opt_dirlist} 61_occeig"
    fi
  else
    if test "${fcflags_opt_61_occeig}" != ""; then
      fcflags_opt_61_occeig=""
      AC_MSG_NOTICE([fcflags_opt_61_occeig overriden by FCFLAGS])
    fi
  fi
  AC_SUBST(fcflags_opt_61_occeig)

  dnl 62_cg_noabirule library
  if test "${FCFLAGS}" = ""; then
    if test "${fcflags_opt_62_cg_noabirule}" = "" -o "${enable_optim}" = "no"; then
      fcflags_opt_62_cg_noabirule="${fcflags_opt_default}"
    else
      AC_MSG_NOTICE([optimization for 62_cg_noabirule is ${fcflags_opt_62_cg_noabirule}])
      echo "fcflags_opt_62_cg_noabirule='${fcflags_opt_62_cg_noabirule}'" >>config.optim
      fcflags_opt_dirlist="${fcflags_opt_dirlist} 62_cg_noabirule"
    fi
  else
    if test "${fcflags_opt_62_cg_noabirule}" != ""; then
      fcflags_opt_62_cg_noabirule=""
      AC_MSG_NOTICE([fcflags_opt_62_cg_noabirule overriden by FCFLAGS])
    fi
  fi
  AC_SUBST(fcflags_opt_62_cg_noabirule)

  dnl 62_ctqmc library
  if test "${FCFLAGS}" = ""; then
    if test "${fcflags_opt_62_ctqmc}" = "" -o "${enable_optim}" = "no"; then
      fcflags_opt_62_ctqmc="${fcflags_opt_default}"
    else
      AC_MSG_NOTICE([optimization for 62_ctqmc is ${fcflags_opt_62_ctqmc}])
      echo "fcflags_opt_62_ctqmc='${fcflags_opt_62_ctqmc}'" >>config.optim
      fcflags_opt_dirlist="${fcflags_opt_dirlist} 62_ctqmc"
    fi
  else
    if test "${fcflags_opt_62_ctqmc}" != ""; then
      fcflags_opt_62_ctqmc=""
      AC_MSG_NOTICE([fcflags_opt_62_ctqmc overriden by FCFLAGS])
    fi
  fi
  AC_SUBST(fcflags_opt_62_ctqmc)

  dnl 62_iowfdenpot library
  if test "${FCFLAGS}" = ""; then
    if test "${fcflags_opt_62_iowfdenpot}" = "" -o "${enable_optim}" = "no"; then
      fcflags_opt_62_iowfdenpot="${fcflags_opt_default}"
    else
      AC_MSG_NOTICE([optimization for 62_iowfdenpot is ${fcflags_opt_62_iowfdenpot}])
      echo "fcflags_opt_62_iowfdenpot='${fcflags_opt_62_iowfdenpot}'" >>config.optim
      fcflags_opt_dirlist="${fcflags_opt_dirlist} 62_iowfdenpot"
    fi
  else
    if test "${fcflags_opt_62_iowfdenpot}" != ""; then
      fcflags_opt_62_iowfdenpot=""
      AC_MSG_NOTICE([fcflags_opt_62_iowfdenpot overriden by FCFLAGS])
    fi
  fi
  AC_SUBST(fcflags_opt_62_iowfdenpot)

  dnl 62_poisson library
  if test "${FCFLAGS}" = ""; then
    if test "${fcflags_opt_62_poisson}" = "" -o "${enable_optim}" = "no"; then
      fcflags_opt_62_poisson="${fcflags_opt_default}"
    else
      AC_MSG_NOTICE([optimization for 62_poisson is ${fcflags_opt_62_poisson}])
      echo "fcflags_opt_62_poisson='${fcflags_opt_62_poisson}'" >>config.optim
      fcflags_opt_dirlist="${fcflags_opt_dirlist} 62_poisson"
    fi
  else
    if test "${fcflags_opt_62_poisson}" != ""; then
      fcflags_opt_62_poisson=""
      AC_MSG_NOTICE([fcflags_opt_62_poisson overriden by FCFLAGS])
    fi
  fi
  AC_SUBST(fcflags_opt_62_poisson)

  dnl 62_wvl_wfs library
  if test "${FCFLAGS}" = ""; then
    if test "${fcflags_opt_62_wvl_wfs}" = "" -o "${enable_optim}" = "no"; then
      fcflags_opt_62_wvl_wfs="${fcflags_opt_default}"
    else
      AC_MSG_NOTICE([optimization for 62_wvl_wfs is ${fcflags_opt_62_wvl_wfs}])
      echo "fcflags_opt_62_wvl_wfs='${fcflags_opt_62_wvl_wfs}'" >>config.optim
      fcflags_opt_dirlist="${fcflags_opt_dirlist} 62_wvl_wfs"
    fi
  else
    if test "${fcflags_opt_62_wvl_wfs}" != ""; then
      fcflags_opt_62_wvl_wfs=""
      AC_MSG_NOTICE([fcflags_opt_62_wvl_wfs overriden by FCFLAGS])
    fi
  fi
  AC_SUBST(fcflags_opt_62_wvl_wfs)

  dnl 63_bader library
  if test "${FCFLAGS}" = ""; then
    if test "${fcflags_opt_63_bader}" = "" -o "${enable_optim}" = "no"; then
      fcflags_opt_63_bader="${fcflags_opt_default}"
    else
      AC_MSG_NOTICE([optimization for 63_bader is ${fcflags_opt_63_bader}])
      echo "fcflags_opt_63_bader='${fcflags_opt_63_bader}'" >>config.optim
      fcflags_opt_dirlist="${fcflags_opt_dirlist} 63_bader"
    fi
  else
    if test "${fcflags_opt_63_bader}" != ""; then
      fcflags_opt_63_bader=""
      AC_MSG_NOTICE([fcflags_opt_63_bader overriden by FCFLAGS])
    fi
  fi
  AC_SUBST(fcflags_opt_63_bader)

  dnl 64_psp library
  if test "${FCFLAGS}" = ""; then
    if test "${fcflags_opt_64_psp}" = "" -o "${enable_optim}" = "no"; then
      fcflags_opt_64_psp="${fcflags_opt_default}"
    else
      AC_MSG_NOTICE([optimization for 64_psp is ${fcflags_opt_64_psp}])
      echo "fcflags_opt_64_psp='${fcflags_opt_64_psp}'" >>config.optim
      fcflags_opt_dirlist="${fcflags_opt_dirlist} 64_psp"
    fi
  else
    if test "${fcflags_opt_64_psp}" != ""; then
      fcflags_opt_64_psp=""
      AC_MSG_NOTICE([fcflags_opt_64_psp overriden by FCFLAGS])
    fi
  fi
  AC_SUBST(fcflags_opt_64_psp)

  dnl 65_lotf_base library
  if test "${FCFLAGS}" = ""; then
    if test "${fcflags_opt_65_lotf_base}" = "" -o "${enable_optim}" = "no"; then
      fcflags_opt_65_lotf_base="${fcflags_opt_default}"
    else
      AC_MSG_NOTICE([optimization for 65_lotf_base is ${fcflags_opt_65_lotf_base}])
      echo "fcflags_opt_65_lotf_base='${fcflags_opt_65_lotf_base}'" >>config.optim
      fcflags_opt_dirlist="${fcflags_opt_dirlist} 65_lotf_base"
    fi
  else
    if test "${fcflags_opt_65_lotf_base}" != ""; then
      fcflags_opt_65_lotf_base=""
      AC_MSG_NOTICE([fcflags_opt_65_lotf_base overriden by FCFLAGS])
    fi
  fi
  AC_SUBST(fcflags_opt_65_lotf_base)

  dnl 65_paw library
  if test "${FCFLAGS}" = ""; then
    if test "${fcflags_opt_65_paw}" = "" -o "${enable_optim}" = "no"; then
      fcflags_opt_65_paw="${fcflags_opt_default}"
    else
      AC_MSG_NOTICE([optimization for 65_paw is ${fcflags_opt_65_paw}])
      echo "fcflags_opt_65_paw='${fcflags_opt_65_paw}'" >>config.optim
      fcflags_opt_dirlist="${fcflags_opt_dirlist} 65_paw"
    fi
  else
    if test "${fcflags_opt_65_paw}" != ""; then
      fcflags_opt_65_paw=""
      AC_MSG_NOTICE([fcflags_opt_65_paw overriden by FCFLAGS])
    fi
  fi
  AC_SUBST(fcflags_opt_65_paw)

  dnl 66_nonlocal library
  if test "${FCFLAGS}" = ""; then
    if test "${fcflags_opt_66_nonlocal}" = "" -o "${enable_optim}" = "no"; then
      fcflags_opt_66_nonlocal="${fcflags_opt_default}"
    else
      AC_MSG_NOTICE([optimization for 66_nonlocal is ${fcflags_opt_66_nonlocal}])
      echo "fcflags_opt_66_nonlocal='${fcflags_opt_66_nonlocal}'" >>config.optim
      fcflags_opt_dirlist="${fcflags_opt_dirlist} 66_nonlocal"
    fi
  else
    if test "${fcflags_opt_66_nonlocal}" != ""; then
      fcflags_opt_66_nonlocal=""
      AC_MSG_NOTICE([fcflags_opt_66_nonlocal overriden by FCFLAGS])
    fi
  fi
  AC_SUBST(fcflags_opt_66_nonlocal)

  dnl 66_vdwxc library
  if test "${FCFLAGS}" = ""; then
    if test "${fcflags_opt_66_vdwxc}" = "" -o "${enable_optim}" = "no"; then
      fcflags_opt_66_vdwxc="${fcflags_opt_default}"
    else
      AC_MSG_NOTICE([optimization for 66_vdwxc is ${fcflags_opt_66_vdwxc}])
      echo "fcflags_opt_66_vdwxc='${fcflags_opt_66_vdwxc}'" >>config.optim
      fcflags_opt_dirlist="${fcflags_opt_dirlist} 66_vdwxc"
    fi
  else
    if test "${fcflags_opt_66_vdwxc}" != ""; then
      fcflags_opt_66_vdwxc=""
      AC_MSG_NOTICE([fcflags_opt_66_vdwxc overriden by FCFLAGS])
    fi
  fi
  AC_SUBST(fcflags_opt_66_vdwxc)

  dnl 66_wfs library
  if test "${FCFLAGS}" = ""; then
    if test "${fcflags_opt_66_wfs}" = "" -o "${enable_optim}" = "no"; then
      fcflags_opt_66_wfs="${fcflags_opt_default}"
    else
      AC_MSG_NOTICE([optimization for 66_wfs is ${fcflags_opt_66_wfs}])
      echo "fcflags_opt_66_wfs='${fcflags_opt_66_wfs}'" >>config.optim
      fcflags_opt_dirlist="${fcflags_opt_dirlist} 66_wfs"
    fi
  else
    if test "${fcflags_opt_66_wfs}" != ""; then
      fcflags_opt_66_wfs=""
      AC_MSG_NOTICE([fcflags_opt_66_wfs overriden by FCFLAGS])
    fi
  fi
  AC_SUBST(fcflags_opt_66_wfs)

  dnl 67_common library
  if test "${FCFLAGS}" = ""; then
    if test "${fcflags_opt_67_common}" = "" -o "${enable_optim}" = "no"; then
      fcflags_opt_67_common="${fcflags_opt_default}"
    else
      AC_MSG_NOTICE([optimization for 67_common is ${fcflags_opt_67_common}])
      echo "fcflags_opt_67_common='${fcflags_opt_67_common}'" >>config.optim
      fcflags_opt_dirlist="${fcflags_opt_dirlist} 67_common"
    fi
  else
    if test "${fcflags_opt_67_common}" != ""; then
      fcflags_opt_67_common=""
      AC_MSG_NOTICE([fcflags_opt_67_common overriden by FCFLAGS])
    fi
  fi
  AC_SUBST(fcflags_opt_67_common)

  dnl 67_triqs_ext library
  if test "${FCFLAGS}" = ""; then
    if test "${fcflags_opt_67_triqs_ext}" = "" -o "${enable_optim}" = "no"; then
      fcflags_opt_67_triqs_ext="${fcflags_opt_default}"
    else
      AC_MSG_NOTICE([optimization for 67_triqs_ext is ${fcflags_opt_67_triqs_ext}])
      echo "fcflags_opt_67_triqs_ext='${fcflags_opt_67_triqs_ext}'" >>config.optim
      fcflags_opt_dirlist="${fcflags_opt_dirlist} 67_triqs_ext"
    fi
  else
    if test "${fcflags_opt_67_triqs_ext}" != ""; then
      fcflags_opt_67_triqs_ext=""
      AC_MSG_NOTICE([fcflags_opt_67_triqs_ext overriden by FCFLAGS])
    fi
  fi
  AC_SUBST(fcflags_opt_67_triqs_ext)

  dnl 68_dmft library
  if test "${FCFLAGS}" = ""; then
    if test "${fcflags_opt_68_dmft}" = "" -o "${enable_optim}" = "no"; then
      fcflags_opt_68_dmft="${fcflags_opt_default}"
    else
      AC_MSG_NOTICE([optimization for 68_dmft is ${fcflags_opt_68_dmft}])
      echo "fcflags_opt_68_dmft='${fcflags_opt_68_dmft}'" >>config.optim
      fcflags_opt_dirlist="${fcflags_opt_dirlist} 68_dmft"
    fi
  else
    if test "${fcflags_opt_68_dmft}" != ""; then
      fcflags_opt_68_dmft=""
      AC_MSG_NOTICE([fcflags_opt_68_dmft overriden by FCFLAGS])
    fi
  fi
  AC_SUBST(fcflags_opt_68_dmft)

  dnl 68_lotf library
  if test "${FCFLAGS}" = ""; then
    if test "${fcflags_opt_68_lotf}" = "" -o "${enable_optim}" = "no"; then
      fcflags_opt_68_lotf="${fcflags_opt_default}"
    else
      AC_MSG_NOTICE([optimization for 68_lotf is ${fcflags_opt_68_lotf}])
      echo "fcflags_opt_68_lotf='${fcflags_opt_68_lotf}'" >>config.optim
      fcflags_opt_dirlist="${fcflags_opt_dirlist} 68_lotf"
    fi
  else
    if test "${fcflags_opt_68_lotf}" != ""; then
      fcflags_opt_68_lotf=""
      AC_MSG_NOTICE([fcflags_opt_68_lotf overriden by FCFLAGS])
    fi
  fi
  AC_SUBST(fcflags_opt_68_lotf)

  dnl 68_recursion library
  if test "${FCFLAGS}" = ""; then
    if test "${fcflags_opt_68_recursion}" = "" -o "${enable_optim}" = "no"; then
      fcflags_opt_68_recursion="${fcflags_opt_default}"
    else
      AC_MSG_NOTICE([optimization for 68_recursion is ${fcflags_opt_68_recursion}])
      echo "fcflags_opt_68_recursion='${fcflags_opt_68_recursion}'" >>config.optim
      fcflags_opt_dirlist="${fcflags_opt_dirlist} 68_recursion"
    fi
  else
    if test "${fcflags_opt_68_recursion}" != ""; then
      fcflags_opt_68_recursion=""
      AC_MSG_NOTICE([fcflags_opt_68_recursion overriden by FCFLAGS])
    fi
  fi
  AC_SUBST(fcflags_opt_68_recursion)

  dnl 68_rsprc library
  if test "${FCFLAGS}" = ""; then
    if test "${fcflags_opt_68_rsprc}" = "" -o "${enable_optim}" = "no"; then
      fcflags_opt_68_rsprc="${fcflags_opt_default}"
    else
      AC_MSG_NOTICE([optimization for 68_rsprc is ${fcflags_opt_68_rsprc}])
      echo "fcflags_opt_68_rsprc='${fcflags_opt_68_rsprc}'" >>config.optim
      fcflags_opt_dirlist="${fcflags_opt_dirlist} 68_rsprc"
    fi
  else
    if test "${fcflags_opt_68_rsprc}" != ""; then
      fcflags_opt_68_rsprc=""
      AC_MSG_NOTICE([fcflags_opt_68_rsprc overriden by FCFLAGS])
    fi
  fi
  AC_SUBST(fcflags_opt_68_rsprc)

  dnl 69_wfdesc library
  if test "${FCFLAGS}" = ""; then
    if test "${fcflags_opt_69_wfdesc}" = "" -o "${enable_optim}" = "no"; then
      fcflags_opt_69_wfdesc="${fcflags_opt_default}"
    else
      AC_MSG_NOTICE([optimization for 69_wfdesc is ${fcflags_opt_69_wfdesc}])
      echo "fcflags_opt_69_wfdesc='${fcflags_opt_69_wfdesc}'" >>config.optim
      fcflags_opt_dirlist="${fcflags_opt_dirlist} 69_wfdesc"
    fi
  else
    if test "${fcflags_opt_69_wfdesc}" != ""; then
      fcflags_opt_69_wfdesc=""
      AC_MSG_NOTICE([fcflags_opt_69_wfdesc overriden by FCFLAGS])
    fi
  fi
  AC_SUBST(fcflags_opt_69_wfdesc)

  dnl 70_gw library
  if test "${FCFLAGS}" = ""; then
    if test "${fcflags_opt_70_gw}" = "" -o "${enable_optim}" = "no"; then
      fcflags_opt_70_gw="${fcflags_opt_default}"
    else
      AC_MSG_NOTICE([optimization for 70_gw is ${fcflags_opt_70_gw}])
      echo "fcflags_opt_70_gw='${fcflags_opt_70_gw}'" >>config.optim
      fcflags_opt_dirlist="${fcflags_opt_dirlist} 70_gw"
    fi
  else
    if test "${fcflags_opt_70_gw}" != ""; then
      fcflags_opt_70_gw=""
      AC_MSG_NOTICE([fcflags_opt_70_gw overriden by FCFLAGS])
    fi
  fi
  AC_SUBST(fcflags_opt_70_gw)

  dnl 71_bse library
  if test "${FCFLAGS}" = ""; then
    if test "${fcflags_opt_71_bse}" = "" -o "${enable_optim}" = "no"; then
      fcflags_opt_71_bse="${fcflags_opt_default}"
    else
      AC_MSG_NOTICE([optimization for 71_bse is ${fcflags_opt_71_bse}])
      echo "fcflags_opt_71_bse='${fcflags_opt_71_bse}'" >>config.optim
      fcflags_opt_dirlist="${fcflags_opt_dirlist} 71_bse"
    fi
  else
    if test "${fcflags_opt_71_bse}" != ""; then
      fcflags_opt_71_bse=""
      AC_MSG_NOTICE([fcflags_opt_71_bse overriden by FCFLAGS])
    fi
  fi
  AC_SUBST(fcflags_opt_71_bse)

  dnl 71_wannier library
  if test "${FCFLAGS}" = ""; then
    if test "${fcflags_opt_71_wannier}" = "" -o "${enable_optim}" = "no"; then
      fcflags_opt_71_wannier="${fcflags_opt_default}"
    else
      AC_MSG_NOTICE([optimization for 71_wannier is ${fcflags_opt_71_wannier}])
      echo "fcflags_opt_71_wannier='${fcflags_opt_71_wannier}'" >>config.optim
      fcflags_opt_dirlist="${fcflags_opt_dirlist} 71_wannier"
    fi
  else
    if test "${fcflags_opt_71_wannier}" != ""; then
      fcflags_opt_71_wannier=""
      AC_MSG_NOTICE([fcflags_opt_71_wannier overriden by FCFLAGS])
    fi
  fi
  AC_SUBST(fcflags_opt_71_wannier)

  dnl 72_response library
  if test "${FCFLAGS}" = ""; then
    if test "${fcflags_opt_72_response}" = "" -o "${enable_optim}" = "no"; then
      fcflags_opt_72_response="${fcflags_opt_default}"
    else
      AC_MSG_NOTICE([optimization for 72_response is ${fcflags_opt_72_response}])
      echo "fcflags_opt_72_response='${fcflags_opt_72_response}'" >>config.optim
      fcflags_opt_dirlist="${fcflags_opt_dirlist} 72_response"
    fi
  else
    if test "${fcflags_opt_72_response}" != ""; then
      fcflags_opt_72_response=""
      AC_MSG_NOTICE([fcflags_opt_72_response overriden by FCFLAGS])
    fi
  fi
  AC_SUBST(fcflags_opt_72_response)

  dnl 77_ddb library
  if test "${FCFLAGS}" = ""; then
    if test "${fcflags_opt_77_ddb}" = "" -o "${enable_optim}" = "no"; then
      fcflags_opt_77_ddb="${fcflags_opt_default}"
    else
      AC_MSG_NOTICE([optimization for 77_ddb is ${fcflags_opt_77_ddb}])
      echo "fcflags_opt_77_ddb='${fcflags_opt_77_ddb}'" >>config.optim
      fcflags_opt_dirlist="${fcflags_opt_dirlist} 77_ddb"
    fi
  else
    if test "${fcflags_opt_77_ddb}" != ""; then
      fcflags_opt_77_ddb=""
      AC_MSG_NOTICE([fcflags_opt_77_ddb overriden by FCFLAGS])
    fi
  fi
  AC_SUBST(fcflags_opt_77_ddb)

  dnl 77_suscep library
  if test "${FCFLAGS}" = ""; then
    if test "${fcflags_opt_77_suscep}" = "" -o "${enable_optim}" = "no"; then
      fcflags_opt_77_suscep="${fcflags_opt_default}"
    else
      AC_MSG_NOTICE([optimization for 77_suscep is ${fcflags_opt_77_suscep}])
      echo "fcflags_opt_77_suscep='${fcflags_opt_77_suscep}'" >>config.optim
      fcflags_opt_dirlist="${fcflags_opt_dirlist} 77_suscep"
    fi
  else
    if test "${fcflags_opt_77_suscep}" != ""; then
      fcflags_opt_77_suscep=""
      AC_MSG_NOTICE([fcflags_opt_77_suscep overriden by FCFLAGS])
    fi
  fi
  AC_SUBST(fcflags_opt_77_suscep)

  dnl 78_effpot library
  if test "${FCFLAGS}" = ""; then
    if test "${fcflags_opt_78_effpot}" = "" -o "${enable_optim}" = "no"; then
      fcflags_opt_78_effpot="${fcflags_opt_default}"
    else
      AC_MSG_NOTICE([optimization for 78_effpot is ${fcflags_opt_78_effpot}])
      echo "fcflags_opt_78_effpot='${fcflags_opt_78_effpot}'" >>config.optim
      fcflags_opt_dirlist="${fcflags_opt_dirlist} 78_effpot"
    fi
  else
    if test "${fcflags_opt_78_effpot}" != ""; then
      fcflags_opt_78_effpot=""
      AC_MSG_NOTICE([fcflags_opt_78_effpot overriden by FCFLAGS])
    fi
  fi
  AC_SUBST(fcflags_opt_78_effpot)

  dnl 78_eph library
  if test "${FCFLAGS}" = ""; then
    if test "${fcflags_opt_78_eph}" = "" -o "${enable_optim}" = "no"; then
      fcflags_opt_78_eph="${fcflags_opt_default}"
    else
      AC_MSG_NOTICE([optimization for 78_eph is ${fcflags_opt_78_eph}])
      echo "fcflags_opt_78_eph='${fcflags_opt_78_eph}'" >>config.optim
      fcflags_opt_dirlist="${fcflags_opt_dirlist} 78_eph"
    fi
  else
    if test "${fcflags_opt_78_eph}" != ""; then
      fcflags_opt_78_eph=""
      AC_MSG_NOTICE([fcflags_opt_78_eph overriden by FCFLAGS])
    fi
  fi
  AC_SUBST(fcflags_opt_78_eph)

  dnl 79_seqpar_mpi library
  if test "${FCFLAGS}" = ""; then
    if test "${fcflags_opt_79_seqpar_mpi}" = "" -o "${enable_optim}" = "no"; then
      fcflags_opt_79_seqpar_mpi="${fcflags_opt_default}"
    else
      AC_MSG_NOTICE([optimization for 79_seqpar_mpi is ${fcflags_opt_79_seqpar_mpi}])
      echo "fcflags_opt_79_seqpar_mpi='${fcflags_opt_79_seqpar_mpi}'" >>config.optim
      fcflags_opt_dirlist="${fcflags_opt_dirlist} 79_seqpar_mpi"
    fi
  else
    if test "${fcflags_opt_79_seqpar_mpi}" != ""; then
      fcflags_opt_79_seqpar_mpi=""
      AC_MSG_NOTICE([fcflags_opt_79_seqpar_mpi overriden by FCFLAGS])
    fi
  fi
  AC_SUBST(fcflags_opt_79_seqpar_mpi)

  dnl 80_tdep library
  if test "${FCFLAGS}" = ""; then
    if test "${fcflags_opt_80_tdep}" = "" -o "${enable_optim}" = "no"; then
      fcflags_opt_80_tdep="${fcflags_opt_default}"
    else
      AC_MSG_NOTICE([optimization for 80_tdep is ${fcflags_opt_80_tdep}])
      echo "fcflags_opt_80_tdep='${fcflags_opt_80_tdep}'" >>config.optim
      fcflags_opt_dirlist="${fcflags_opt_dirlist} 80_tdep"
    fi
  else
    if test "${fcflags_opt_80_tdep}" != ""; then
      fcflags_opt_80_tdep=""
      AC_MSG_NOTICE([fcflags_opt_80_tdep overriden by FCFLAGS])
    fi
  fi
  AC_SUBST(fcflags_opt_80_tdep)

  dnl 83_cut3d library
  if test "${FCFLAGS}" = ""; then
    if test "${fcflags_opt_83_cut3d}" = "" -o "${enable_optim}" = "no"; then
      fcflags_opt_83_cut3d="${fcflags_opt_default}"
    else
      AC_MSG_NOTICE([optimization for 83_cut3d is ${fcflags_opt_83_cut3d}])
      echo "fcflags_opt_83_cut3d='${fcflags_opt_83_cut3d}'" >>config.optim
      fcflags_opt_dirlist="${fcflags_opt_dirlist} 83_cut3d"
    fi
  else
    if test "${fcflags_opt_83_cut3d}" != ""; then
      fcflags_opt_83_cut3d=""
      AC_MSG_NOTICE([fcflags_opt_83_cut3d overriden by FCFLAGS])
    fi
  fi
  AC_SUBST(fcflags_opt_83_cut3d)

  dnl 84_fold2Bloch library
  if test "${FCFLAGS}" = ""; then
    if test "${fcflags_opt_84_fold2Bloch}" = "" -o "${enable_optim}" = "no"; then
      fcflags_opt_84_fold2Bloch="${fcflags_opt_default}"
    else
      AC_MSG_NOTICE([optimization for 84_fold2Bloch is ${fcflags_opt_84_fold2Bloch}])
      echo "fcflags_opt_84_fold2Bloch='${fcflags_opt_84_fold2Bloch}'" >>config.optim
      fcflags_opt_dirlist="${fcflags_opt_dirlist} 84_fold2Bloch"
    fi
  else
    if test "${fcflags_opt_84_fold2Bloch}" != ""; then
      fcflags_opt_84_fold2Bloch=""
      AC_MSG_NOTICE([fcflags_opt_84_fold2Bloch overriden by FCFLAGS])
    fi
  fi
  AC_SUBST(fcflags_opt_84_fold2Bloch)

  dnl 94_scfcv library
  if test "${FCFLAGS}" = ""; then
    if test "${fcflags_opt_94_scfcv}" = "" -o "${enable_optim}" = "no"; then
      fcflags_opt_94_scfcv="${fcflags_opt_default}"
    else
      AC_MSG_NOTICE([optimization for 94_scfcv is ${fcflags_opt_94_scfcv}])
      echo "fcflags_opt_94_scfcv='${fcflags_opt_94_scfcv}'" >>config.optim
      fcflags_opt_dirlist="${fcflags_opt_dirlist} 94_scfcv"
    fi
  else
    if test "${fcflags_opt_94_scfcv}" != ""; then
      fcflags_opt_94_scfcv=""
      AC_MSG_NOTICE([fcflags_opt_94_scfcv overriden by FCFLAGS])
    fi
  fi
  AC_SUBST(fcflags_opt_94_scfcv)

  dnl 95_drive library
  if test "${FCFLAGS}" = ""; then
    if test "${fcflags_opt_95_drive}" = "" -o "${enable_optim}" = "no"; then
      fcflags_opt_95_drive="${fcflags_opt_default}"
    else
      AC_MSG_NOTICE([optimization for 95_drive is ${fcflags_opt_95_drive}])
      echo "fcflags_opt_95_drive='${fcflags_opt_95_drive}'" >>config.optim
      fcflags_opt_dirlist="${fcflags_opt_dirlist} 95_drive"
    fi
  else
    if test "${fcflags_opt_95_drive}" != ""; then
      fcflags_opt_95_drive=""
      AC_MSG_NOTICE([fcflags_opt_95_drive overriden by FCFLAGS])
    fi
  fi
  AC_SUBST(fcflags_opt_95_drive)

  dnl 98_main library
  if test "${FCFLAGS}" = ""; then
    if test "${fcflags_opt_98_main}" = "" -o "${enable_optim}" = "no"; then
      fcflags_opt_98_main="${fcflags_opt_default}"
    else
      AC_MSG_NOTICE([optimization for 98_main is ${fcflags_opt_98_main}])
      echo "fcflags_opt_98_main='${fcflags_opt_98_main}'" >>config.optim
      fcflags_opt_dirlist="${fcflags_opt_dirlist} 98_main"
    fi
  else
    if test "${fcflags_opt_98_main}" != ""; then
      fcflags_opt_98_main=""
      AC_MSG_NOTICE([fcflags_opt_98_main overriden by FCFLAGS])
    fi
  fi
  AC_SUBST(fcflags_opt_98_main)

  echo "fcflags_opt_dirlist='${fcflags_opt_dirlist}'" >>config.optim
])
m4trace:config/m4/auto-env.m4:30: -1- AC_DEFUN([ABI_ENV_AC_UPDATE], [
  dnl Please note that the existing environment will always be overwritten.
  dnl Thus you should save sensistive data before calling this macro.

  dnl Check arguments
  m4_if([$1], [tmp_lang="$1"], [tmp_lang="Fortran"])dnl

  dnl Update linker flags
  case "$1" in
    C)
      LDFLAGS="${CC_LDFLAGS}"
      ;;
    C++)
      LDFLAGS="${CXX_LDFLAGS}"
      ;;
    Fortran)
      LDFLAGS="${FC_LDFLAGS}"
      ;;
  esac

  dnl Update linker additional libs
  LIBS="${CC_LIBS}"
  CXXLIBS="${CXX_LIBS}"
  FCLIBS="${FC_LIBS}"

  unset tmp_lang
])
m4trace:config/m4/auto-env.m4:66: -1- AC_DEFUN([ABI_ENV_INIT], [

  dnl CPPFLAGS holder to permit C/Fortran mixing
  ABI_CPPFLAGS=''
  AC_SUBST(ABI_CPPFLAGS)

  dnl Library archiver

  dnl Library archiver flags

  dnl Library archiver flags for 64-bit objects
  ARFLAGS_64BITS=''
  AC_SUBST(ARFLAGS_64BITS)

  dnl Library archiver commands
  ARFLAGS_CMD='rc'
  AC_SUBST(ARFLAGS_CMD)

  dnl Library archiver flags for debugging
  AC_ARG_VAR([ARFLAGS_DEBUG],
    [Library archiver flags for debugging])
  AC_SUBST(ARFLAGS_DEBUG)

  dnl Additional library archiver flags
  AC_ARG_VAR([ARFLAGS_EXTRA],
    [Additional library archiver flags])
  AC_SUBST(ARFLAGS_EXTRA)

  dnl Tricky library archiver flags
  ARFLAGS_HINTS=''
  AC_SUBST(ARFLAGS_HINTS)

  dnl Library archiver flags for optimization
  AC_ARG_VAR([ARFLAGS_OPTIM],
    [Library archiver flags for optimization])
  AC_SUBST(ARFLAGS_OPTIM)

  dnl C compiler

  dnl C linker flags
  AC_ARG_VAR([CC_LDFLAGS],
    [C linker flags])
  AC_SUBST(CC_LDFLAGS)

  dnl C linker flags for 64-bit objects
  CC_LDFLAGS_64BITS=''
  AC_SUBST(CC_LDFLAGS_64BITS)

  dnl C linker flags for debugging
  AC_ARG_VAR([CC_LDFLAGS_DEBUG],
    [C linker flags for debugging])
  AC_SUBST(CC_LDFLAGS_DEBUG)

  dnl Additional C linker flags
  AC_SUBST(CC_LDFLAGS_EXTRA)

  dnl C linker flags for GPU
  CC_LDFLAGS_GPU=''
  AC_SUBST(CC_LDFLAGS_GPU)

  dnl Tricky C linker flags
  CC_LDFLAGS_HINTS=''
  AC_SUBST(CC_LDFLAGS_HINTS)

  dnl C linker flags for optimization
  AC_ARG_VAR([CC_LDFLAGS_OPTIM],
    [C linker flags for optimization])
  AC_SUBST(CC_LDFLAGS_OPTIM)

  dnl C linker libraries
  AC_ARG_VAR([CC_LIBS],
    [C linker libraries])
  AC_SUBST(CC_LIBS)

  dnl C linker additional libraries for 64-bit objects
  CC_LIBS_64BITS=''
  AC_SUBST(CC_LIBS_64BITS)

  dnl C linker additional libraries for debugging
  AC_ARG_VAR([CC_LIBS_DEBUG],
    [C linker additional libraries for debugging])
  AC_SUBST(CC_LIBS_DEBUG)

  dnl C linker additional libraries
  AC_SUBST(CC_LIBS_EXTRA)

  dnl C linker additional libraries for GPU
  CC_LIBS_GPU=''
  AC_SUBST(CC_LIBS_GPU)

  dnl Tricky C linker additional libraries
  CC_LIBS_HINTS=''
  AC_SUBST(CC_LIBS_HINTS)

  dnl C linker additional libraries for optimization
  AC_ARG_VAR([CC_LIBS_OPTIM],
    [C linker additional libraries for optimization])
  AC_SUBST(CC_LIBS_OPTIM)

  dnl C compiler flags

  dnl C flags for 64-bit objects
  CFLAGS_64BITS=''
  AC_SUBST(CFLAGS_64BITS)

  dnl C compiler flags for debugging
  AC_ARG_VAR([CFLAGS_DEBUG],
    [C compiler flags for debugging])
  AC_SUBST(CFLAGS_DEBUG)

  dnl Additional C compiler flags
  AC_ARG_VAR([CFLAGS_EXTRA],
    [Additional C compiler flags])
  AC_SUBST(CFLAGS_EXTRA)

  dnl C flags for GPU
  CFLAGS_GPU=''
  AC_SUBST(CFLAGS_GPU)

  dnl Tricky C compiler flags
  CFLAGS_HINTS=''
  AC_SUBST(CFLAGS_HINTS)

  dnl C compiler flags for optimization
  AC_ARG_VAR([CFLAGS_OPTIM],
    [C compiler flags for optimization])
  AC_SUBST(CFLAGS_OPTIM)

  dnl C preprocessor

  dnl C preprocessor flags

  dnl C preprocessor flags for 64-bit objects
  CPPFLAGS_64BITS=''
  AC_SUBST(CPPFLAGS_64BITS)

  dnl C preprocessor flags for debugging
  AC_ARG_VAR([CPPFLAGS_DEBUG],
    [C preprocessor flags for debugging])
  AC_SUBST(CPPFLAGS_DEBUG)

  dnl Additional C preprocessor flags
  AC_ARG_VAR([CPPFLAGS_EXTRA],
    [Additional C preprocessor flags])
  AC_SUBST(CPPFLAGS_EXTRA)

  dnl C preprocessor flags for GPU
  CPPFLAGS_GPU=''
  AC_SUBST(CPPFLAGS_GPU)

  dnl Tricky C preprocessor flags
  CPPFLAGS_HINTS=''
  AC_SUBST(CPPFLAGS_HINTS)

  dnl C preprocessor flags for optimization
  AC_ARG_VAR([CPPFLAGS_OPTIM],
    [C preprocessor flags for optimization])
  AC_SUBST(CPPFLAGS_OPTIM)

  dnl C++ compiler

  dnl C++ compiler flags

  dnl C++ flags for 64-bit objects
  CXXFLAGS_64BITS=''
  AC_SUBST(CXXFLAGS_64BITS)

  dnl C++ compiler flags for debugging
  AC_ARG_VAR([CXXFLAGS_DEBUG],
    [C++ compiler flags for debugging])
  AC_SUBST(CXXFLAGS_DEBUG)

  dnl Additional C++ compiler flags
  AC_ARG_VAR([CXXFLAGS_EXTRA],
    [Additional C++ compiler flags])
  AC_SUBST(CXXFLAGS_EXTRA)

  dnl C++ flags for GPU
  CXXFLAGS_GPU=''
  AC_SUBST(CXXFLAGS_GPU)

  dnl Tricky C++ compiler flags
  CXXFLAGS_HINTS=''
  AC_SUBST(CXXFLAGS_HINTS)

  dnl C++ compiler flags for optimization
  AC_ARG_VAR([CXXFLAGS_OPTIM],
    [C++ compiler flags for optimization])
  AC_SUBST(CXXFLAGS_OPTIM)

  dnl C++ linker flags
  AC_ARG_VAR([CXX_LDFLAGS],
    [C++ linker flags])

  dnl C++ linker flags for 64-bit objects
  CXX_LDFLAGS_64BITS=''
  AC_SUBST(CXX_LDFLAGS_64BITS)

  dnl C++ linker flags for debugging
  AC_ARG_VAR([CXX_LDFLAGS_DEBUG],
    [C++ linker flags for debugging])
  AC_SUBST(CXX_LDFLAGS_DEBUG)

  dnl Additional C++ linker flags
  AC_ARG_VAR([CXX_LDFLAGS_EXTRA],
    [Additional C++ linker flags])
  AC_SUBST(CXX_LDFLAGS_EXTRA)

  dnl C++ linker flags for GPU
  CXX_LDFLAGS_GPU=''
  AC_SUBST(CXX_LDFLAGS_GPU)

  dnl Tricky C++ linker flags
  CXX_LDFLAGS_HINTS=''
  AC_SUBST(CXX_LDFLAGS_HINTS)

  dnl C++ linker flags for optimization
  AC_ARG_VAR([CXX_LDFLAGS_OPTIM],
    [C++ linker flags for optimization])
  AC_SUBST(CXX_LDFLAGS_OPTIM)

  dnl C++ linker additional libraries
  AC_ARG_VAR([CXX_LIBS],
    [C++ linker additional libraries])
  AC_SUBST(CXX_LIBS)

  dnl C++ linker additional libraries for 64-bit objects
  CXX_LIBS_64BITS=''
  AC_SUBST(CXX_LIBS_64BITS)

  dnl C++ linker additional libraries for debugging
  AC_ARG_VAR([CXX_LIBS_DEBUG],
    [C++ linker additional libraries for debugging])
  AC_SUBST(CXX_LIBS_DEBUG)

  dnl C++ linker additional libraries
  AC_SUBST(CXX_LIBS_EXTRA)

  dnl C++ linker additional libraries for GPU
  CXX_LIBS_GPU=''
  AC_SUBST(CXX_LIBS_GPU)

  dnl Tricky C++ linker additional libraries
  CXX_LIBS_HINTS=''
  AC_SUBST(CXX_LIBS_HINTS)

  dnl C++ linker additional libraries for optimization
  AC_ARG_VAR([CXX_LIBS_OPTIM],
    [C++ linker additional libraries for optimization])
  AC_SUBST(CXX_LIBS_OPTIM)

  dnl C preprocessor definitions

  dnl Fortran 77 compiler

  dnl Fortran compiler

  dnl Fortran compiler flags
  AC_SUBST(FCFLAGS)

  dnl Fortran flags for 64-bit objects
  FCFLAGS_64BITS=''
  AC_SUBST(FCFLAGS_64BITS)

  dnl Fortran compiler flags for debugging
  AC_ARG_VAR([FCFLAGS_DEBUG],
    [Fortran compiler flags for debugging])
  AC_SUBST(FCFLAGS_DEBUG)

  dnl Additional Fortran compiler flags
  AC_ARG_VAR([FCFLAGS_EXTRA],
    [Additional Fortran compiler flags])
  AC_SUBST(FCFLAGS_EXTRA)

  dnl Fortran flags for fixed-form source files
  AC_ARG_VAR([FCFLAGS_FIXEDFORM],
    [Fortran flags for fixed-form source files])
  AC_SUBST(FCFLAGS_FIXEDFORM)

  dnl Fortran flags for free-form source files
  AC_ARG_VAR([FCFLAGS_FREEFORM],
    [Fortran flags for free-form source files])
  AC_SUBST(FCFLAGS_FREEFORM)

  dnl Tricky Fortran compiler flags
  AC_ARG_VAR([FCFLAGS_HINTS],
    [Tricky Fortran compiler flags])
  AC_SUBST(FCFLAGS_HINTS)

  dnl Fortran compiler flags to use a module directory
  AC_ARG_VAR([FCFLAGS_MODDIR],
    [Fortran compiler flags to use a module directory])
  AC_SUBST(FCFLAGS_MODDIR)

  dnl Fortran compiler flags to enable openmp
  AC_ARG_VAR([FCFLAGS_OPENMP],
    [Fortran compiler flags to enable openmp])
  AC_SUBST(FCFLAGS_OPENMP)

  dnl Fortran compiler flags for optimization
  AC_ARG_VAR([FCFLAGS_OPTIM],
    [Fortran compiler flags for optimization])
  AC_SUBST(FCFLAGS_OPTIM)

  dnl Fortran linker flags
  AC_ARG_VAR([FC_LDFLAGS],
    [Fortran linker flags])

  dnl Fortran linker flags for 64-bit objects
  FC_LDFLAGS_64BITS=''
  AC_SUBST(FC_LDFLAGS_64BITS)

  dnl Fortran linker flags for debugging
  AC_ARG_VAR([FC_LDFLAGS_DEBUG],
    [Fortran linker flags for debugging])
  AC_SUBST(FC_LDFLAGS_DEBUG)

  dnl Additional Fortran linker flags
  AC_ARG_VAR([FC_LDFLAGS_EXTRA],
    [Additional Fortran linker flags])
  AC_SUBST(FC_LDFLAGS_EXTRA)

  dnl Tricky Fortran linker flags
  FC_LDFLAGS_HINTS=''
  AC_SUBST(FC_LDFLAGS_HINTS)

  dnl Fortran linker flags for optimization
  AC_ARG_VAR([FC_LDFLAGS_OPTIM],
    [Fortran linker flags for optimization])
  AC_SUBST(FC_LDFLAGS_OPTIM)

  dnl Fortran linker additional libraries
  AC_ARG_VAR([FC_LIBS],
    [Fortran linker additional libraries])
  AC_SUBST(FC_LIBS)

  dnl Fortran linker additional libraries for 64-bit objects
  FC_LIBS_64BITS=''
  AC_SUBST(FC_LIBS_64BITS)

  dnl Fortran linker additional libraries for debugging
  AC_ARG_VAR([FC_LIBS_DEBUG],
    [Fortran linker additional libraries for debugging])
  AC_SUBST(FC_LIBS_DEBUG)

  dnl Fortran linker additional libraries
  AC_SUBST(FC_LIBS_EXTRA)

  dnl Tricky Fortran linker additional libraries
  FC_LIBS_HINTS=''
  AC_SUBST(FC_LIBS_HINTS)

  dnl Fortran linker additional libraries for optimization
  AC_ARG_VAR([FC_LIBS_OPTIM],
    [Fortran linker additional libraries for optimization])
  AC_SUBST(FC_LIBS_OPTIM)

  dnl Fortran preprocessor
  AC_ARG_VAR([FPP],
    [Fortran preprocessor])
  AC_SUBST(FPP)

  dnl Fortran preprocessor flags
  AC_ARG_VAR([FPPFLAGS],
    [Fortran preprocessor flags])
  AC_SUBST(FPPFLAGS)

  dnl Fortran preprocessor flags for debugging
  AC_ARG_VAR([FPPFLAGS_DEBUG],
    [Fortran preprocessor flags for debugging])
  AC_SUBST(FPPFLAGS_DEBUG)

  dnl Additional Fortran preprocessor flags
  AC_ARG_VAR([FPPFLAGS_EXTRA],
    [Additional Fortran preprocessor flags])
  AC_SUBST(FPPFLAGS_EXTRA)

  dnl Tricky Fortran preprocessor flags
  FPPFLAGS_HINTS=''
  AC_SUBST(FPPFLAGS_HINTS)

  dnl Fortran preprocessor flags for optimization
  AC_ARG_VAR([FPPFLAGS_OPTIM],
    [Fortran preprocessor flags for optimization])
  AC_SUBST(FPPFLAGS_OPTIM)

  dnl Linker

  dnl LaTeX flags
  AC_SUBST(LTXFLAGS)

  dnl Markdown text-to-HTML processor flags
  AC_SUBST(MDFLAGS)

  dnl Fortran module extension
  MODEXT=''
  AC_SUBST(MODEXT)

  dnl MPI runner command
  AC_ARG_VAR([MPI_RUNNER],
    [MPI runner command])
  AC_SUBST(MPI_RUNNER)

  dnl List symbols from object files

  dnl nVidia CUDA C compiler
  AC_SUBST(NVCC)

  dnl nVidia CUDA C compiler flags
  AC_SUBST(NVCC_CFLAGS)

  dnl nVidia CUDA preprocessing options
  AC_SUBST(NVCC_CPPFLAGS)

  dnl nVidia CUDA C linker flags
  AC_SUBST(NVCC_LDFLAGS)

  dnl nVidia CUDA C linker additional libraries
  AC_SUBST(NVCC_LIBS)

  dnl DVI->PDF converter flags
  AC_SUBST(PDFFLAGS)

  dnl Execution flags for the Python interpreter
  AC_ARG_VAR([PYFLAGS],
    [Execution flags for the Python interpreter])
  AC_SUBST(PYFLAGS)

  dnl C preprocessing flags for C/Python bindings
  AC_ARG_VAR([PYTHON_CPPFLAGS],
    [C preprocessing flags for C/Python bindings])
  AC_SUBST(PYTHON_CPPFLAGS)

  dnl Generate index to archive

  dnl Serial runner command
  AC_ARG_VAR([SERIAL_RUNNER],
    [Serial runner command])
  AC_SUBST(SERIAL_RUNNER)

  dnl True stand-alone C preprocessor for use with Fortran wrappers
  TRUE_CPP=''

  dnl C++ preprocessor
  AC_ARG_VAR([XPP],
    [C++ preprocessor])
  AC_SUBST(XPP)

  dnl C++ preprocessor flags
  AC_ARG_VAR([XPPFLAGS],
    [C++ preprocessor flags])
  AC_SUBST(XPPFLAGS)

  dnl C++ preprocessor flags for debugging
  AC_ARG_VAR([XPPFLAGS_DEBUG],
    [C++ preprocessor flags for debugging])
  AC_SUBST(XPPFLAGS_DEBUG)

  dnl Additional C++ preprocessor flags
  AC_ARG_VAR([XPPFLAGS_EXTRA],
    [Additional C++ preprocessor flags])
  AC_SUBST(XPPFLAGS_EXTRA)

  dnl C++ preprocessor flags for optimization
  AC_ARG_VAR([XPPFLAGS_OPTIM],
    [C++ preprocessor flags for optimization])
  AC_SUBST(XPPFLAGS_OPTIM)

])
m4trace:config/m4/auto-env.m4:543: -1- AC_DEFUN([ABI_ENV_BACKUP], [
  dnl All variables will be saved, yet please note that they may be
  dnl conditionally restored (see ABI_ENV_RECALL for details).

  dnl Save CPPFLAGS holder to permit C/Fortran mixing
  abi_env_ABI_CPPFLAGS="${ABI_CPPFLAGS}"

  dnl Save Library archiver
  abi_env_AR="${AR}"

  dnl Save Library archiver flags
  abi_env_ARFLAGS="${ARFLAGS}"

  dnl Save Library archiver flags for 64-bit objects
  abi_env_ARFLAGS_64BITS="${ARFLAGS_64BITS}"

  dnl Save Library archiver commands
  abi_env_ARFLAGS_CMD="${ARFLAGS_CMD}"

  dnl Save Library archiver flags for debugging
  abi_env_ARFLAGS_DEBUG="${ARFLAGS_DEBUG}"

  dnl Save Additional library archiver flags
  abi_env_ARFLAGS_EXTRA="${ARFLAGS_EXTRA}"

  dnl Save Tricky library archiver flags
  abi_env_ARFLAGS_HINTS="${ARFLAGS_HINTS}"

  dnl Save Library archiver flags for optimization
  abi_env_ARFLAGS_OPTIM="${ARFLAGS_OPTIM}"

  dnl Save C compiler
  abi_env_CC="${CC}"

  dnl Save C linker flags
  abi_env_CC_LDFLAGS="${CC_LDFLAGS}"

  dnl Save C linker flags for 64-bit objects
  abi_env_CC_LDFLAGS_64BITS="${CC_LDFLAGS_64BITS}"

  dnl Save C linker flags for debugging
  abi_env_CC_LDFLAGS_DEBUG="${CC_LDFLAGS_DEBUG}"

  dnl Save Additional C linker flags
  abi_env_CC_LDFLAGS_EXTRA="${CC_LDFLAGS_EXTRA}"

  dnl Save C linker flags for GPU
  abi_env_CC_LDFLAGS_GPU="${CC_LDFLAGS_GPU}"

  dnl Save Tricky C linker flags
  abi_env_CC_LDFLAGS_HINTS="${CC_LDFLAGS_HINTS}"

  dnl Save C linker flags for optimization
  abi_env_CC_LDFLAGS_OPTIM="${CC_LDFLAGS_OPTIM}"

  dnl Save C linker libraries
  abi_env_CC_LIBS="${CC_LIBS}"

  dnl Save C linker additional libraries for 64-bit objects
  abi_env_CC_LIBS_64BITS="${CC_LIBS_64BITS}"

  dnl Save C linker additional libraries for debugging
  abi_env_CC_LIBS_DEBUG="${CC_LIBS_DEBUG}"

  dnl Save C linker additional libraries
  abi_env_CC_LIBS_EXTRA="${CC_LIBS_EXTRA}"

  dnl Save C linker additional libraries for GPU
  abi_env_CC_LIBS_GPU="${CC_LIBS_GPU}"

  dnl Save Tricky C linker additional libraries
  abi_env_CC_LIBS_HINTS="${CC_LIBS_HINTS}"

  dnl Save C linker additional libraries for optimization
  abi_env_CC_LIBS_OPTIM="${CC_LIBS_OPTIM}"

  dnl Save C compiler flags
  abi_env_CFLAGS="${CFLAGS}"

  dnl Save C flags for 64-bit objects
  abi_env_CFLAGS_64BITS="${CFLAGS_64BITS}"

  dnl Save C compiler flags for debugging
  abi_env_CFLAGS_DEBUG="${CFLAGS_DEBUG}"

  dnl Save Additional C compiler flags
  abi_env_CFLAGS_EXTRA="${CFLAGS_EXTRA}"

  dnl Save C flags for GPU
  abi_env_CFLAGS_GPU="${CFLAGS_GPU}"

  dnl Save Tricky C compiler flags
  abi_env_CFLAGS_HINTS="${CFLAGS_HINTS}"

  dnl Save C compiler flags for optimization
  abi_env_CFLAGS_OPTIM="${CFLAGS_OPTIM}"

  dnl Save C preprocessor
  abi_env_CPP="${CPP}"

  dnl Save C preprocessor flags
  abi_env_CPPFLAGS="${CPPFLAGS}"

  dnl Save C preprocessor flags for 64-bit objects
  abi_env_CPPFLAGS_64BITS="${CPPFLAGS_64BITS}"

  dnl Save C preprocessor flags for debugging
  abi_env_CPPFLAGS_DEBUG="${CPPFLAGS_DEBUG}"

  dnl Save Additional C preprocessor flags
  abi_env_CPPFLAGS_EXTRA="${CPPFLAGS_EXTRA}"

  dnl Save C preprocessor flags for GPU
  abi_env_CPPFLAGS_GPU="${CPPFLAGS_GPU}"

  dnl Save Tricky C preprocessor flags
  abi_env_CPPFLAGS_HINTS="${CPPFLAGS_HINTS}"

  dnl Save C preprocessor flags for optimization
  abi_env_CPPFLAGS_OPTIM="${CPPFLAGS_OPTIM}"

  dnl Save C++ compiler
  abi_env_CXX="${CXX}"

  dnl Save C++ compiler flags
  abi_env_CXXFLAGS="${CXXFLAGS}"

  dnl Save C++ flags for 64-bit objects
  abi_env_CXXFLAGS_64BITS="${CXXFLAGS_64BITS}"

  dnl Save C++ compiler flags for debugging
  abi_env_CXXFLAGS_DEBUG="${CXXFLAGS_DEBUG}"

  dnl Save Additional C++ compiler flags
  abi_env_CXXFLAGS_EXTRA="${CXXFLAGS_EXTRA}"

  dnl Save C++ flags for GPU
  abi_env_CXXFLAGS_GPU="${CXXFLAGS_GPU}"

  dnl Save Tricky C++ compiler flags
  abi_env_CXXFLAGS_HINTS="${CXXFLAGS_HINTS}"

  dnl Save C++ compiler flags for optimization
  abi_env_CXXFLAGS_OPTIM="${CXXFLAGS_OPTIM}"

  dnl Save C++ linker flags
  abi_env_CXX_LDFLAGS="${CXX_LDFLAGS}"

  dnl Save C++ linker flags for 64-bit objects
  abi_env_CXX_LDFLAGS_64BITS="${CXX_LDFLAGS_64BITS}"

  dnl Save C++ linker flags for debugging
  abi_env_CXX_LDFLAGS_DEBUG="${CXX_LDFLAGS_DEBUG}"

  dnl Save Additional C++ linker flags
  abi_env_CXX_LDFLAGS_EXTRA="${CXX_LDFLAGS_EXTRA}"

  dnl Save C++ linker flags for GPU
  abi_env_CXX_LDFLAGS_GPU="${CXX_LDFLAGS_GPU}"

  dnl Save Tricky C++ linker flags
  abi_env_CXX_LDFLAGS_HINTS="${CXX_LDFLAGS_HINTS}"

  dnl Save C++ linker flags for optimization
  abi_env_CXX_LDFLAGS_OPTIM="${CXX_LDFLAGS_OPTIM}"

  dnl Save C++ linker additional libraries
  abi_env_CXX_LIBS="${CXX_LIBS}"

  dnl Save C++ linker additional libraries for 64-bit objects
  abi_env_CXX_LIBS_64BITS="${CXX_LIBS_64BITS}"

  dnl Save C++ linker additional libraries for debugging
  abi_env_CXX_LIBS_DEBUG="${CXX_LIBS_DEBUG}"

  dnl Save C++ linker additional libraries
  abi_env_CXX_LIBS_EXTRA="${CXX_LIBS_EXTRA}"

  dnl Save C++ linker additional libraries for GPU
  abi_env_CXX_LIBS_GPU="${CXX_LIBS_GPU}"

  dnl Save Tricky C++ linker additional libraries
  abi_env_CXX_LIBS_HINTS="${CXX_LIBS_HINTS}"

  dnl Save C++ linker additional libraries for optimization
  abi_env_CXX_LIBS_OPTIM="${CXX_LIBS_OPTIM}"

  dnl Save C preprocessor definitions
  abi_env_DEFS="${DEFS}"

  dnl Save Fortran 77 compiler
  abi_env_F77="${F77}"

  dnl Save Fortran compiler
  abi_env_FC="${FC}"

  dnl Save Fortran compiler flags
  abi_env_FCFLAGS="${FCFLAGS}"

  dnl Save Fortran flags for 64-bit objects
  abi_env_FCFLAGS_64BITS="${FCFLAGS_64BITS}"

  dnl Save Fortran compiler flags for debugging
  abi_env_FCFLAGS_DEBUG="${FCFLAGS_DEBUG}"

  dnl Save Additional Fortran compiler flags
  abi_env_FCFLAGS_EXTRA="${FCFLAGS_EXTRA}"

  dnl Save Fortran flags for fixed-form source files
  abi_env_FCFLAGS_FIXEDFORM="${FCFLAGS_FIXEDFORM}"

  dnl Save Fortran flags for free-form source files
  abi_env_FCFLAGS_FREEFORM="${FCFLAGS_FREEFORM}"

  dnl Save Tricky Fortran compiler flags
  abi_env_FCFLAGS_HINTS="${FCFLAGS_HINTS}"

  dnl Save Fortran compiler flags to use a module directory
  abi_env_FCFLAGS_MODDIR="${FCFLAGS_MODDIR}"

  dnl Save Fortran compiler flags to enable openmp
  abi_env_FCFLAGS_OPENMP="${FCFLAGS_OPENMP}"

  dnl Save Fortran compiler flags for optimization
  abi_env_FCFLAGS_OPTIM="${FCFLAGS_OPTIM}"

  dnl Save Fortran linker flags
  abi_env_FC_LDFLAGS="${FC_LDFLAGS}"

  dnl Save Fortran linker flags for 64-bit objects
  abi_env_FC_LDFLAGS_64BITS="${FC_LDFLAGS_64BITS}"

  dnl Save Fortran linker flags for debugging
  abi_env_FC_LDFLAGS_DEBUG="${FC_LDFLAGS_DEBUG}"

  dnl Save Additional Fortran linker flags
  abi_env_FC_LDFLAGS_EXTRA="${FC_LDFLAGS_EXTRA}"

  dnl Save Tricky Fortran linker flags
  abi_env_FC_LDFLAGS_HINTS="${FC_LDFLAGS_HINTS}"

  dnl Save Fortran linker flags for optimization
  abi_env_FC_LDFLAGS_OPTIM="${FC_LDFLAGS_OPTIM}"

  dnl Save Fortran linker additional libraries
  abi_env_FC_LIBS="${FC_LIBS}"

  dnl Save Fortran linker additional libraries for 64-bit objects
  abi_env_FC_LIBS_64BITS="${FC_LIBS_64BITS}"

  dnl Save Fortran linker additional libraries for debugging
  abi_env_FC_LIBS_DEBUG="${FC_LIBS_DEBUG}"

  dnl Save Fortran linker additional libraries
  abi_env_FC_LIBS_EXTRA="${FC_LIBS_EXTRA}"

  dnl Save Tricky Fortran linker additional libraries
  abi_env_FC_LIBS_HINTS="${FC_LIBS_HINTS}"

  dnl Save Fortran linker additional libraries for optimization
  abi_env_FC_LIBS_OPTIM="${FC_LIBS_OPTIM}"

  dnl Save Fortran preprocessor
  abi_env_FPP="${FPP}"

  dnl Save Fortran preprocessor flags
  abi_env_FPPFLAGS="${FPPFLAGS}"

  dnl Save Fortran preprocessor flags for debugging
  abi_env_FPPFLAGS_DEBUG="${FPPFLAGS_DEBUG}"

  dnl Save Additional Fortran preprocessor flags
  abi_env_FPPFLAGS_EXTRA="${FPPFLAGS_EXTRA}"

  dnl Save Tricky Fortran preprocessor flags
  abi_env_FPPFLAGS_HINTS="${FPPFLAGS_HINTS}"

  dnl Save Fortran preprocessor flags for optimization
  abi_env_FPPFLAGS_OPTIM="${FPPFLAGS_OPTIM}"

  dnl Save Linker
  abi_env_LD="${LD}"

  dnl Save LaTeX flags
  abi_env_LTXFLAGS="${LTXFLAGS}"

  dnl Save Markdown text-to-HTML processor flags
  abi_env_MDFLAGS="${MDFLAGS}"

  dnl Save Fortran module extension
  abi_env_MODEXT="${MODEXT}"

  dnl Save MPI runner command
  abi_env_MPI_RUNNER="${MPI_RUNNER}"

  dnl Save List symbols from object files
  abi_env_NM="${NM}"

  dnl Save nVidia CUDA C compiler
  abi_env_NVCC="${NVCC}"

  dnl Save nVidia CUDA C compiler flags
  abi_env_NVCC_CFLAGS="${NVCC_CFLAGS}"

  dnl Save nVidia CUDA preprocessing options
  abi_env_NVCC_CPPFLAGS="${NVCC_CPPFLAGS}"

  dnl Save nVidia CUDA C linker flags
  abi_env_NVCC_LDFLAGS="${NVCC_LDFLAGS}"

  dnl Save nVidia CUDA C linker additional libraries
  abi_env_NVCC_LIBS="${NVCC_LIBS}"

  dnl Save DVI->PDF converter flags
  abi_env_PDFFLAGS="${PDFFLAGS}"

  dnl Save Execution flags for the Python interpreter
  abi_env_PYFLAGS="${PYFLAGS}"

  dnl Save C preprocessing flags for C/Python bindings
  abi_env_PYTHON_CPPFLAGS="${PYTHON_CPPFLAGS}"

  dnl Save Generate index to archive
  abi_env_RANLIB="${RANLIB}"

  dnl Save Serial runner command
  abi_env_SERIAL_RUNNER="${SERIAL_RUNNER}"

  dnl Save True stand-alone C preprocessor for use with Fortran wrappers
  abi_env_TRUE_CPP="${TRUE_CPP}"

  dnl Save C++ preprocessor
  abi_env_XPP="${XPP}"

  dnl Save C++ preprocessor flags
  abi_env_XPPFLAGS="${XPPFLAGS}"

  dnl Save C++ preprocessor flags for debugging
  abi_env_XPPFLAGS_DEBUG="${XPPFLAGS_DEBUG}"

  dnl Save Additional C++ preprocessor flags
  abi_env_XPPFLAGS_EXTRA="${XPPFLAGS_EXTRA}"

  dnl Save C++ preprocessor flags for optimization
  abi_env_XPPFLAGS_OPTIM="${XPPFLAGS_OPTIM}"

])
m4trace:config/m4/auto-env.m4:898: -1- AC_DEFUN([ABI_ENV_RECALL], [
  dnl The following ensures that non-empty environment variables always override
  dnl what is read from the config files.

  dnl Recall CPPFLAGS holder to permit C/Fortran mixing
  if test "${abi_env_ABI_CPPFLAGS}" != ""; then
    test "${ABI_CPPFLAGS}" != "${abi_env_ABI_CPPFLAGS}" && \
      AC_MSG_NOTICE([overriding configuration of ABI_CPPFLAGS from environment])
    ABI_CPPFLAGS="${abi_env_ABI_CPPFLAGS}"
  fi

  dnl Recall Library archiver
  if test "${abi_env_AR}" != ""; then
    test "${AR}" != "${abi_env_AR}" && \
      AC_MSG_NOTICE([overriding configuration of AR from environment])
    AR="${abi_env_AR}"
  fi

  dnl Recall Library archiver flags
  if test "${abi_env_ARFLAGS}" != ""; then
    test "${ARFLAGS}" != "${abi_env_ARFLAGS}" && \
      AC_MSG_NOTICE([overriding configuration of ARFLAGS from environment])
    ARFLAGS="${abi_env_ARFLAGS}"
  fi

  dnl Recall Library archiver flags for 64-bit objects
  if test "${abi_env_ARFLAGS_64BITS}" != ""; then
    test "${ARFLAGS_64BITS}" != "${abi_env_ARFLAGS_64BITS}" && \
      AC_MSG_NOTICE([overriding configuration of ARFLAGS_64BITS from environment])
    ARFLAGS_64BITS="${abi_env_ARFLAGS_64BITS}"
  fi

  dnl Recall Library archiver commands
  if test "${abi_env_ARFLAGS_CMD}" != ""; then
    test "${ARFLAGS_CMD}" != "${abi_env_ARFLAGS_CMD}" && \
      AC_MSG_NOTICE([overriding configuration of ARFLAGS_CMD from environment])
    ARFLAGS_CMD="${abi_env_ARFLAGS_CMD}"
  fi

  dnl Recall Library archiver flags for debugging
  if test "${abi_env_ARFLAGS_DEBUG}" != ""; then
    test "${ARFLAGS_DEBUG}" != "${abi_env_ARFLAGS_DEBUG}" && \
      AC_MSG_NOTICE([overriding configuration of ARFLAGS_DEBUG from environment])
    ARFLAGS_DEBUG="${abi_env_ARFLAGS_DEBUG}"
  fi

  dnl Recall Additional library archiver flags
  if test "${abi_env_ARFLAGS_EXTRA}" != ""; then
    test "${ARFLAGS_EXTRA}" != "${abi_env_ARFLAGS_EXTRA}" && \
      AC_MSG_NOTICE([overriding configuration of ARFLAGS_EXTRA from environment])
    ARFLAGS_EXTRA="${abi_env_ARFLAGS_EXTRA}"
  fi

  dnl Recall Tricky library archiver flags
  if test "${abi_env_ARFLAGS_HINTS}" != ""; then
    test "${ARFLAGS_HINTS}" != "${abi_env_ARFLAGS_HINTS}" && \
      AC_MSG_NOTICE([overriding configuration of ARFLAGS_HINTS from environment])
    ARFLAGS_HINTS="${abi_env_ARFLAGS_HINTS}"
  fi

  dnl Recall Library archiver flags for optimization
  if test "${abi_env_ARFLAGS_OPTIM}" != ""; then
    test "${ARFLAGS_OPTIM}" != "${abi_env_ARFLAGS_OPTIM}" && \
      AC_MSG_NOTICE([overriding configuration of ARFLAGS_OPTIM from environment])
    ARFLAGS_OPTIM="${abi_env_ARFLAGS_OPTIM}"
  fi

  dnl Recall C compiler
  if test "${abi_env_CC}" != ""; then
    test "${CC}" != "${abi_env_CC}" && \
      AC_MSG_NOTICE([overriding configuration of CC from environment])
    CC="${abi_env_CC}"
  fi

  dnl Recall C linker flags
  if test "${abi_env_CC_LDFLAGS}" != ""; then
    test "${CC_LDFLAGS}" != "${abi_env_CC_LDFLAGS}" && \
      AC_MSG_NOTICE([overriding configuration of CC_LDFLAGS from environment])
    CC_LDFLAGS="${abi_env_CC_LDFLAGS}"
  fi

  dnl Recall C linker flags for 64-bit objects
  if test "${abi_env_CC_LDFLAGS_64BITS}" != ""; then
    test "${CC_LDFLAGS_64BITS}" != "${abi_env_CC_LDFLAGS_64BITS}" && \
      AC_MSG_NOTICE([overriding configuration of CC_LDFLAGS_64BITS from environment])
    CC_LDFLAGS_64BITS="${abi_env_CC_LDFLAGS_64BITS}"
  fi

  dnl Recall C linker flags for debugging
  if test "${abi_env_CC_LDFLAGS_DEBUG}" != ""; then
    test "${CC_LDFLAGS_DEBUG}" != "${abi_env_CC_LDFLAGS_DEBUG}" && \
      AC_MSG_NOTICE([overriding configuration of CC_LDFLAGS_DEBUG from environment])
    CC_LDFLAGS_DEBUG="${abi_env_CC_LDFLAGS_DEBUG}"
  fi

  dnl Recall Additional C linker flags
  if test "${abi_env_CC_LDFLAGS_EXTRA}" != ""; then
    test "${CC_LDFLAGS_EXTRA}" != "${abi_env_CC_LDFLAGS_EXTRA}" && \
      AC_MSG_NOTICE([overriding configuration of CC_LDFLAGS_EXTRA from environment])
    CC_LDFLAGS_EXTRA="${abi_env_CC_LDFLAGS_EXTRA}"
  fi

  dnl Recall C linker flags for GPU
  if test "${abi_env_CC_LDFLAGS_GPU}" != ""; then
    test "${CC_LDFLAGS_GPU}" != "${abi_env_CC_LDFLAGS_GPU}" && \
      AC_MSG_NOTICE([overriding configuration of CC_LDFLAGS_GPU from environment])
    CC_LDFLAGS_GPU="${abi_env_CC_LDFLAGS_GPU}"
  fi

  dnl Recall Tricky C linker flags
  if test "${abi_env_CC_LDFLAGS_HINTS}" != ""; then
    test "${CC_LDFLAGS_HINTS}" != "${abi_env_CC_LDFLAGS_HINTS}" && \
      AC_MSG_NOTICE([overriding configuration of CC_LDFLAGS_HINTS from environment])
    CC_LDFLAGS_HINTS="${abi_env_CC_LDFLAGS_HINTS}"
  fi

  dnl Recall C linker flags for optimization
  if test "${abi_env_CC_LDFLAGS_OPTIM}" != ""; then
    test "${CC_LDFLAGS_OPTIM}" != "${abi_env_CC_LDFLAGS_OPTIM}" && \
      AC_MSG_NOTICE([overriding configuration of CC_LDFLAGS_OPTIM from environment])
    CC_LDFLAGS_OPTIM="${abi_env_CC_LDFLAGS_OPTIM}"
  fi

  dnl Recall C linker libraries
  if test "${abi_env_CC_LIBS}" != ""; then
    test "${CC_LIBS}" != "${abi_env_CC_LIBS}" && \
      AC_MSG_NOTICE([overriding configuration of CC_LIBS from environment])
    CC_LIBS="${abi_env_CC_LIBS}"
  fi

  dnl Recall C linker additional libraries for 64-bit objects
  if test "${abi_env_CC_LIBS_64BITS}" != ""; then
    test "${CC_LIBS_64BITS}" != "${abi_env_CC_LIBS_64BITS}" && \
      AC_MSG_NOTICE([overriding configuration of CC_LIBS_64BITS from environment])
    CC_LIBS_64BITS="${abi_env_CC_LIBS_64BITS}"
  fi

  dnl Recall C linker additional libraries for debugging
  if test "${abi_env_CC_LIBS_DEBUG}" != ""; then
    test "${CC_LIBS_DEBUG}" != "${abi_env_CC_LIBS_DEBUG}" && \
      AC_MSG_NOTICE([overriding configuration of CC_LIBS_DEBUG from environment])
    CC_LIBS_DEBUG="${abi_env_CC_LIBS_DEBUG}"
  fi

  dnl Recall C linker additional libraries
  if test "${abi_env_CC_LIBS_EXTRA}" != ""; then
    test "${CC_LIBS_EXTRA}" != "${abi_env_CC_LIBS_EXTRA}" && \
      AC_MSG_NOTICE([overriding configuration of CC_LIBS_EXTRA from environment])
    CC_LIBS_EXTRA="${abi_env_CC_LIBS_EXTRA}"
  fi

  dnl Recall C linker additional libraries for GPU
  if test "${abi_env_CC_LIBS_GPU}" != ""; then
    test "${CC_LIBS_GPU}" != "${abi_env_CC_LIBS_GPU}" && \
      AC_MSG_NOTICE([overriding configuration of CC_LIBS_GPU from environment])
    CC_LIBS_GPU="${abi_env_CC_LIBS_GPU}"
  fi

  dnl Recall Tricky C linker additional libraries
  if test "${abi_env_CC_LIBS_HINTS}" != ""; then
    test "${CC_LIBS_HINTS}" != "${abi_env_CC_LIBS_HINTS}" && \
      AC_MSG_NOTICE([overriding configuration of CC_LIBS_HINTS from environment])
    CC_LIBS_HINTS="${abi_env_CC_LIBS_HINTS}"
  fi

  dnl Recall C linker additional libraries for optimization
  if test "${abi_env_CC_LIBS_OPTIM}" != ""; then
    test "${CC_LIBS_OPTIM}" != "${abi_env_CC_LIBS_OPTIM}" && \
      AC_MSG_NOTICE([overriding configuration of CC_LIBS_OPTIM from environment])
    CC_LIBS_OPTIM="${abi_env_CC_LIBS_OPTIM}"
  fi

  dnl Recall C compiler flags
  if test "${abi_env_CFLAGS}" != ""; then
    test "${CFLAGS}" != "${abi_env_CFLAGS}" && \
      AC_MSG_NOTICE([overriding configuration of CFLAGS from environment])
    CFLAGS="${abi_env_CFLAGS}"
  fi

  dnl Recall C flags for 64-bit objects
  if test "${abi_env_CFLAGS_64BITS}" != ""; then
    test "${CFLAGS_64BITS}" != "${abi_env_CFLAGS_64BITS}" && \
      AC_MSG_NOTICE([overriding configuration of CFLAGS_64BITS from environment])
    CFLAGS_64BITS="${abi_env_CFLAGS_64BITS}"
  fi

  dnl Recall C compiler flags for debugging
  if test "${abi_env_CFLAGS_DEBUG}" != ""; then
    test "${CFLAGS_DEBUG}" != "${abi_env_CFLAGS_DEBUG}" && \
      AC_MSG_NOTICE([overriding configuration of CFLAGS_DEBUG from environment])
    CFLAGS_DEBUG="${abi_env_CFLAGS_DEBUG}"
  fi

  dnl Recall Additional C compiler flags
  if test "${abi_env_CFLAGS_EXTRA}" != ""; then
    test "${CFLAGS_EXTRA}" != "${abi_env_CFLAGS_EXTRA}" && \
      AC_MSG_NOTICE([overriding configuration of CFLAGS_EXTRA from environment])
    CFLAGS_EXTRA="${abi_env_CFLAGS_EXTRA}"
  fi

  dnl Recall C flags for GPU
  if test "${abi_env_CFLAGS_GPU}" != ""; then
    test "${CFLAGS_GPU}" != "${abi_env_CFLAGS_GPU}" && \
      AC_MSG_NOTICE([overriding configuration of CFLAGS_GPU from environment])
    CFLAGS_GPU="${abi_env_CFLAGS_GPU}"
  fi

  dnl Recall Tricky C compiler flags
  if test "${abi_env_CFLAGS_HINTS}" != ""; then
    test "${CFLAGS_HINTS}" != "${abi_env_CFLAGS_HINTS}" && \
      AC_MSG_NOTICE([overriding configuration of CFLAGS_HINTS from environment])
    CFLAGS_HINTS="${abi_env_CFLAGS_HINTS}"
  fi

  dnl Recall C compiler flags for optimization
  if test "${abi_env_CFLAGS_OPTIM}" != ""; then
    test "${CFLAGS_OPTIM}" != "${abi_env_CFLAGS_OPTIM}" && \
      AC_MSG_NOTICE([overriding configuration of CFLAGS_OPTIM from environment])
    CFLAGS_OPTIM="${abi_env_CFLAGS_OPTIM}"
  fi

  dnl Recall C preprocessor
  if test "${abi_env_CPP}" != ""; then
    test "${CPP}" != "${abi_env_CPP}" && \
      AC_MSG_NOTICE([overriding configuration of CPP from environment])
    CPP="${abi_env_CPP}"
  fi

  dnl Recall C preprocessor flags
  if test "${abi_env_CPPFLAGS}" != ""; then
    test "${CPPFLAGS}" != "${abi_env_CPPFLAGS}" && \
      AC_MSG_NOTICE([overriding configuration of CPPFLAGS from environment])
    CPPFLAGS="${abi_env_CPPFLAGS}"
  fi

  dnl Recall C preprocessor flags for 64-bit objects
  if test "${abi_env_CPPFLAGS_64BITS}" != ""; then
    test "${CPPFLAGS_64BITS}" != "${abi_env_CPPFLAGS_64BITS}" && \
      AC_MSG_NOTICE([overriding configuration of CPPFLAGS_64BITS from environment])
    CPPFLAGS_64BITS="${abi_env_CPPFLAGS_64BITS}"
  fi

  dnl Recall C preprocessor flags for debugging
  if test "${abi_env_CPPFLAGS_DEBUG}" != ""; then
    test "${CPPFLAGS_DEBUG}" != "${abi_env_CPPFLAGS_DEBUG}" && \
      AC_MSG_NOTICE([overriding configuration of CPPFLAGS_DEBUG from environment])
    CPPFLAGS_DEBUG="${abi_env_CPPFLAGS_DEBUG}"
  fi

  dnl Recall Additional C preprocessor flags
  if test "${abi_env_CPPFLAGS_EXTRA}" != ""; then
    test "${CPPFLAGS_EXTRA}" != "${abi_env_CPPFLAGS_EXTRA}" && \
      AC_MSG_NOTICE([overriding configuration of CPPFLAGS_EXTRA from environment])
    CPPFLAGS_EXTRA="${abi_env_CPPFLAGS_EXTRA}"
  fi

  dnl Recall C preprocessor flags for GPU
  if test "${abi_env_CPPFLAGS_GPU}" != ""; then
    test "${CPPFLAGS_GPU}" != "${abi_env_CPPFLAGS_GPU}" && \
      AC_MSG_NOTICE([overriding configuration of CPPFLAGS_GPU from environment])
    CPPFLAGS_GPU="${abi_env_CPPFLAGS_GPU}"
  fi

  dnl Recall Tricky C preprocessor flags
  if test "${abi_env_CPPFLAGS_HINTS}" != ""; then
    test "${CPPFLAGS_HINTS}" != "${abi_env_CPPFLAGS_HINTS}" && \
      AC_MSG_NOTICE([overriding configuration of CPPFLAGS_HINTS from environment])
    CPPFLAGS_HINTS="${abi_env_CPPFLAGS_HINTS}"
  fi

  dnl Recall C preprocessor flags for optimization
  if test "${abi_env_CPPFLAGS_OPTIM}" != ""; then
    test "${CPPFLAGS_OPTIM}" != "${abi_env_CPPFLAGS_OPTIM}" && \
      AC_MSG_NOTICE([overriding configuration of CPPFLAGS_OPTIM from environment])
    CPPFLAGS_OPTIM="${abi_env_CPPFLAGS_OPTIM}"
  fi

  dnl Recall C++ compiler
  if test "${abi_env_CXX}" != ""; then
    test "${CXX}" != "${abi_env_CXX}" && \
      AC_MSG_NOTICE([overriding configuration of CXX from environment])
    CXX="${abi_env_CXX}"
  fi

  dnl Recall C++ compiler flags
  if test "${abi_env_CXXFLAGS}" != ""; then
    test "${CXXFLAGS}" != "${abi_env_CXXFLAGS}" && \
      AC_MSG_NOTICE([overriding configuration of CXXFLAGS from environment])
    CXXFLAGS="${abi_env_CXXFLAGS}"
  fi

  dnl Recall C++ flags for 64-bit objects
  if test "${abi_env_CXXFLAGS_64BITS}" != ""; then
    test "${CXXFLAGS_64BITS}" != "${abi_env_CXXFLAGS_64BITS}" && \
      AC_MSG_NOTICE([overriding configuration of CXXFLAGS_64BITS from environment])
    CXXFLAGS_64BITS="${abi_env_CXXFLAGS_64BITS}"
  fi

  dnl Recall C++ compiler flags for debugging
  if test "${abi_env_CXXFLAGS_DEBUG}" != ""; then
    test "${CXXFLAGS_DEBUG}" != "${abi_env_CXXFLAGS_DEBUG}" && \
      AC_MSG_NOTICE([overriding configuration of CXXFLAGS_DEBUG from environment])
    CXXFLAGS_DEBUG="${abi_env_CXXFLAGS_DEBUG}"
  fi

  dnl Recall Additional C++ compiler flags
  if test "${abi_env_CXXFLAGS_EXTRA}" != ""; then
    test "${CXXFLAGS_EXTRA}" != "${abi_env_CXXFLAGS_EXTRA}" && \
      AC_MSG_NOTICE([overriding configuration of CXXFLAGS_EXTRA from environment])
    CXXFLAGS_EXTRA="${abi_env_CXXFLAGS_EXTRA}"
  fi

  dnl Recall C++ flags for GPU
  if test "${abi_env_CXXFLAGS_GPU}" != ""; then
    test "${CXXFLAGS_GPU}" != "${abi_env_CXXFLAGS_GPU}" && \
      AC_MSG_NOTICE([overriding configuration of CXXFLAGS_GPU from environment])
    CXXFLAGS_GPU="${abi_env_CXXFLAGS_GPU}"
  fi

  dnl Recall Tricky C++ compiler flags
  if test "${abi_env_CXXFLAGS_HINTS}" != ""; then
    test "${CXXFLAGS_HINTS}" != "${abi_env_CXXFLAGS_HINTS}" && \
      AC_MSG_NOTICE([overriding configuration of CXXFLAGS_HINTS from environment])
    CXXFLAGS_HINTS="${abi_env_CXXFLAGS_HINTS}"
  fi

  dnl Recall C++ compiler flags for optimization
  if test "${abi_env_CXXFLAGS_OPTIM}" != ""; then
    test "${CXXFLAGS_OPTIM}" != "${abi_env_CXXFLAGS_OPTIM}" && \
      AC_MSG_NOTICE([overriding configuration of CXXFLAGS_OPTIM from environment])
    CXXFLAGS_OPTIM="${abi_env_CXXFLAGS_OPTIM}"
  fi

  dnl Recall C++ linker flags
  if test "${abi_env_CXX_LDFLAGS}" != ""; then
    test "${CXX_LDFLAGS}" != "${abi_env_CXX_LDFLAGS}" && \
      AC_MSG_NOTICE([overriding configuration of CXX_LDFLAGS from environment])
    CXX_LDFLAGS="${abi_env_CXX_LDFLAGS}"
  fi

  dnl Recall C++ linker flags for 64-bit objects
  if test "${abi_env_CXX_LDFLAGS_64BITS}" != ""; then
    test "${CXX_LDFLAGS_64BITS}" != "${abi_env_CXX_LDFLAGS_64BITS}" && \
      AC_MSG_NOTICE([overriding configuration of CXX_LDFLAGS_64BITS from environment])
    CXX_LDFLAGS_64BITS="${abi_env_CXX_LDFLAGS_64BITS}"
  fi

  dnl Recall C++ linker flags for debugging
  if test "${abi_env_CXX_LDFLAGS_DEBUG}" != ""; then
    test "${CXX_LDFLAGS_DEBUG}" != "${abi_env_CXX_LDFLAGS_DEBUG}" && \
      AC_MSG_NOTICE([overriding configuration of CXX_LDFLAGS_DEBUG from environment])
    CXX_LDFLAGS_DEBUG="${abi_env_CXX_LDFLAGS_DEBUG}"
  fi

  dnl Recall Additional C++ linker flags
  if test "${abi_env_CXX_LDFLAGS_EXTRA}" != ""; then
    test "${CXX_LDFLAGS_EXTRA}" != "${abi_env_CXX_LDFLAGS_EXTRA}" && \
      AC_MSG_NOTICE([overriding configuration of CXX_LDFLAGS_EXTRA from environment])
    CXX_LDFLAGS_EXTRA="${abi_env_CXX_LDFLAGS_EXTRA}"
  fi

  dnl Recall C++ linker flags for GPU
  if test "${abi_env_CXX_LDFLAGS_GPU}" != ""; then
    test "${CXX_LDFLAGS_GPU}" != "${abi_env_CXX_LDFLAGS_GPU}" && \
      AC_MSG_NOTICE([overriding configuration of CXX_LDFLAGS_GPU from environment])
    CXX_LDFLAGS_GPU="${abi_env_CXX_LDFLAGS_GPU}"
  fi

  dnl Recall Tricky C++ linker flags
  if test "${abi_env_CXX_LDFLAGS_HINTS}" != ""; then
    test "${CXX_LDFLAGS_HINTS}" != "${abi_env_CXX_LDFLAGS_HINTS}" && \
      AC_MSG_NOTICE([overriding configuration of CXX_LDFLAGS_HINTS from environment])
    CXX_LDFLAGS_HINTS="${abi_env_CXX_LDFLAGS_HINTS}"
  fi

  dnl Recall C++ linker flags for optimization
  if test "${abi_env_CXX_LDFLAGS_OPTIM}" != ""; then
    test "${CXX_LDFLAGS_OPTIM}" != "${abi_env_CXX_LDFLAGS_OPTIM}" && \
      AC_MSG_NOTICE([overriding configuration of CXX_LDFLAGS_OPTIM from environment])
    CXX_LDFLAGS_OPTIM="${abi_env_CXX_LDFLAGS_OPTIM}"
  fi

  dnl Recall C++ linker additional libraries
  if test "${abi_env_CXX_LIBS}" != ""; then
    test "${CXX_LIBS}" != "${abi_env_CXX_LIBS}" && \
      AC_MSG_NOTICE([overriding configuration of CXX_LIBS from environment])
    CXX_LIBS="${abi_env_CXX_LIBS}"
  fi

  dnl Recall C++ linker additional libraries for 64-bit objects
  if test "${abi_env_CXX_LIBS_64BITS}" != ""; then
    test "${CXX_LIBS_64BITS}" != "${abi_env_CXX_LIBS_64BITS}" && \
      AC_MSG_NOTICE([overriding configuration of CXX_LIBS_64BITS from environment])
    CXX_LIBS_64BITS="${abi_env_CXX_LIBS_64BITS}"
  fi

  dnl Recall C++ linker additional libraries for debugging
  if test "${abi_env_CXX_LIBS_DEBUG}" != ""; then
    test "${CXX_LIBS_DEBUG}" != "${abi_env_CXX_LIBS_DEBUG}" && \
      AC_MSG_NOTICE([overriding configuration of CXX_LIBS_DEBUG from environment])
    CXX_LIBS_DEBUG="${abi_env_CXX_LIBS_DEBUG}"
  fi

  dnl Recall C++ linker additional libraries
  if test "${abi_env_CXX_LIBS_EXTRA}" != ""; then
    test "${CXX_LIBS_EXTRA}" != "${abi_env_CXX_LIBS_EXTRA}" && \
      AC_MSG_NOTICE([overriding configuration of CXX_LIBS_EXTRA from environment])
    CXX_LIBS_EXTRA="${abi_env_CXX_LIBS_EXTRA}"
  fi

  dnl Recall C++ linker additional libraries for GPU
  if test "${abi_env_CXX_LIBS_GPU}" != ""; then
    test "${CXX_LIBS_GPU}" != "${abi_env_CXX_LIBS_GPU}" && \
      AC_MSG_NOTICE([overriding configuration of CXX_LIBS_GPU from environment])
    CXX_LIBS_GPU="${abi_env_CXX_LIBS_GPU}"
  fi

  dnl Recall Tricky C++ linker additional libraries
  if test "${abi_env_CXX_LIBS_HINTS}" != ""; then
    test "${CXX_LIBS_HINTS}" != "${abi_env_CXX_LIBS_HINTS}" && \
      AC_MSG_NOTICE([overriding configuration of CXX_LIBS_HINTS from environment])
    CXX_LIBS_HINTS="${abi_env_CXX_LIBS_HINTS}"
  fi

  dnl Recall C++ linker additional libraries for optimization
  if test "${abi_env_CXX_LIBS_OPTIM}" != ""; then
    test "${CXX_LIBS_OPTIM}" != "${abi_env_CXX_LIBS_OPTIM}" && \
      AC_MSG_NOTICE([overriding configuration of CXX_LIBS_OPTIM from environment])
    CXX_LIBS_OPTIM="${abi_env_CXX_LIBS_OPTIM}"
  fi

  dnl Recall C preprocessor definitions
  if test "${abi_env_DEFS}" != ""; then
    test "${DEFS}" != "${abi_env_DEFS}" && \
      AC_MSG_NOTICE([overriding configuration of DEFS from environment])
    DEFS="${abi_env_DEFS}"
  fi

  dnl Recall Fortran 77 compiler
  if test "${abi_env_F77}" != ""; then
    test "${F77}" != "${abi_env_F77}" && \
      AC_MSG_NOTICE([overriding configuration of F77 from environment])
    F77="${abi_env_F77}"
  fi

  dnl Recall Fortran compiler
  if test "${abi_env_FC}" != ""; then
    test "${FC}" != "${abi_env_FC}" && \
      AC_MSG_NOTICE([overriding configuration of FC from environment])
    FC="${abi_env_FC}"
  fi

  dnl Recall Fortran compiler flags
  if test "${abi_env_FCFLAGS}" != ""; then
    test "${FCFLAGS}" != "${abi_env_FCFLAGS}" && \
      AC_MSG_NOTICE([overriding configuration of FCFLAGS from environment])
    FCFLAGS="${abi_env_FCFLAGS}"
  fi

  dnl Recall Fortran flags for 64-bit objects
  if test "${abi_env_FCFLAGS_64BITS}" != ""; then
    test "${FCFLAGS_64BITS}" != "${abi_env_FCFLAGS_64BITS}" && \
      AC_MSG_NOTICE([overriding configuration of FCFLAGS_64BITS from environment])
    FCFLAGS_64BITS="${abi_env_FCFLAGS_64BITS}"
  fi

  dnl Recall Fortran compiler flags for debugging
  if test "${abi_env_FCFLAGS_DEBUG}" != ""; then
    test "${FCFLAGS_DEBUG}" != "${abi_env_FCFLAGS_DEBUG}" && \
      AC_MSG_NOTICE([overriding configuration of FCFLAGS_DEBUG from environment])
    FCFLAGS_DEBUG="${abi_env_FCFLAGS_DEBUG}"
  fi

  dnl Recall Additional Fortran compiler flags
  if test "${abi_env_FCFLAGS_EXTRA}" != ""; then
    test "${FCFLAGS_EXTRA}" != "${abi_env_FCFLAGS_EXTRA}" && \
      AC_MSG_NOTICE([overriding configuration of FCFLAGS_EXTRA from environment])
    FCFLAGS_EXTRA="${abi_env_FCFLAGS_EXTRA}"
  fi

  dnl Recall Fortran flags for fixed-form source files
  if test "${abi_env_FCFLAGS_FIXEDFORM}" != ""; then
    test "${FCFLAGS_FIXEDFORM}" != "${abi_env_FCFLAGS_FIXEDFORM}" && \
      AC_MSG_NOTICE([overriding configuration of FCFLAGS_FIXEDFORM from environment])
    FCFLAGS_FIXEDFORM="${abi_env_FCFLAGS_FIXEDFORM}"
  fi

  dnl Recall Fortran flags for free-form source files
  if test "${abi_env_FCFLAGS_FREEFORM}" != ""; then
    test "${FCFLAGS_FREEFORM}" != "${abi_env_FCFLAGS_FREEFORM}" && \
      AC_MSG_NOTICE([overriding configuration of FCFLAGS_FREEFORM from environment])
    FCFLAGS_FREEFORM="${abi_env_FCFLAGS_FREEFORM}"
  fi

  dnl Recall Tricky Fortran compiler flags
  if test "${abi_env_FCFLAGS_HINTS}" != ""; then
    test "${FCFLAGS_HINTS}" != "${abi_env_FCFLAGS_HINTS}" && \
      AC_MSG_NOTICE([overriding configuration of FCFLAGS_HINTS from environment])
    FCFLAGS_HINTS="${abi_env_FCFLAGS_HINTS}"
  fi

  dnl Recall Fortran compiler flags to use a module directory
  if test "${abi_env_FCFLAGS_MODDIR}" != ""; then
    test "${FCFLAGS_MODDIR}" != "${abi_env_FCFLAGS_MODDIR}" && \
      AC_MSG_NOTICE([overriding configuration of FCFLAGS_MODDIR from environment])
    FCFLAGS_MODDIR="${abi_env_FCFLAGS_MODDIR}"
  fi

  dnl Recall Fortran compiler flags to enable openmp
  if test "${abi_env_FCFLAGS_OPENMP}" != ""; then
    test "${FCFLAGS_OPENMP}" != "${abi_env_FCFLAGS_OPENMP}" && \
      AC_MSG_NOTICE([overriding configuration of FCFLAGS_OPENMP from environment])
    FCFLAGS_OPENMP="${abi_env_FCFLAGS_OPENMP}"
  fi

  dnl Recall Fortran compiler flags for optimization
  if test "${abi_env_FCFLAGS_OPTIM}" != ""; then
    test "${FCFLAGS_OPTIM}" != "${abi_env_FCFLAGS_OPTIM}" && \
      AC_MSG_NOTICE([overriding configuration of FCFLAGS_OPTIM from environment])
    FCFLAGS_OPTIM="${abi_env_FCFLAGS_OPTIM}"
  fi

  dnl Recall Fortran linker flags
  if test "${abi_env_FC_LDFLAGS}" != ""; then
    test "${FC_LDFLAGS}" != "${abi_env_FC_LDFLAGS}" && \
      AC_MSG_NOTICE([overriding configuration of FC_LDFLAGS from environment])
    FC_LDFLAGS="${abi_env_FC_LDFLAGS}"
  fi

  dnl Recall Fortran linker flags for 64-bit objects
  if test "${abi_env_FC_LDFLAGS_64BITS}" != ""; then
    test "${FC_LDFLAGS_64BITS}" != "${abi_env_FC_LDFLAGS_64BITS}" && \
      AC_MSG_NOTICE([overriding configuration of FC_LDFLAGS_64BITS from environment])
    FC_LDFLAGS_64BITS="${abi_env_FC_LDFLAGS_64BITS}"
  fi

  dnl Recall Fortran linker flags for debugging
  if test "${abi_env_FC_LDFLAGS_DEBUG}" != ""; then
    test "${FC_LDFLAGS_DEBUG}" != "${abi_env_FC_LDFLAGS_DEBUG}" && \
      AC_MSG_NOTICE([overriding configuration of FC_LDFLAGS_DEBUG from environment])
    FC_LDFLAGS_DEBUG="${abi_env_FC_LDFLAGS_DEBUG}"
  fi

  dnl Recall Additional Fortran linker flags
  if test "${abi_env_FC_LDFLAGS_EXTRA}" != ""; then
    test "${FC_LDFLAGS_EXTRA}" != "${abi_env_FC_LDFLAGS_EXTRA}" && \
      AC_MSG_NOTICE([overriding configuration of FC_LDFLAGS_EXTRA from environment])
    FC_LDFLAGS_EXTRA="${abi_env_FC_LDFLAGS_EXTRA}"
  fi

  dnl Recall Tricky Fortran linker flags
  if test "${abi_env_FC_LDFLAGS_HINTS}" != ""; then
    test "${FC_LDFLAGS_HINTS}" != "${abi_env_FC_LDFLAGS_HINTS}" && \
      AC_MSG_NOTICE([overriding configuration of FC_LDFLAGS_HINTS from environment])
    FC_LDFLAGS_HINTS="${abi_env_FC_LDFLAGS_HINTS}"
  fi

  dnl Recall Fortran linker flags for optimization
  if test "${abi_env_FC_LDFLAGS_OPTIM}" != ""; then
    test "${FC_LDFLAGS_OPTIM}" != "${abi_env_FC_LDFLAGS_OPTIM}" && \
      AC_MSG_NOTICE([overriding configuration of FC_LDFLAGS_OPTIM from environment])
    FC_LDFLAGS_OPTIM="${abi_env_FC_LDFLAGS_OPTIM}"
  fi

  dnl Recall Fortran linker additional libraries
  if test "${abi_env_FC_LIBS}" != ""; then
    test "${FC_LIBS}" != "${abi_env_FC_LIBS}" && \
      AC_MSG_NOTICE([overriding configuration of FC_LIBS from environment])
    FC_LIBS="${abi_env_FC_LIBS}"
  fi

  dnl Recall Fortran linker additional libraries for 64-bit objects
  if test "${abi_env_FC_LIBS_64BITS}" != ""; then
    test "${FC_LIBS_64BITS}" != "${abi_env_FC_LIBS_64BITS}" && \
      AC_MSG_NOTICE([overriding configuration of FC_LIBS_64BITS from environment])
    FC_LIBS_64BITS="${abi_env_FC_LIBS_64BITS}"
  fi

  dnl Recall Fortran linker additional libraries for debugging
  if test "${abi_env_FC_LIBS_DEBUG}" != ""; then
    test "${FC_LIBS_DEBUG}" != "${abi_env_FC_LIBS_DEBUG}" && \
      AC_MSG_NOTICE([overriding configuration of FC_LIBS_DEBUG from environment])
    FC_LIBS_DEBUG="${abi_env_FC_LIBS_DEBUG}"
  fi

  dnl Recall Fortran linker additional libraries
  if test "${abi_env_FC_LIBS_EXTRA}" != ""; then
    test "${FC_LIBS_EXTRA}" != "${abi_env_FC_LIBS_EXTRA}" && \
      AC_MSG_NOTICE([overriding configuration of FC_LIBS_EXTRA from environment])
    FC_LIBS_EXTRA="${abi_env_FC_LIBS_EXTRA}"
  fi

  dnl Recall Tricky Fortran linker additional libraries
  if test "${abi_env_FC_LIBS_HINTS}" != ""; then
    test "${FC_LIBS_HINTS}" != "${abi_env_FC_LIBS_HINTS}" && \
      AC_MSG_NOTICE([overriding configuration of FC_LIBS_HINTS from environment])
    FC_LIBS_HINTS="${abi_env_FC_LIBS_HINTS}"
  fi

  dnl Recall Fortran linker additional libraries for optimization
  if test "${abi_env_FC_LIBS_OPTIM}" != ""; then
    test "${FC_LIBS_OPTIM}" != "${abi_env_FC_LIBS_OPTIM}" && \
      AC_MSG_NOTICE([overriding configuration of FC_LIBS_OPTIM from environment])
    FC_LIBS_OPTIM="${abi_env_FC_LIBS_OPTIM}"
  fi

  dnl Recall Fortran preprocessor
  if test "${abi_env_FPP}" != ""; then
    test "${FPP}" != "${abi_env_FPP}" && \
      AC_MSG_NOTICE([overriding configuration of FPP from environment])
    FPP="${abi_env_FPP}"
  fi

  dnl Recall Fortran preprocessor flags
  if test "${abi_env_FPPFLAGS}" != ""; then
    test "${FPPFLAGS}" != "${abi_env_FPPFLAGS}" && \
      AC_MSG_NOTICE([overriding configuration of FPPFLAGS from environment])
    FPPFLAGS="${abi_env_FPPFLAGS}"
  fi

  dnl Recall Fortran preprocessor flags for debugging
  if test "${abi_env_FPPFLAGS_DEBUG}" != ""; then
    test "${FPPFLAGS_DEBUG}" != "${abi_env_FPPFLAGS_DEBUG}" && \
      AC_MSG_NOTICE([overriding configuration of FPPFLAGS_DEBUG from environment])
    FPPFLAGS_DEBUG="${abi_env_FPPFLAGS_DEBUG}"
  fi

  dnl Recall Additional Fortran preprocessor flags
  if test "${abi_env_FPPFLAGS_EXTRA}" != ""; then
    test "${FPPFLAGS_EXTRA}" != "${abi_env_FPPFLAGS_EXTRA}" && \
      AC_MSG_NOTICE([overriding configuration of FPPFLAGS_EXTRA from environment])
    FPPFLAGS_EXTRA="${abi_env_FPPFLAGS_EXTRA}"
  fi

  dnl Recall Tricky Fortran preprocessor flags
  if test "${abi_env_FPPFLAGS_HINTS}" != ""; then
    test "${FPPFLAGS_HINTS}" != "${abi_env_FPPFLAGS_HINTS}" && \
      AC_MSG_NOTICE([overriding configuration of FPPFLAGS_HINTS from environment])
    FPPFLAGS_HINTS="${abi_env_FPPFLAGS_HINTS}"
  fi

  dnl Recall Fortran preprocessor flags for optimization
  if test "${abi_env_FPPFLAGS_OPTIM}" != ""; then
    test "${FPPFLAGS_OPTIM}" != "${abi_env_FPPFLAGS_OPTIM}" && \
      AC_MSG_NOTICE([overriding configuration of FPPFLAGS_OPTIM from environment])
    FPPFLAGS_OPTIM="${abi_env_FPPFLAGS_OPTIM}"
  fi

  dnl Recall Linker
  if test "${abi_env_LD}" != ""; then
    test "${LD}" != "${abi_env_LD}" && \
      AC_MSG_NOTICE([overriding configuration of LD from environment])
    LD="${abi_env_LD}"
  fi

  dnl Recall LaTeX flags
  if test "${abi_env_LTXFLAGS}" != ""; then
    test "${LTXFLAGS}" != "${abi_env_LTXFLAGS}" && \
      AC_MSG_NOTICE([overriding configuration of LTXFLAGS from environment])
    LTXFLAGS="${abi_env_LTXFLAGS}"
  fi

  dnl Recall Markdown text-to-HTML processor flags
  if test "${abi_env_MDFLAGS}" != ""; then
    test "${MDFLAGS}" != "${abi_env_MDFLAGS}" && \
      AC_MSG_NOTICE([overriding configuration of MDFLAGS from environment])
    MDFLAGS="${abi_env_MDFLAGS}"
  fi

  dnl Recall Fortran module extension
  if test "${abi_env_MODEXT}" != ""; then
    test "${MODEXT}" != "${abi_env_MODEXT}" && \
      AC_MSG_NOTICE([overriding configuration of MODEXT from environment])
    MODEXT="${abi_env_MODEXT}"
  fi

  dnl Recall MPI runner command
  if test "${abi_env_MPI_RUNNER}" != ""; then
    test "${MPI_RUNNER}" != "${abi_env_MPI_RUNNER}" && \
      AC_MSG_NOTICE([overriding configuration of MPI_RUNNER from environment])
    MPI_RUNNER="${abi_env_MPI_RUNNER}"
  fi

  dnl Recall List symbols from object files
  if test "${abi_env_NM}" != ""; then
    test "${NM}" != "${abi_env_NM}" && \
      AC_MSG_NOTICE([overriding configuration of NM from environment])
    NM="${abi_env_NM}"
  fi

  dnl Recall nVidia CUDA C compiler
  if test "${abi_env_NVCC}" != ""; then
    test "${NVCC}" != "${abi_env_NVCC}" && \
      AC_MSG_NOTICE([overriding configuration of NVCC from environment])
    NVCC="${abi_env_NVCC}"
  fi

  dnl Recall nVidia CUDA C compiler flags
  if test "${abi_env_NVCC_CFLAGS}" != ""; then
    test "${NVCC_CFLAGS}" != "${abi_env_NVCC_CFLAGS}" && \
      AC_MSG_NOTICE([overriding configuration of NVCC_CFLAGS from environment])
    NVCC_CFLAGS="${abi_env_NVCC_CFLAGS}"
  fi

  dnl Recall nVidia CUDA preprocessing options
  if test "${abi_env_NVCC_CPPFLAGS}" != ""; then
    test "${NVCC_CPPFLAGS}" != "${abi_env_NVCC_CPPFLAGS}" && \
      AC_MSG_NOTICE([overriding configuration of NVCC_CPPFLAGS from environment])
    NVCC_CPPFLAGS="${abi_env_NVCC_CPPFLAGS}"
  fi

  dnl Recall nVidia CUDA C linker flags
  if test "${abi_env_NVCC_LDFLAGS}" != ""; then
    test "${NVCC_LDFLAGS}" != "${abi_env_NVCC_LDFLAGS}" && \
      AC_MSG_NOTICE([overriding configuration of NVCC_LDFLAGS from environment])
    NVCC_LDFLAGS="${abi_env_NVCC_LDFLAGS}"
  fi

  dnl Recall nVidia CUDA C linker additional libraries
  if test "${abi_env_NVCC_LIBS}" != ""; then
    test "${NVCC_LIBS}" != "${abi_env_NVCC_LIBS}" && \
      AC_MSG_NOTICE([overriding configuration of NVCC_LIBS from environment])
    NVCC_LIBS="${abi_env_NVCC_LIBS}"
  fi

  dnl Recall DVI->PDF converter flags
  if test "${abi_env_PDFFLAGS}" != ""; then
    test "${PDFFLAGS}" != "${abi_env_PDFFLAGS}" && \
      AC_MSG_NOTICE([overriding configuration of PDFFLAGS from environment])
    PDFFLAGS="${abi_env_PDFFLAGS}"
  fi

  dnl Recall Execution flags for the Python interpreter
  if test "${abi_env_PYFLAGS}" != ""; then
    test "${PYFLAGS}" != "${abi_env_PYFLAGS}" && \
      AC_MSG_NOTICE([overriding configuration of PYFLAGS from environment])
    PYFLAGS="${abi_env_PYFLAGS}"
  fi

  dnl Recall C preprocessing flags for C/Python bindings
  if test "${abi_env_PYTHON_CPPFLAGS}" != ""; then
    test "${PYTHON_CPPFLAGS}" != "${abi_env_PYTHON_CPPFLAGS}" && \
      AC_MSG_NOTICE([overriding configuration of PYTHON_CPPFLAGS from environment])
    PYTHON_CPPFLAGS="${abi_env_PYTHON_CPPFLAGS}"
  fi

  dnl Recall Generate index to archive
  if test "${abi_env_RANLIB}" != ""; then
    test "${RANLIB}" != "${abi_env_RANLIB}" && \
      AC_MSG_NOTICE([overriding configuration of RANLIB from environment])
    RANLIB="${abi_env_RANLIB}"
  fi

  dnl Recall Serial runner command
  if test "${abi_env_SERIAL_RUNNER}" != ""; then
    test "${SERIAL_RUNNER}" != "${abi_env_SERIAL_RUNNER}" && \
      AC_MSG_NOTICE([overriding configuration of SERIAL_RUNNER from environment])
    SERIAL_RUNNER="${abi_env_SERIAL_RUNNER}"
  fi

  dnl Recall True stand-alone C preprocessor for use with Fortran wrappers
  if test "${abi_env_TRUE_CPP}" != ""; then
    test "${TRUE_CPP}" != "${abi_env_TRUE_CPP}" && \
      AC_MSG_NOTICE([overriding configuration of TRUE_CPP from environment])
    TRUE_CPP="${abi_env_TRUE_CPP}"
  fi

  dnl Recall C++ preprocessor
  if test "${abi_env_XPP}" != ""; then
    test "${XPP}" != "${abi_env_XPP}" && \
      AC_MSG_NOTICE([overriding configuration of XPP from environment])
    XPP="${abi_env_XPP}"
  fi

  dnl Recall C++ preprocessor flags
  if test "${abi_env_XPPFLAGS}" != ""; then
    test "${XPPFLAGS}" != "${abi_env_XPPFLAGS}" && \
      AC_MSG_NOTICE([overriding configuration of XPPFLAGS from environment])
    XPPFLAGS="${abi_env_XPPFLAGS}"
  fi

  dnl Recall C++ preprocessor flags for debugging
  if test "${abi_env_XPPFLAGS_DEBUG}" != ""; then
    test "${XPPFLAGS_DEBUG}" != "${abi_env_XPPFLAGS_DEBUG}" && \
      AC_MSG_NOTICE([overriding configuration of XPPFLAGS_DEBUG from environment])
    XPPFLAGS_DEBUG="${abi_env_XPPFLAGS_DEBUG}"
  fi

  dnl Recall Additional C++ preprocessor flags
  if test "${abi_env_XPPFLAGS_EXTRA}" != ""; then
    test "${XPPFLAGS_EXTRA}" != "${abi_env_XPPFLAGS_EXTRA}" && \
      AC_MSG_NOTICE([overriding configuration of XPPFLAGS_EXTRA from environment])
    XPPFLAGS_EXTRA="${abi_env_XPPFLAGS_EXTRA}"
  fi

  dnl Recall C++ preprocessor flags for optimization
  if test "${abi_env_XPPFLAGS_OPTIM}" != ""; then
    test "${XPPFLAGS_OPTIM}" != "${abi_env_XPPFLAGS_OPTIM}" && \
      AC_MSG_NOTICE([overriding configuration of XPPFLAGS_OPTIM from environment])
    XPPFLAGS_OPTIM="${abi_env_XPPFLAGS_OPTIM}"
  fi

])
m4trace:config/m4/auto-env.m4:1709: -1- AC_DEFUN([ABI_ENV_RESTORE], [

  dnl Restore CPPFLAGS holder to permit C/Fortran mixing
  ABI_CPPFLAGS="${abi_env_ABI_CPPFLAGS}"

  dnl Restore Library archiver
  AR="${abi_env_AR}"

  dnl Restore Library archiver flags
  ARFLAGS="${abi_env_ARFLAGS}"

  dnl Restore Library archiver flags for 64-bit objects
  ARFLAGS_64BITS="${abi_env_ARFLAGS_64BITS}"

  dnl Restore Library archiver commands
  ARFLAGS_CMD="${abi_env_ARFLAGS_CMD}"

  dnl Restore Library archiver flags for debugging
  ARFLAGS_DEBUG="${abi_env_ARFLAGS_DEBUG}"

  dnl Restore Additional library archiver flags
  ARFLAGS_EXTRA="${abi_env_ARFLAGS_EXTRA}"

  dnl Restore Tricky library archiver flags
  ARFLAGS_HINTS="${abi_env_ARFLAGS_HINTS}"

  dnl Restore Library archiver flags for optimization
  ARFLAGS_OPTIM="${abi_env_ARFLAGS_OPTIM}"

  dnl Restore C compiler
  CC="${abi_env_CC}"

  dnl Restore C linker flags
  CC_LDFLAGS="${abi_env_CC_LDFLAGS}"

  dnl Restore C linker flags for 64-bit objects
  CC_LDFLAGS_64BITS="${abi_env_CC_LDFLAGS_64BITS}"

  dnl Restore C linker flags for debugging
  CC_LDFLAGS_DEBUG="${abi_env_CC_LDFLAGS_DEBUG}"

  dnl Restore Additional C linker flags
  CC_LDFLAGS_EXTRA="${abi_env_CC_LDFLAGS_EXTRA}"

  dnl Restore C linker flags for GPU
  CC_LDFLAGS_GPU="${abi_env_CC_LDFLAGS_GPU}"

  dnl Restore Tricky C linker flags
  CC_LDFLAGS_HINTS="${abi_env_CC_LDFLAGS_HINTS}"

  dnl Restore C linker flags for optimization
  CC_LDFLAGS_OPTIM="${abi_env_CC_LDFLAGS_OPTIM}"

  dnl Restore C linker libraries
  CC_LIBS="${abi_env_CC_LIBS}"

  dnl Restore C linker additional libraries for 64-bit objects
  CC_LIBS_64BITS="${abi_env_CC_LIBS_64BITS}"

  dnl Restore C linker additional libraries for debugging
  CC_LIBS_DEBUG="${abi_env_CC_LIBS_DEBUG}"

  dnl Restore C linker additional libraries
  CC_LIBS_EXTRA="${abi_env_CC_LIBS_EXTRA}"

  dnl Restore C linker additional libraries for GPU
  CC_LIBS_GPU="${abi_env_CC_LIBS_GPU}"

  dnl Restore Tricky C linker additional libraries
  CC_LIBS_HINTS="${abi_env_CC_LIBS_HINTS}"

  dnl Restore C linker additional libraries for optimization
  CC_LIBS_OPTIM="${abi_env_CC_LIBS_OPTIM}"

  dnl Restore C compiler flags
  CFLAGS="${abi_env_CFLAGS}"

  dnl Restore C flags for 64-bit objects
  CFLAGS_64BITS="${abi_env_CFLAGS_64BITS}"

  dnl Restore C compiler flags for debugging
  CFLAGS_DEBUG="${abi_env_CFLAGS_DEBUG}"

  dnl Restore Additional C compiler flags
  CFLAGS_EXTRA="${abi_env_CFLAGS_EXTRA}"

  dnl Restore C flags for GPU
  CFLAGS_GPU="${abi_env_CFLAGS_GPU}"

  dnl Restore Tricky C compiler flags
  CFLAGS_HINTS="${abi_env_CFLAGS_HINTS}"

  dnl Restore C compiler flags for optimization
  CFLAGS_OPTIM="${abi_env_CFLAGS_OPTIM}"

  dnl Restore C preprocessor
  CPP="${abi_env_CPP}"

  dnl Restore C preprocessor flags
  CPPFLAGS="${abi_env_CPPFLAGS}"

  dnl Restore C preprocessor flags for 64-bit objects
  CPPFLAGS_64BITS="${abi_env_CPPFLAGS_64BITS}"

  dnl Restore C preprocessor flags for debugging
  CPPFLAGS_DEBUG="${abi_env_CPPFLAGS_DEBUG}"

  dnl Restore Additional C preprocessor flags
  CPPFLAGS_EXTRA="${abi_env_CPPFLAGS_EXTRA}"

  dnl Restore C preprocessor flags for GPU
  CPPFLAGS_GPU="${abi_env_CPPFLAGS_GPU}"

  dnl Restore Tricky C preprocessor flags
  CPPFLAGS_HINTS="${abi_env_CPPFLAGS_HINTS}"

  dnl Restore C preprocessor flags for optimization
  CPPFLAGS_OPTIM="${abi_env_CPPFLAGS_OPTIM}"

  dnl Restore C++ compiler
  CXX="${abi_env_CXX}"

  dnl Restore C++ compiler flags
  CXXFLAGS="${abi_env_CXXFLAGS}"

  dnl Restore C++ flags for 64-bit objects
  CXXFLAGS_64BITS="${abi_env_CXXFLAGS_64BITS}"

  dnl Restore C++ compiler flags for debugging
  CXXFLAGS_DEBUG="${abi_env_CXXFLAGS_DEBUG}"

  dnl Restore Additional C++ compiler flags
  CXXFLAGS_EXTRA="${abi_env_CXXFLAGS_EXTRA}"

  dnl Restore C++ flags for GPU
  CXXFLAGS_GPU="${abi_env_CXXFLAGS_GPU}"

  dnl Restore Tricky C++ compiler flags
  CXXFLAGS_HINTS="${abi_env_CXXFLAGS_HINTS}"

  dnl Restore C++ compiler flags for optimization
  CXXFLAGS_OPTIM="${abi_env_CXXFLAGS_OPTIM}"

  dnl Restore C++ linker flags
  CXX_LDFLAGS="${abi_env_CXX_LDFLAGS}"

  dnl Restore C++ linker flags for 64-bit objects
  CXX_LDFLAGS_64BITS="${abi_env_CXX_LDFLAGS_64BITS}"

  dnl Restore C++ linker flags for debugging
  CXX_LDFLAGS_DEBUG="${abi_env_CXX_LDFLAGS_DEBUG}"

  dnl Restore Additional C++ linker flags
  CXX_LDFLAGS_EXTRA="${abi_env_CXX_LDFLAGS_EXTRA}"

  dnl Restore C++ linker flags for GPU
  CXX_LDFLAGS_GPU="${abi_env_CXX_LDFLAGS_GPU}"

  dnl Restore Tricky C++ linker flags
  CXX_LDFLAGS_HINTS="${abi_env_CXX_LDFLAGS_HINTS}"

  dnl Restore C++ linker flags for optimization
  CXX_LDFLAGS_OPTIM="${abi_env_CXX_LDFLAGS_OPTIM}"

  dnl Restore C++ linker additional libraries
  CXX_LIBS="${abi_env_CXX_LIBS}"

  dnl Restore C++ linker additional libraries for 64-bit objects
  CXX_LIBS_64BITS="${abi_env_CXX_LIBS_64BITS}"

  dnl Restore C++ linker additional libraries for debugging
  CXX_LIBS_DEBUG="${abi_env_CXX_LIBS_DEBUG}"

  dnl Restore C++ linker additional libraries
  CXX_LIBS_EXTRA="${abi_env_CXX_LIBS_EXTRA}"

  dnl Restore C++ linker additional libraries for GPU
  CXX_LIBS_GPU="${abi_env_CXX_LIBS_GPU}"

  dnl Restore Tricky C++ linker additional libraries
  CXX_LIBS_HINTS="${abi_env_CXX_LIBS_HINTS}"

  dnl Restore C++ linker additional libraries for optimization
  CXX_LIBS_OPTIM="${abi_env_CXX_LIBS_OPTIM}"

  dnl Restore C preprocessor definitions
  DEFS="${abi_env_DEFS}"

  dnl Restore Fortran 77 compiler
  F77="${abi_env_F77}"

  dnl Restore Fortran compiler
  FC="${abi_env_FC}"

  dnl Restore Fortran compiler flags
  FCFLAGS="${abi_env_FCFLAGS}"

  dnl Restore Fortran flags for 64-bit objects
  FCFLAGS_64BITS="${abi_env_FCFLAGS_64BITS}"

  dnl Restore Fortran compiler flags for debugging
  FCFLAGS_DEBUG="${abi_env_FCFLAGS_DEBUG}"

  dnl Restore Additional Fortran compiler flags
  FCFLAGS_EXTRA="${abi_env_FCFLAGS_EXTRA}"

  dnl Restore Fortran flags for fixed-form source files
  FCFLAGS_FIXEDFORM="${abi_env_FCFLAGS_FIXEDFORM}"

  dnl Restore Fortran flags for free-form source files
  FCFLAGS_FREEFORM="${abi_env_FCFLAGS_FREEFORM}"

  dnl Restore Tricky Fortran compiler flags
  FCFLAGS_HINTS="${abi_env_FCFLAGS_HINTS}"

  dnl Restore Fortran compiler flags to use a module directory
  FCFLAGS_MODDIR="${abi_env_FCFLAGS_MODDIR}"

  dnl Restore Fortran compiler flags to enable openmp
  FCFLAGS_OPENMP="${abi_env_FCFLAGS_OPENMP}"

  dnl Restore Fortran compiler flags for optimization
  FCFLAGS_OPTIM="${abi_env_FCFLAGS_OPTIM}"

  dnl Restore Fortran linker flags
  FC_LDFLAGS="${abi_env_FC_LDFLAGS}"

  dnl Restore Fortran linker flags for 64-bit objects
  FC_LDFLAGS_64BITS="${abi_env_FC_LDFLAGS_64BITS}"

  dnl Restore Fortran linker flags for debugging
  FC_LDFLAGS_DEBUG="${abi_env_FC_LDFLAGS_DEBUG}"

  dnl Restore Additional Fortran linker flags
  FC_LDFLAGS_EXTRA="${abi_env_FC_LDFLAGS_EXTRA}"

  dnl Restore Tricky Fortran linker flags
  FC_LDFLAGS_HINTS="${abi_env_FC_LDFLAGS_HINTS}"

  dnl Restore Fortran linker flags for optimization
  FC_LDFLAGS_OPTIM="${abi_env_FC_LDFLAGS_OPTIM}"

  dnl Restore Fortran linker additional libraries
  FC_LIBS="${abi_env_FC_LIBS}"

  dnl Restore Fortran linker additional libraries for 64-bit objects
  FC_LIBS_64BITS="${abi_env_FC_LIBS_64BITS}"

  dnl Restore Fortran linker additional libraries for debugging
  FC_LIBS_DEBUG="${abi_env_FC_LIBS_DEBUG}"

  dnl Restore Fortran linker additional libraries
  FC_LIBS_EXTRA="${abi_env_FC_LIBS_EXTRA}"

  dnl Restore Tricky Fortran linker additional libraries
  FC_LIBS_HINTS="${abi_env_FC_LIBS_HINTS}"

  dnl Restore Fortran linker additional libraries for optimization
  FC_LIBS_OPTIM="${abi_env_FC_LIBS_OPTIM}"

  dnl Restore Fortran preprocessor
  FPP="${abi_env_FPP}"

  dnl Restore Fortran preprocessor flags
  FPPFLAGS="${abi_env_FPPFLAGS}"

  dnl Restore Fortran preprocessor flags for debugging
  FPPFLAGS_DEBUG="${abi_env_FPPFLAGS_DEBUG}"

  dnl Restore Additional Fortran preprocessor flags
  FPPFLAGS_EXTRA="${abi_env_FPPFLAGS_EXTRA}"

  dnl Restore Tricky Fortran preprocessor flags
  FPPFLAGS_HINTS="${abi_env_FPPFLAGS_HINTS}"

  dnl Restore Fortran preprocessor flags for optimization
  FPPFLAGS_OPTIM="${abi_env_FPPFLAGS_OPTIM}"

  dnl Restore Linker
  LD="${abi_env_LD}"

  dnl Restore LaTeX flags
  LTXFLAGS="${abi_env_LTXFLAGS}"

  dnl Restore Markdown text-to-HTML processor flags
  MDFLAGS="${abi_env_MDFLAGS}"

  dnl Restore Fortran module extension
  MODEXT="${abi_env_MODEXT}"

  dnl Restore MPI runner command
  MPI_RUNNER="${abi_env_MPI_RUNNER}"

  dnl Restore List symbols from object files
  NM="${abi_env_NM}"

  dnl Restore nVidia CUDA C compiler
  NVCC="${abi_env_NVCC}"

  dnl Restore nVidia CUDA C compiler flags
  NVCC_CFLAGS="${abi_env_NVCC_CFLAGS}"

  dnl Restore nVidia CUDA preprocessing options
  NVCC_CPPFLAGS="${abi_env_NVCC_CPPFLAGS}"

  dnl Restore nVidia CUDA C linker flags
  NVCC_LDFLAGS="${abi_env_NVCC_LDFLAGS}"

  dnl Restore nVidia CUDA C linker additional libraries
  NVCC_LIBS="${abi_env_NVCC_LIBS}"

  dnl Restore DVI->PDF converter flags
  PDFFLAGS="${abi_env_PDFFLAGS}"

  dnl Restore Execution flags for the Python interpreter
  PYFLAGS="${abi_env_PYFLAGS}"

  dnl Restore C preprocessing flags for C/Python bindings
  PYTHON_CPPFLAGS="${abi_env_PYTHON_CPPFLAGS}"

  dnl Restore Generate index to archive
  RANLIB="${abi_env_RANLIB}"

  dnl Restore Serial runner command
  SERIAL_RUNNER="${abi_env_SERIAL_RUNNER}"

  dnl Restore True stand-alone C preprocessor for use with Fortran wrappers
  TRUE_CPP="${abi_env_TRUE_CPP}"

  dnl Restore C++ preprocessor
  XPP="${abi_env_XPP}"

  dnl Restore C++ preprocessor flags
  XPPFLAGS="${abi_env_XPPFLAGS}"

  dnl Restore C++ preprocessor flags for debugging
  XPPFLAGS_DEBUG="${abi_env_XPPFLAGS_DEBUG}"

  dnl Restore Additional C++ preprocessor flags
  XPPFLAGS_EXTRA="${abi_env_XPPFLAGS_EXTRA}"

  dnl Restore C++ preprocessor flags for optimization
  XPPFLAGS_OPTIM="${abi_env_XPPFLAGS_OPTIM}"

])
m4trace:config/m4/auto-hints.m4:3: -1- AC_DEFUN([ABI_AR_HINTS], [
  dnl Init
  abi_ar_vendor_hnt="none"
  abi_ar_version_hnt="none"
  abi_sys_spec_hnt="none"

  dnl Look for hints flags
  AC_MSG_CHECKING([which ar hints to apply])

  dnl Case built from config/hints/ar_*.conf
  if test "${abi_ar_vendor}" = "ibm"; then
    abi_ar_vendor_hnt="ibm"
    abi_ar_version_hnt="default"
    case "${abi_sys_spec}" in
      aix-*)
        abi_sys_spec_hnt="aix-*"
        ARFLAGS_64BITS='-X 64'
        ARFLAGS_32BITS='-X 32'
        ;;
      *)
        abi_sys_spec_hnt="default"
        ;;
    esac   # [case: abi_sys_spec, indent: 1, item: False]
  fi

  dnl Display settings
  AC_MSG_RESULT([${abi_ar_vendor_hnt}/${abi_ar_version_hnt}/${abi_sys_spec_hnt}])

])
m4trace:config/m4/auto-hints.m4:34: -1- AC_DEFUN([ABI_CPP_HINTS], [
  dnl Init
  abi_cpp_vendor_hnt="none"
  abi_cpp_version_hnt="none"
  abi_sys_spec_hnt="none"

  dnl Look for hints flags
  AC_MSG_CHECKING([which cpp hints to apply])

  dnl Case built from config/hints/cpp_*.conf
  case "${abi_cpp_vendor}" in
    ibm)
      abi_cpp_vendor_hnt="ibm"
      abi_cpp_version_hnt="default"
      case "${abi_sys_spec}" in
        aix-*)
          abi_sys_spec_hnt="aix-*"
          CPPFLAGS_HINTS_EXT='-P -traditional-cpp'
          ;;
        linux-*)
          abi_sys_spec_hnt="linux-*"
          CPPFLAGS_HINTS_EXT='-P -traditional-cpp'
          ;;
        *)
          abi_sys_spec_hnt="default"
          ;;
      esac   # [case: abi_sys_spec, indent: 2, item: True]
      ;;
    *)
      abi_cpp_vendor_hnt="default"
      abi_cpp_version_hnt="default"
      abi_sys_spec_hnt="default"
      CPPFLAGS_HINTS_EXT='-P -std=c99'
      ;;
  esac   # [case: abi_cpp_vendor, indent: 0, item: True]

  dnl Display settings
  AC_MSG_RESULT([${abi_cpp_vendor_hnt}/${abi_cpp_version_hnt}/${abi_sys_spec_hnt}])

])
m4trace:config/m4/auto-hints.m4:76: -1- AC_DEFUN([ABI_CC_HINTS], [
  dnl Init
  abi_cc_vendor_hnt="none"
  abi_cc_version_hnt="none"
  abi_sys_spec_hnt="none"

  dnl Look for hints flags
  AC_MSG_CHECKING([which cc hints to apply])

  dnl Case built from config/hints/cc_*.conf
  case "${abi_cc_vendor}" in
    ibm)
      abi_cc_vendor_hnt="ibm"
      abi_cc_version_hnt="default"
      abi_sys_spec_hnt="default"
      CFLAGS_64BITS='-q64'
      CFLAGS_PIC='-qpic'
      ;;
    gnu)
      abi_cc_vendor_hnt="gnu"
      abi_cc_version_hnt="default"
      case "${abi_sys_spec}" in
        irix-mips)
          abi_sys_spec_hnt="irix-mips"
          CFLAGS_64BITS='-mabi=64'
          CFLAGS_PIC='-fPIC'
          CFLAGS_32BITS='-mabi=32'
          ;;
        *)
          abi_sys_spec_hnt="default"
          CFLAGS_32BITS='-m32'
          CFLAGS_64BITS='-m64'
          CFLAGS_PIC='-fPIC'
          ;;
      esac   # [case: abi_sys_spec, indent: 2, item: True]
      ;;
    open64)
      abi_cc_vendor_hnt="open64"
      abi_cc_version_hnt="default"
      abi_sys_spec_hnt="default"
      CFLAGS_32BITS='-m32'
      CFLAGS_64BITS='-m64'
      CFLAGS_PIC='-fPIC'
      ;;
    pathscale)
      abi_cc_vendor_hnt="pathscale"
      abi_cc_version_hnt="default"
      abi_sys_spec_hnt="default"
      CFLAGS_32BITS='-m32'
      CFLAGS_64BITS='-m64'
      CFLAGS_PIC='-fPIC'
      ;;
    intel)
      abi_cc_vendor_hnt="intel"
      abi_cc_version_hnt="default"
      abi_sys_spec_hnt="default"
      CFLAGS_HINTS='-vec-report0'
      CC_LDFLAGS_HINTS='-static-libgcc -static-intel'
      CFLAGS_PIC='-fPIC'
      ;;
  esac   # [case: abi_cc_vendor, indent: 0, item: True]

  dnl Display settings
  AC_MSG_RESULT([${abi_cc_vendor_hnt}/${abi_cc_version_hnt}/${abi_sys_spec_hnt}])

])
m4trace:config/m4/auto-hints.m4:144: -1- AC_DEFUN([ABI_XPP_HINTS], [
  dnl Init
  abi_xpp_vendor_hnt="none"
  abi_xpp_version_hnt="none"
  abi_sys_spec_hnt="none"

  dnl Look for hints flags
  AC_MSG_CHECKING([which xpp hints to apply])

  dnl WARNING: no config files were found for language

  dnl Display settings
  AC_MSG_RESULT([${abi_xpp_vendor_hnt}/${abi_xpp_version_hnt}/${abi_sys_spec_hnt}])

])
m4trace:config/m4/auto-hints.m4:161: -1- AC_DEFUN([ABI_CXX_HINTS], [
  dnl Init
  abi_cxx_vendor_hnt="none"
  abi_cxx_version_hnt="none"
  abi_sys_spec_hnt="none"

  dnl Look for hints flags
  AC_MSG_CHECKING([which cxx hints to apply])

  dnl Case built from config/hints/cxx_*.conf
  case "${abi_cxx_vendor}" in
    ibm)
      abi_cxx_vendor_hnt="ibm"
      abi_cxx_version_hnt="default"
      abi_sys_spec_hnt="default"
      CXXFLAGS_64BITS='-q64'
      CXXFLAGS_PIC='-qpic'
      ;;
    gnu)
      abi_cxx_vendor_hnt="gnu"
      abi_cxx_version_hnt="default"
      case "${abi_sys_spec}" in
        irix-mips)
          abi_sys_spec_hnt="irix-mips"
          CXXFLAGS_64BITS='-mabi=64'
          CXXFLAGS_PIC='-fPIC'
          CXXFLAGS_32BITS='-mabi=32'
          ;;
        *)
          abi_sys_spec_hnt="default"
          CXXFLAGS_32BITS='-m32'
          CXXFLAGS_64BITS='-m64'
          CXXFLAGS_PIC='-fPIC'
          ;;
      esac   # [case: abi_sys_spec, indent: 2, item: True]
      ;;
    pathscale)
      abi_cxx_vendor_hnt="pathscale"
      abi_cxx_version_hnt="default"
      abi_sys_spec_hnt="default"
      CXXFLAGS_32BITS='-m32'
      CXXFLAGS_64BITS='-m64'
      CXXFLAGS_PIC='-fPIC'
      ;;
    intel)
      abi_cxx_vendor_hnt="intel"
      abi_cxx_version_hnt="default"
      abi_sys_spec_hnt="default"
      CXXFLAGS_HINTS='-vec-report0'
      CXX_LDFLAGS_HINTS='-static-libgcc -static-intel'
      CXXFLAGS_PIC='-fPIC'
      ;;
  esac   # [case: abi_cxx_vendor, indent: 0, item: True]

  dnl Display settings
  AC_MSG_RESULT([${abi_cxx_vendor_hnt}/${abi_cxx_version_hnt}/${abi_sys_spec_hnt}])

])
m4trace:config/m4/auto-hints.m4:221: -1- AC_DEFUN([ABI_FPP_HINTS], [
  dnl Init
  abi_fpp_vendor_hnt="none"
  abi_fpp_version_hnt="none"
  abi_sys_spec_hnt="none"

  dnl Look for hints flags
  AC_MSG_CHECKING([which fpp hints to apply])

  dnl Case built from config/hints/fpp_*.conf
  case "${abi_fpp_vendor}" in
    ibm)
      abi_fpp_vendor_hnt="ibm"
      abi_fpp_version_hnt="default"
      abi_sys_spec_hnt="default"
      FPPFLAGS_HINTS_EXT='-P -traditional-cpp'
      ;;
    *)
      abi_fpp_vendor_hnt="default"
      abi_fpp_version_hnt="default"
      abi_sys_spec_hnt="default"
      FPPFLAGS_HINTS_EXT='-P'
      ;;
  esac   # [case: abi_fpp_vendor, indent: 0, item: True]

  dnl Display settings
  AC_MSG_RESULT([${abi_fpp_vendor_hnt}/${abi_fpp_version_hnt}/${abi_sys_spec_hnt}])

])
m4trace:config/m4/auto-hints.m4:252: -1- AC_DEFUN([ABI_FC_HINTS], [
  dnl Init
  abi_fc_vendor_hnt="none"
  abi_fc_version_hnt="none"
  abi_sys_spec_hnt="none"

  dnl Look for hints flags
  AC_MSG_CHECKING([which fc hints to apply])

  dnl Case built from config/hints/fc_*.conf
  case "${abi_fc_vendor}" in
    absoft)
      abi_fc_vendor_hnt="absoft"
      abi_fc_version_hnt="default"
      abi_sys_spec_hnt="default"
      FCFLAGS_FIXEDFORM='-ffixed'
      FCFLAGS_FREEFORM='-ffree'
      FCFLAGS_MODDIR='-p $(abinit_moddir)'
      abi_fc_wrap='yes'
      FCFLAGS_OPENMP='-openmp'
      FCFLAGS_PIC='-fPIC'
      ;;
    ibm)
      abi_fc_vendor_hnt="ibm"
      abi_fc_version_hnt="default"
      abi_sys_spec_hnt="default"
      FCFLAGS_32BITS='-q32'
      FCFLAGS_64BITS='-q64'
      FCFLAGS_FIXEDFORM='-qsuffix=cpp=F:f=f -qfixed'
      FCFLAGS_FREEFORM='-qsuffix=cpp=F90:f=f90 -qfree=f90'
      FCFLAGS_PIC='-qpic'
      FCFLAGS_MODDIR='-qmoddir=$(abinit_moddir) -I$(abinit_moddir)'
      FPPFLAGS_HINTS='-WF,-DHAVE_CONFIG_H'
      FCFLAGS_HINTS='-qzerosize'
      FCFLAGS_OPENMP='-qsmp'
      ;;
    gnu)
      abi_fc_vendor_hnt="gnu"
      abi_fc_version_hnt="default"
      abi_sys_spec_hnt="default"
      FCFLAGS_32BITS='-m32'
      FCFLAGS_64BITS='-m64'
      FCFLAGS_BIGENDIAN='-fconvert=big-endian -frecord-marker=4'
      FCFLAGS_FIXEDFORM='-ffixed-form'
      FCFLAGS_FREEFORM='-ffree-form'
      FCFLAGS_PIC='-fPIC'
      FCFLAGS_MODDIR='-J$(abinit_moddir)'
      FCFLAGS_HINTS='-ffree-line-length-none'
      FCFLAGS_OPENMP='-fopenmp'
      ;;
    open64)
      abi_fc_vendor_hnt="open64"
      abi_fc_version_hnt="default"
      abi_sys_spec_hnt="default"
      FCFLAGS_BIGENDIAN='-byteswapio'
      FCFLAGS_32BITS='-m32 -align32'
      FCFLAGS_64BITS='-m64 -align64'
      FCFLAGS_FIXEDFORM='-fixedform'
      FCFLAGS_FREEFORM='-freeform'
      FCFLAGS_PIC='-fPIC'
      FCFLAGS_MODDIR='-module $(abinit_moddir)'
      FCFLAGS_HINTS='-extend-source'
      ;;
    amd)
      abi_fc_vendor_hnt="amd"
      abi_fc_version_hnt="default"
      abi_sys_spec_hnt="default"
      FCFLAGS_32BITS='-m32 -align32'
      FCFLAGS_64BITS='-m64 -align64 -default64'
      FCFLAGS_BIGENDIAN='-convert big_endian'
      FCFLAGS_FIXEDFORM='-fixedform'
      FCFLAGS_FREEFORM='-freeform'
      FCFLAGS_PIC='-fPIC'
      FCFLAGS_HINTS='-extend-source -col120'
      FCFLAGS_MODDIR='-module $(abinit_moddir) -I$(abinit_moddir)'
      ;;
    pgi)
      abi_fc_vendor_hnt="pgi"
      abi_fc_version_hnt="default"
      abi_sys_spec_hnt="default"
      FCFLAGS_FIXEDFORM='-Mfixed'
      FCFLAGS_FREEFORM='-Mfree'
      FCFLAGS_MODDIR='-module $(abinit_moddir)'
      FCFLAGS_PIC='-fPIC'
      FCFLAGS_HINTS='-Mextend'
      FC_LDFLAGS_HINTS=''
      ;;
    g95)
      abi_fc_vendor_hnt="g95"
      abi_fc_version_hnt="default"
      abi_sys_spec_hnt="default"
      FCFLAGS_32BITS='-m32'
      FCFLAGS_64BITS='-m64'
      FCFLAGS_BIGENDIAN='-fconvert=big-endian -frecord-marker=4'
      FCFLAGS_FIXEDFORM='-ffixed-form'
      FCFLAGS_FREEFORM='-ffree-form'
      FCFLAGS_PIC='-fpic'
      FCFLAGS_MODDIR='-fmod=$(abinit_moddir) -I$(abinit_moddir)'
      FCFLAGS_HINTS='-ffree-line-length-huge'
      ;;
    fujitsu)
      abi_fc_vendor_hnt="fujitsu"
      abi_fc_version_hnt="default"
      abi_sys_spec_hnt="default"
      FCFLAGS_FIXEDFORM='-Fixed -X7'
      FCFLAGS_FREEFORM='-Free -X9'
      FCFLAGS_MODDIR='-M $(abinit_moddir)'
      FCFLAGS_HINTS='-Am -Ee -Ep'
      abi_fc_wrap='yes'
      FCFLAGS_OPENMP='--openmp'
      FCFLAGS_PIC='-K PIC'
      ;;
    pathscale)
      abi_fc_vendor_hnt="pathscale"
      abi_fc_version_hnt="default"
      abi_sys_spec_hnt="default"
      FCFLAGS_BIGENDIAN='-byteswapio'
      FCFLAGS_32BITS='-m32 -align32'
      FCFLAGS_64BITS='-m64 -align64'
      FCFLAGS_FIXEDFORM='-fixedform'
      FCFLAGS_FREEFORM='-freeform'
      FCFLAGS_PIC='-fPIC'
      FCFLAGS_MODDIR='-module $(abinit_moddir)'
      FCFLAGS_HINTS='-extend-source'
      FCFLAGS_OPENMP='-mp'
      ;;
    nag)
      abi_fc_vendor_hnt="nag"
      abi_fc_version_hnt="default"
      abi_sys_spec_hnt="default"
      FCFLAGS_64BITS='-64t'
      FCFLAGS_FIXEDFORM='-fixed'
      FCFLAGS_FREEFORM='-free'
      FCFLAGS_PIC='-PIC'
      FCFLAGS_OPENMP='-openmp'
      FCFLAGS_MODDIR='-mdir $(abinit_moddir) -I$(abinit_moddir)'
      FCFLAGS_HINTS='-DFC_NAG  -w -kind=byte -gline -dcfuns -C=intovf -C=present -C=array -mismatch'
      ;;
    intel)
      abi_fc_vendor_hnt="intel"
      case "${abi_fc_version}" in
        15.0)
          abi_fc_version_hnt="15.0"
          case "${abi_sys_spec}" in
            *-ia64)
              abi_sys_spec_hnt="*-ia64"
              FCFLAGS_HINTS='-extend_source'
              FCFLAGS_PIC='-fPIC'
              FCFLAGS_FREEFORM='-free'
              FC_LDFLAGS_HINTS='-static-intel -static-libgcc'
              FCFLAGS_OPENMP='-qopenmp'
              FCFLAGS_BIGENDIAN='-convert big_endian'
              FCFLAGS_FIXEDFORM='-fixed'
              FCFLAGS_MODDIR='-module $(abinit_moddir)'
              ;;
            *)
              abi_sys_spec_hnt="default"
              FCFLAGS_BIGENDIAN='-convert big_endian'
              FCFLAGS_FIXEDFORM='-fixed'
              FCFLAGS_FREEFORM='-free'
              FCFLAGS_MODDIR='-module $(abinit_moddir)'
              FCFLAGS_PIC='-fPIC'
              FCFLAGS_HINTS='-extend-source -noaltparam -nofpscomp'
              FC_LDFLAGS_HINTS='-static-intel -static-libgcc'
              FCFLAGS_OPENMP='-qopenmp'
              ;;
          esac   # [case: abi_sys_spec, indent: 4, item: True]
          ;;
        17.0)
          abi_fc_version_hnt="17.0"
          case "${abi_sys_spec}" in
            *-ia64)
              abi_sys_spec_hnt="*-ia64"
              FCFLAGS_HINTS='-extend_source'
              FCFLAGS_PIC='-fPIC'
              FCFLAGS_FREEFORM='-free'
              FC_LDFLAGS_HINTS=''
              FCFLAGS_OPENMP='-qopenmp'
              FCFLAGS_BIGENDIAN='-convert big_endian'
              FCFLAGS_FIXEDFORM='-fixed'
              FCFLAGS_MODDIR='-module $(abinit_moddir)'
              ;;
            *)
              abi_sys_spec_hnt="default"
              FCFLAGS_BIGENDIAN='-convert big_endian'
              FCFLAGS_FIXEDFORM='-fixed'
              FCFLAGS_FREEFORM='-free'
              FCFLAGS_MODDIR='-module $(abinit_moddir)'
              FCFLAGS_PIC='-fPIC'
              FCFLAGS_HINTS=''
              FC_LDFLAGS_HINTS=''
              FCFLAGS_OPENMP='-qopenmp'
              ;;
          esac   # [case: abi_sys_spec, indent: 4, item: True]
          ;;
        16.0)
          abi_fc_version_hnt="16.0"
          case "${abi_sys_spec}" in
            *-ia64)
              abi_sys_spec_hnt="*-ia64"
              FCFLAGS_HINTS='-extend_source'
              FCFLAGS_PIC='-fPIC'
              FCFLAGS_FREEFORM='-free'
              FC_LDFLAGS_HINTS='-static-intel -static-libgcc'
              FCFLAGS_OPENMP='-qopenmp'
              FCFLAGS_BIGENDIAN='-convert big_endian'
              FCFLAGS_FIXEDFORM='-fixed'
              FCFLAGS_MODDIR='-module $(abinit_moddir)'
              ;;
            *)
              abi_sys_spec_hnt="default"
              FCFLAGS_BIGENDIAN='-convert big_endian'
              FCFLAGS_FIXEDFORM='-fixed'
              FCFLAGS_FREEFORM='-free'
              FCFLAGS_MODDIR='-module $(abinit_moddir)'
              FCFLAGS_PIC='-fPIC'
              FCFLAGS_HINTS='-extend-source -noaltparam -nofpscomp'
              FC_LDFLAGS_HINTS='-static-intel -static-libgcc'
              FCFLAGS_OPENMP='-qopenmp'
              ;;
          esac   # [case: abi_sys_spec, indent: 4, item: True]
          ;;
        18.0)
          abi_fc_version_hnt="18.0"
          case "${abi_sys_spec}" in
            *-ia64)
              abi_sys_spec_hnt="*-ia64"
              FCFLAGS_HINTS='-extend_source'
              FCFLAGS_PIC='-fPIC'
              FCFLAGS_FREEFORM='-free'
              FC_LDFLAGS_HINTS='-static-intel -static-libgcc'
              FCFLAGS_OPENMP='-qopenmp'
              FCFLAGS_BIGENDIAN='-convert big_endian'
              FCFLAGS_FIXEDFORM='-fixed'
              FCFLAGS_MODDIR='-module $(abinit_moddir)'
              ;;
            *)
              abi_sys_spec_hnt="default"
              FCFLAGS_BIGENDIAN='-convert big_endian'
              FCFLAGS_FIXEDFORM='-fixed'
              FCFLAGS_FREEFORM='-free'
              FCFLAGS_MODDIR='-module $(abinit_moddir)'
              FCFLAGS_PIC='-fPIC'
              FCFLAGS_HINTS='-extend-source -noaltparam -nofpscomp'
              FC_LDFLAGS_HINTS='-static-intel -static-libgcc'
              FCFLAGS_OPENMP='-qopenmp'
              ;;
          esac   # [case: abi_sys_spec, indent: 4, item: True]
          ;;
        *)
          abi_fc_version_hnt="default"
          abi_sys_spec_hnt="default"
          FCFLAGS_BIGENDIAN='-convert big_endian'
          FCFLAGS_FIXEDFORM='-fixed'
          FCFLAGS_FREEFORM='-free'
          FCFLAGS_MODDIR='-module $(abinit_moddir)'
          FCFLAGS_PIC='-fPIC'
          FCFLAGS_HINTS='-extend-source -vec-report0 -noaltparam -nofpscomp'
          FC_LDFLAGS_HINTS='-static-intel -static-libgcc'
          FCFLAGS_OPENMP='-openmp'
          ;;
      esac   # [case: abi_fc_version, indent: 2, item: True]
      ;;
  esac   # [case: abi_fc_vendor, indent: 0, item: True]

  dnl Display settings
  AC_MSG_RESULT([${abi_fc_vendor_hnt}/${abi_fc_version_hnt}/${abi_sys_spec_hnt}])

])
m4trace:config/m4/auto-incflags.m4:25: -1- AC_DEFUN([ABI_INCFLAGS_CORRECT], [
  abi_extra_incs=""
  AC_MSG_NOTICE([correcting include flags])

  AC_MSG_CHECKING([whether to postpone -I/usr/include for algo])
  tmp_incs=`echo "${lib_%s_incs}" | grep -- '-I/usr/include[ $]'`
  if test "${tmp_incs}" = ""; then
    AC_MSG_RESULT([no])
  else
    AC_MSG_RESULT([yes])
    abi_extra_incs="-I/usr/include"
    lib_algo_incs=`echo "${lib_algo_incs}" | sed -e 's,-I/usr/include[ $],,'`
  fi
  AC_MSG_CHECKING([whether to postpone -I/usr/include for bigdft])
  tmp_incs=`echo "${lib_%s_incs}" | grep -- '-I/usr/include[ $]'`
  if test "${tmp_incs}" = ""; then
    AC_MSG_RESULT([no])
  else
    AC_MSG_RESULT([yes])
    abi_extra_incs="-I/usr/include"
    lib_bigdft_incs=`echo "${lib_bigdft_incs}" | sed -e 's,-I/usr/include[ $],,'`
  fi
  AC_MSG_CHECKING([whether to postpone -I/usr/include for etsf_io])
  tmp_incs=`echo "${lib_%s_incs}" | grep -- '-I/usr/include[ $]'`
  if test "${tmp_incs}" = ""; then
    AC_MSG_RESULT([no])
  else
    AC_MSG_RESULT([yes])
    abi_extra_incs="-I/usr/include"
    lib_etsf_io_incs=`echo "${lib_etsf_io_incs}" | sed -e 's,-I/usr/include[ $],,'`
  fi
  AC_MSG_CHECKING([whether to postpone -I/usr/include for fft])
  tmp_incs=`echo "${lib_%s_incs}" | grep -- '-I/usr/include[ $]'`
  if test "${tmp_incs}" = ""; then
    AC_MSG_RESULT([no])
  else
    AC_MSG_RESULT([yes])
    abi_extra_incs="-I/usr/include"
    lib_fft_incs=`echo "${lib_fft_incs}" | sed -e 's,-I/usr/include[ $],,'`
  fi
  AC_MSG_CHECKING([whether to postpone -I/usr/include for gpu])
  tmp_incs=`echo "${lib_%s_incs}" | grep -- '-I/usr/include[ $]'`
  if test "${tmp_incs}" = ""; then
    AC_MSG_RESULT([no])
  else
    AC_MSG_RESULT([yes])
    abi_extra_incs="-I/usr/include"
    lib_gpu_incs=`echo "${lib_gpu_incs}" | sed -e 's,-I/usr/include[ $],,'`
  fi
  AC_MSG_CHECKING([whether to postpone -I/usr/include for libxc])
  tmp_incs=`echo "${lib_%s_incs}" | grep -- '-I/usr/include[ $]'`
  if test "${tmp_incs}" = ""; then
    AC_MSG_RESULT([no])
  else
    AC_MSG_RESULT([yes])
    abi_extra_incs="-I/usr/include"
    lib_libxc_incs=`echo "${lib_libxc_incs}" | sed -e 's,-I/usr/include[ $],,'`
  fi
  AC_MSG_CHECKING([whether to postpone -I/usr/include for linalg])
  tmp_incs=`echo "${lib_%s_incs}" | grep -- '-I/usr/include[ $]'`
  if test "${tmp_incs}" = ""; then
    AC_MSG_RESULT([no])
  else
    AC_MSG_RESULT([yes])
    abi_extra_incs="-I/usr/include"
    lib_linalg_incs=`echo "${lib_linalg_incs}" | sed -e 's,-I/usr/include[ $],,'`
  fi
  AC_MSG_CHECKING([whether to postpone -I/usr/include for math])
  tmp_incs=`echo "${lib_%s_incs}" | grep -- '-I/usr/include[ $]'`
  if test "${tmp_incs}" = ""; then
    AC_MSG_RESULT([no])
  else
    AC_MSG_RESULT([yes])
    abi_extra_incs="-I/usr/include"
    lib_math_incs=`echo "${lib_math_incs}" | sed -e 's,-I/usr/include[ $],,'`
  fi
  AC_MSG_CHECKING([whether to postpone -I/usr/include for mpi])
  tmp_incs=`echo "${lib_%s_incs}" | grep -- '-I/usr/include[ $]'`
  if test "${tmp_incs}" = ""; then
    AC_MSG_RESULT([no])
  else
    AC_MSG_RESULT([yes])
    abi_extra_incs="-I/usr/include"
    lib_mpi_incs=`echo "${lib_mpi_incs}" | sed -e 's,-I/usr/include[ $],,'`
  fi
  AC_MSG_CHECKING([whether to postpone -I/usr/include for netcdf])
  tmp_incs=`echo "${lib_%s_incs}" | grep -- '-I/usr/include[ $]'`
  if test "${tmp_incs}" = ""; then
    AC_MSG_RESULT([no])
  else
    AC_MSG_RESULT([yes])
    abi_extra_incs="-I/usr/include"
    lib_netcdf_incs=`echo "${lib_netcdf_incs}" | sed -e 's,-I/usr/include[ $],,'`
  fi
  AC_MSG_CHECKING([whether to postpone -I/usr/include for psml])
  tmp_incs=`echo "${lib_%s_incs}" | grep -- '-I/usr/include[ $]'`
  if test "${tmp_incs}" = ""; then
    AC_MSG_RESULT([no])
  else
    AC_MSG_RESULT([yes])
    abi_extra_incs="-I/usr/include"
    lib_psml_incs=`echo "${lib_psml_incs}" | sed -e 's,-I/usr/include[ $],,'`
  fi
  AC_MSG_CHECKING([whether to postpone -I/usr/include for timer])
  tmp_incs=`echo "${lib_%s_incs}" | grep -- '-I/usr/include[ $]'`
  if test "${tmp_incs}" = ""; then
    AC_MSG_RESULT([no])
  else
    AC_MSG_RESULT([yes])
    abi_extra_incs="-I/usr/include"
    lib_timer_incs=`echo "${lib_timer_incs}" | sed -e 's,-I/usr/include[ $],,'`
  fi
  AC_MSG_CHECKING([whether to postpone -I/usr/include for triqs])
  tmp_incs=`echo "${lib_%s_incs}" | grep -- '-I/usr/include[ $]'`
  if test "${tmp_incs}" = ""; then
    AC_MSG_RESULT([no])
  else
    AC_MSG_RESULT([yes])
    abi_extra_incs="-I/usr/include"
    lib_triqs_incs=`echo "${lib_triqs_incs}" | sed -e 's,-I/usr/include[ $],,'`
  fi
  AC_MSG_CHECKING([whether to postpone -I/usr/include for wannier90])
  tmp_incs=`echo "${lib_%s_incs}" | grep -- '-I/usr/include[ $]'`
  if test "${tmp_incs}" = ""; then
    AC_MSG_RESULT([no])
  else
    AC_MSG_RESULT([yes])
    abi_extra_incs="-I/usr/include"
    lib_wannier90_incs=`echo "${lib_wannier90_incs}" | sed -e 's,-I/usr/include[ $],,'`
  fi
  AC_MSG_CHECKING([whether to postpone -I/usr/include for yaml])
  tmp_incs=`echo "${lib_%s_incs}" | grep -- '-I/usr/include[ $]'`
  if test "${tmp_incs}" = ""; then
    AC_MSG_RESULT([no])
  else
    AC_MSG_RESULT([yes])
    abi_extra_incs="-I/usr/include"
    lib_yaml_incs=`echo "${lib_yaml_incs}" | sed -e 's,-I/usr/include[ $],,'`
  fi
  unset tmp_incs

  AC_SUBST(abi_extra_incs)
])
m4trace:config/m4/auto-linking.m4:22: -1- AC_DEFUN([ABI_FALLBACKS_PARAMS], [

  dnl Include flags
  if test "${enable_bigdft}" = "yes"; then
    lib_bigdft_incs="${fallbacks_incs}"
  fi
  if test "${enable_etsf_io}" = "yes"; then
    lib_etsf_io_incs="${fallbacks_incs}"
  fi
  if test "${enable_libxc}" = "yes"; then
    lib_libxc_incs="${fallbacks_incs}"
  fi
  if test "${enable_linalg}" = "yes"; then
    lib_linalg_incs="${fallbacks_incs}"
  fi
  if test "${enable_netcdf}" = "yes"; then
    lib_netcdf_incs="${fallbacks_incs}"
  fi

  dnl Library flags
  if test "${enable_atompaw}" = "yes"; then
    lib_atompaw_libs='-L$(fallbacks_instdir)/lib -latompaw'
  fi
  if test "${enable_bigdft}" = "yes"; then
    lib_bigdft_libs='-L$(fallbacks_instdir)/lib -lbigdft-1 -labinit -lyaml'
  fi
  if test "${enable_etsf_io}" = "yes"; then
    lib_etsf_io_libs='-L$(fallbacks_instdir)/lib -letsf_io_utils -letsf_io -letsf_io_low_level'
  fi
  if test "${enable_libxc}" = "yes"; then
    lib_libxc_libs='-L$(fallbacks_instdir)/lib -lxcf90 -lxc'
  fi
  if test "${enable_linalg}" = "yes"; then
    lib_linalg_libs='-L$(fallbacks_instdir)/lib -llapack -lblas'
  fi
  if test "${enable_netcdf}" = "yes"; then
    lib_netcdf_libs='-L$(fallbacks_instdir)/lib -lnetcdf'
  fi
  if test "${enable_wannier90}" = "yes"; then
    lib_wannier90_libs='-L$(fallbacks_instdir)/lib -lwannier90'
  fi

  dnl Binary command lines
  if test "${enable_atompaw}" = "yes"; then
    run_atompaw="${fallbacks_instdir}/bin/atompaw-abinit"
    run_graphatom="${fallbacks_instdir}/bin/graphatom-abinit"
  else
    run_atompaw="${ATOMPAW_BIN}"
    run_graphatom="${GRAPHATOM_BIN}"
  fi
  AC_SUBST(run_atompaw)
  AC_SUBST(run_graphatom)

  if test "${enable_etsf_io}" = "yes"; then
    run_etsf_io="${fallbacks_instdir}/bin/etsf_io-abinit"
  else
    run_etsf_io="${ETSF_IO_BIN}"
  fi
  AC_SUBST(run_etsf_io)

  if test "${enable_netcdf}" = "yes"; then
    run_nc_config="${fallbacks_instdir}/bin/nc-config-abinit"
    run_nccopy="${fallbacks_instdir}/bin/nccopy-abinit"
    run_ncdump="${fallbacks_instdir}/bin/ncdump-abinit"
    run_ncgen="${fallbacks_instdir}/bin/ncgen-abinit"
    run_ncgen3="${fallbacks_instdir}/bin/ncgen3-abinit"
  else
    run_nc_config="${NC_CONFIG_BIN}"
    run_nccopy="${NCCOPY_BIN}"
    run_ncdump="${NCDUMP_BIN}"
    run_ncgen="${NCGEN_BIN}"
    run_ncgen3="${NCGEN3_BIN}"
  fi
  AC_SUBST(run_nc_config)
  AC_SUBST(run_nccopy)
  AC_SUBST(run_ncdump)
  AC_SUBST(run_ncgen)
  AC_SUBST(run_ncgen3)

  if test "${enable_wannier90}" = "yes"; then
    run_wannier90_x="${fallbacks_instdir}/bin/wannier90.x-abinit"
    run_postw90_x="${fallbacks_instdir}/bin/postw90.x-abinit"
    run_w90chk2chk_x="${fallbacks_instdir}/bin/w90chk2chk.x-abinit"
  else
    run_wannier90_x="${WANNIER90_X_BIN}"
    run_postw90_x="${POSTW90_X_BIN}"
    run_w90chk2chk_x="${W90CHK2CHK_X_BIN}"
  fi
  AC_SUBST(run_wannier90_x)
  AC_SUBST(run_postw90_x)
  AC_SUBST(run_w90chk2chk_x)

])
m4trace:config/m4/auto-optim.m4:3: -1- AC_DEFUN([ABI_CC_OPTFLAGS], [
  dnl Init
  abi_cc_vendor_opt="none"
  abi_cc_version_opt="none"
  abi_cpu_spec_opt="none"

  dnl Look for optimizations
  AC_MSG_CHECKING([which cc optimizations to apply])

  dnl Case built from config/optim/cc_*.conf
  case "${abi_cc_vendor}" in
    ibm)
      abi_cc_vendor_opt="ibm"
      abi_cc_version_opt="default"
      case "${abi_cpu_spec}" in
        ibm_powerpc)
          abi_cpu_spec_opt="ibm_powerpc"
          case "${enable_optim}" in
            aggressive)
              enable_optim_opt="aggressive"
              CFLAGS_OPTIM="-O4 -qarch=auto -qtune=auto -qstrict -qspill=2000"
              ;;
            safe)
              enable_optim_opt="safe"
              CFLAGS_OPTIM="-O2 -qarch=auto -qtune=auto -qstrict -qspill=2000"
              ;;
            standard)
              enable_optim_opt="standard"
              CFLAGS_OPTIM="-O3 -qarch=auto -qtune=auto -qstrict -qspill=2000"
              ;;
          esac   # [case: enable_optim, indent: 4, item: True]
          ;;
        ibm_powerpc64)
          abi_cpu_spec_opt="ibm_powerpc64"
          case "${enable_optim}" in
            aggressive)
              enable_optim_opt="aggressive"
              CFLAGS_OPTIM="-O4 -qarch=auto -qtune=auto -qstrict -qspill=2000"
              ;;
            safe)
              enable_optim_opt="safe"
              CFLAGS_OPTIM="-O2 -qarch=auto -qtune=auto -qstrict -qspill=2000"
              ;;
            standard)
              enable_optim_opt="standard"
              CFLAGS_OPTIM="-O3 -qarch=auto -qtune=auto -qstrict -qspill=2000"
              ;;
          esac   # [case: enable_optim, indent: 4, item: True]
          ;;
        *)
          abi_cpu_spec_opt="default"
          case "${enable_optim}" in
            aggressive)
              enable_optim_opt="aggressive"
              CFLAGS_OPTIM="-O3"
              ;;
            safe)
              enable_optim_opt="safe"
              CFLAGS_OPTIM="-O2"
              ;;
            standard)
              enable_optim_opt="standard"
              CFLAGS_OPTIM="-O2"
              ;;
          esac   # [case: enable_optim, indent: 4, item: True]
          ;;
      esac   # [case: abi_cpu_spec, indent: 2, item: True]
      ;;
    gnu)
      abi_cc_vendor_opt="gnu"
      abi_cc_version_opt="default"
      abi_cpu_spec_opt="default"
      case "${enable_optim}" in
        aggressive)
          enable_optim_opt="aggressive"
          CFLAGS_OPTIM="-O3 -mtune=native -march=native"
          ;;
        safe)
          enable_optim_opt="safe"
          CFLAGS_OPTIM="-O2"
          ;;
        standard)
          enable_optim_opt="standard"
          CFLAGS_OPTIM="-O2 -mtune=native -march=native"
          ;;
      esac   # [case: enable_optim, indent: 2, item: True]
      ;;
    open64)
      abi_cc_vendor_opt="open64"
      abi_cc_version_opt="default"
      case "${abi_cpu_spec}" in
        intel_pentium4)
          abi_cpu_spec_opt="intel_pentium4"
          case "${enable_optim}" in
            aggressive)
              enable_optim_opt="aggressive"
              CFLAGS_OPTIM="-O3 -march=pentium4 -msse2"
              ;;
            safe)
              enable_optim_opt="safe"
              CFLAGS_OPTIM="-O2 -march=pentium4 -msse2"
              ;;
            standard)
              enable_optim_opt="standard"
              CFLAGS_OPTIM="-O2 -march=pentium4 -msse2"
              ;;
          esac   # [case: enable_optim, indent: 4, item: True]
          ;;
        amd_opteron)
          abi_cpu_spec_opt="amd_opteron"
          case "${enable_optim}" in
            aggressive)
              enable_optim_opt="aggressive"
              CFLAGS_OPTIM="-O3 -march=opteron -msse2"
              ;;
            safe)
              enable_optim_opt="safe"
              CFLAGS_OPTIM="-O2 -march=opteron -msse2"
              ;;
            standard)
              enable_optim_opt="standard"
              CFLAGS_OPTIM="-O2 -march=opteron -msse2"
              ;;
          esac   # [case: enable_optim, indent: 4, item: True]
          ;;
        *)
          abi_cpu_spec_opt="default"
          case "${enable_optim}" in
            aggressive)
              enable_optim_opt="aggressive"
              CFLAGS_OPTIM="-O3"
              ;;
            safe)
              enable_optim_opt="safe"
              CFLAGS_OPTIM="-O2"
              ;;
            standard)
              enable_optim_opt="standard"
              CFLAGS_OPTIM="-O2"
              ;;
          esac   # [case: enable_optim, indent: 4, item: True]
          ;;
      esac   # [case: abi_cpu_spec, indent: 2, item: True]
      ;;
    pathscale)
      abi_cc_vendor_opt="pathscale"
      abi_cc_version_opt="default"
      case "${abi_cpu_spec}" in
        intel_pentium4)
          abi_cpu_spec_opt="intel_pentium4"
          case "${enable_optim}" in
            aggressive)
              enable_optim_opt="aggressive"
              CFLAGS_OPTIM="-O3 -march=pentium4 -msse2"
              ;;
            safe)
              enable_optim_opt="safe"
              CFLAGS_OPTIM="-O2 -march=pentium4 -msse2"
              ;;
            standard)
              enable_optim_opt="standard"
              CFLAGS_OPTIM="-O2 -march=pentium4 -msse2"
              ;;
          esac   # [case: enable_optim, indent: 4, item: True]
          ;;
        amd_opteron)
          abi_cpu_spec_opt="amd_opteron"
          case "${enable_optim}" in
            aggressive)
              enable_optim_opt="aggressive"
              CFLAGS_OPTIM="-O3 -march=opteron -msse2"
              ;;
            safe)
              enable_optim_opt="safe"
              CFLAGS_OPTIM="-O2 -march=opteron -msse2"
              ;;
            standard)
              enable_optim_opt="standard"
              CFLAGS_OPTIM="-O2 -march=opteron -msse2"
              ;;
          esac   # [case: enable_optim, indent: 4, item: True]
          ;;
        *)
          abi_cpu_spec_opt="default"
          case "${enable_optim}" in
            aggressive)
              enable_optim_opt="aggressive"
              CFLAGS_OPTIM="-O3"
              ;;
            safe)
              enable_optim_opt="safe"
              CFLAGS_OPTIM="-O2"
              ;;
            standard)
              enable_optim_opt="standard"
              CFLAGS_OPTIM="-O2"
              ;;
          esac   # [case: enable_optim, indent: 4, item: True]
          ;;
      esac   # [case: abi_cpu_spec, indent: 2, item: True]
      ;;
    intel)
      abi_cc_vendor_opt="intel"
      abi_cc_version_opt="default"
      abi_cpu_spec_opt="default"
      case "${enable_optim}" in
        aggressive)
          enable_optim_opt="aggressive"
          CFLAGS_OPTIM="-O3"
          ;;
        safe)
          enable_optim_opt="safe"
          CFLAGS_OPTIM="-O2"
          ;;
        standard)
          enable_optim_opt="standard"
          CFLAGS_OPTIM="-O2"
          ;;
      esac   # [case: enable_optim, indent: 2, item: True]
      ;;
  esac   # [case: abi_cc_vendor, indent: 0, item: True]

  dnl Display settings
  AC_MSG_RESULT([${abi_cc_vendor_opt}/${abi_cc_version_opt}/${abi_cpu_spec_opt}])

])
m4trace:config/m4/auto-optim.m4:231: -1- AC_DEFUN([ABI_CXX_OPTFLAGS], [
  dnl Init
  abi_cxx_vendor_opt="none"
  abi_cxx_version_opt="none"
  abi_cpu_spec_opt="none"

  dnl Look for optimizations
  AC_MSG_CHECKING([which cxx optimizations to apply])

  dnl Case built from config/optim/cxx_*.conf
  case "${abi_cxx_vendor}" in
    ibm)
      abi_cxx_vendor_opt="ibm"
      abi_cxx_version_opt="default"
      case "${abi_cpu_spec}" in
        ibm_powerpc)
          abi_cpu_spec_opt="ibm_powerpc"
          case "${enable_optim}" in
            aggressive)
              enable_optim_opt="aggressive"
              CXXFLAGS_OPTIM="-O4 -qarch=auto -qtune=auto -qstrict -qspill=2000 -qessl"
              ;;
            safe)
              enable_optim_opt="safe"
              CXXFLAGS_OPTIM="-O2 -qarch=auto -qtune=auto -qstrict -qspill=2000 -qessl"
              ;;
            standard)
              enable_optim_opt="standard"
              CXXFLAGS_OPTIM="-O3 -qarch=auto -qtune=auto -qstrict -qspill=2000 -qessl"
              ;;
          esac   # [case: enable_optim, indent: 4, item: True]
          ;;
        ibm_powerpc64)
          abi_cpu_spec_opt="ibm_powerpc64"
          case "${enable_optim}" in
            aggressive)
              enable_optim_opt="aggressive"
              CXXFLAGS_OPTIM="-O4 -qarch=auto -qtune=auto -qstrict -qspill=2000 -qessl"
              ;;
            safe)
              enable_optim_opt="safe"
              CXXFLAGS_OPTIM="-O2 -qarch=auto -qtune=auto -qstrict -qspill=2000 -qessl"
              ;;
            standard)
              enable_optim_opt="standard"
              CXXFLAGS_OPTIM="-O3 -qarch=auto -qtune=auto -qstrict -qspill=2000 -qessl"
              ;;
          esac   # [case: enable_optim, indent: 4, item: True]
          ;;
        *)
          abi_cpu_spec_opt="default"
          case "${enable_optim}" in
            aggressive)
              enable_optim_opt="aggressive"
              CXXFLAGS_OPTIM="-O3"
              ;;
            safe)
              enable_optim_opt="safe"
              CXXFLAGS_OPTIM="-O2"
              ;;
            standard)
              enable_optim_opt="standard"
              CXXFLAGS_OPTIM="-O2"
              ;;
          esac   # [case: enable_optim, indent: 4, item: True]
          ;;
      esac   # [case: abi_cpu_spec, indent: 2, item: True]
      ;;
    gnu)
      abi_cxx_vendor_opt="gnu"
      abi_cxx_version_opt="default"
      abi_cpu_spec_opt="default"
      case "${enable_optim}" in
        aggressive)
          enable_optim_opt="aggressive"
          CXXFLAGS_OPTIM="-O3 -mtune=native -march=native"
          ;;
        safe)
          enable_optim_opt="safe"
          CXXFLAGS_OPTIM="-O2"
          ;;
        standard)
          enable_optim_opt="standard"
          CXXFLAGS_OPTIM="-O2 -mtune=native -march=native"
          ;;
      esac   # [case: enable_optim, indent: 2, item: True]
      ;;
    pathscale)
      abi_cxx_vendor_opt="pathscale"
      abi_cxx_version_opt="default"
      case "${abi_cpu_spec}" in
        intel_pentium4)
          abi_cpu_spec_opt="intel_pentium4"
          case "${enable_optim}" in
            aggressive)
              enable_optim_opt="aggressive"
              CXXFLAGS_OPTIM="-O3 -march=pentium4 -msse2"
              ;;
            safe)
              enable_optim_opt="safe"
              CXXFLAGS_OPTIM="-O2 -march=pentium4 -msse2"
              ;;
            standard)
              enable_optim_opt="standard"
              CXXFLAGS_OPTIM="-O2 -march=pentium4 -msse2"
              ;;
          esac   # [case: enable_optim, indent: 4, item: True]
          ;;
        amd_opteron)
          abi_cpu_spec_opt="amd_opteron"
          case "${enable_optim}" in
            aggressive)
              enable_optim_opt="aggressive"
              CXXFLAGS_OPTIM="-O3 -march=opteron -msse2"
              ;;
            safe)
              enable_optim_opt="safe"
              CXXFLAGS_OPTIM="-O2 -march=opteron -msse2"
              ;;
            standard)
              enable_optim_opt="standard"
              CXXFLAGS_OPTIM="-O2 -march=opteron -msse2"
              ;;
          esac   # [case: enable_optim, indent: 4, item: True]
          ;;
        *)
          abi_cpu_spec_opt="default"
          case "${enable_optim}" in
            aggressive)
              enable_optim_opt="aggressive"
              CXXFLAGS_OPTIM="-O3"
              ;;
            safe)
              enable_optim_opt="safe"
              CXXFLAGS_OPTIM="-O2"
              ;;
            standard)
              enable_optim_opt="standard"
              CXXFLAGS_OPTIM="-O2"
              ;;
          esac   # [case: enable_optim, indent: 4, item: True]
          ;;
      esac   # [case: abi_cpu_spec, indent: 2, item: True]
      ;;
    intel)
      abi_cxx_vendor_opt="intel"
      abi_cxx_version_opt="default"
      abi_cpu_spec_opt="default"
      case "${enable_optim}" in
        aggressive)
          enable_optim_opt="aggressive"
          CXXFLAGS_OPTIM="-O3"
          ;;
        safe)
          enable_optim_opt="safe"
          CXXFLAGS_OPTIM="-O2"
          ;;
        standard)
          enable_optim_opt="standard"
          CXXFLAGS_OPTIM="-O2"
          ;;
      esac   # [case: enable_optim, indent: 2, item: True]
      ;;
  esac   # [case: abi_cxx_vendor, indent: 0, item: True]

  dnl Display settings
  AC_MSG_RESULT([${abi_cxx_vendor_opt}/${abi_cxx_version_opt}/${abi_cpu_spec_opt}])

])
m4trace:config/m4/auto-optim.m4:402: -1- AC_DEFUN([ABI_FC_OPTFLAGS], [
  dnl Init
  abi_fc_vendor_opt="none"
  abi_fc_version_opt="none"
  abi_cpu_spec_opt="none"

  dnl Look for optimizations
  AC_MSG_CHECKING([which fc optimizations to apply])

  dnl Case built from config/optim/fc_*.conf
  case "${abi_fc_vendor}" in
    ibm)
      abi_fc_vendor_opt="ibm"
      abi_fc_version_opt="default"
      case "${abi_cpu_spec}" in
        ibm_powerpc)
          abi_cpu_spec_opt="ibm_powerpc"
          case "${enable_optim}" in
            aggressive)
              enable_optim_opt="aggressive"
              FCFLAGS_OPTIM="-O4 -qmaxmem=65536 -qspill=2000 -qarch=auto -qtune=auto -qcache=auto -qstrict -qsuppress=1520-022:1520-031"
              ;;
            safe)
              enable_optim_opt="safe"
              FCFLAGS_OPTIM="-O2 -qmaxmem=65536 -qspill=2000 -qarch=auto -qtune=auto -qcache=auto -qstrict -qsuppress=1520-022:1520-031"
              ;;
            standard)
              enable_optim_opt="standard"
              FCFLAGS_OPTIM="-O3 -qmaxmem=65536 -qspill=2000 -qarch=auto -qtune=auto -qcache=auto -qstrict -qsuppress=1520-022:1520-031"
              ;;
          esac   # [case: enable_optim, indent: 4, item: True]
          ;;
        ibm_powerpc64)
          abi_cpu_spec_opt="ibm_powerpc64"
          case "${enable_optim}" in
            aggressive)
              enable_optim_opt="aggressive"
              FCFLAGS_OPTIM="-O4 -qmaxmem=65536 -qspill=2000 -qarch=auto -qtune=auto -qcache=auto -qstrict -qsuppress=1520-022:1520-031"
              ;;
            safe)
              enable_optim_opt="safe"
              FCFLAGS_OPTIM="-O2 -qmaxmem=65536 -qspill=2000 -qarch=auto -qtune=auto -qcache=auto -qstrict -qsuppress=1520-022:1520-031"
              ;;
            standard)
              enable_optim_opt="standard"
              FCFLAGS_OPTIM="-O3 -qmaxmem=65536 -qspill=2000 -qarch=auto -qtune=auto -qcache=auto -qstrict -qsuppress=1520-022:1520-031"
              ;;
          esac   # [case: enable_optim, indent: 4, item: True]
          ;;
        *)
          abi_cpu_spec_opt="default"
          case "${enable_optim}" in
            aggressive)
              enable_optim_opt="aggressive"
              FCFLAGS_OPTIM="-O3"
              ;;
            safe)
              enable_optim_opt="safe"
              FCFLAGS_OPTIM="-O2"
              ;;
            standard)
              enable_optim_opt="standard"
              FCFLAGS_OPTIM="-O2"
              ;;
          esac   # [case: enable_optim, indent: 4, item: True]
          ;;
      esac   # [case: abi_cpu_spec, indent: 2, item: True]
      ;;
    gnu)
      abi_fc_vendor_opt="gnu"
      case "${abi_fc_version}" in
        4.7)
          abi_fc_version_opt="4.7"
          abi_cpu_spec_opt="default"
          case "${enable_optim}" in
            aggressive)
              enable_optim_opt="aggressive"
              FCFLAGS_OPTIM="-O3 -mtune=native -march=native -faggressive-function-elimination -fstack-arrays"
              ;;
            safe)
              enable_optim_opt="safe"
              FCFLAGS_OPTIM="-O2"
              ;;
            standard)
              enable_optim_opt="standard"
              FCFLAGS_OPTIM="-O2 -mtune=native -march=native"
              ;;
          esac   # [case: enable_optim, indent: 4, item: True]
          ;;
        *)
          abi_fc_version_opt="default"
          abi_cpu_spec_opt="default"
          case "${enable_optim}" in
            aggressive)
              enable_optim_opt="aggressive"
              FCFLAGS_OPTIM="-O3 -mtune=native -march=native -funroll-loops -faggressive-function-elimination"
              ;;
            safe)
              enable_optim_opt="safe"
              FCFLAGS_OPTIM="-O2"
              ;;
            standard)
              enable_optim_opt="standard"
              FCFLAGS_OPTIM="-O2 -mtune=native -march=native"
              ;;
          esac   # [case: enable_optim, indent: 4, item: True]
          ;;
      esac   # [case: abi_fc_version, indent: 2, item: True]
      ;;
    open64)
      abi_fc_vendor_opt="open64"
      abi_fc_version_opt="default"
      case "${abi_cpu_spec}" in
        intel_pentium4)
          abi_cpu_spec_opt="intel_pentium4"
          case "${enable_optim}" in
            aggressive)
              enable_optim_opt="aggressive"
              FCFLAGS_OPTIM="-O3 -march=pentium4 -msse2"
              ;;
            safe)
              enable_optim_opt="safe"
              FCFLAGS_OPTIM="-O2 -march=pentium4 -msse2"
              ;;
            standard)
              enable_optim_opt="standard"
              FCFLAGS_OPTIM="-O2 -march=pentium4 -msse2"
              ;;
          esac   # [case: enable_optim, indent: 4, item: True]
          ;;
        amd_opteron)
          abi_cpu_spec_opt="amd_opteron"
          case "${enable_optim}" in
            aggressive)
              enable_optim_opt="aggressive"
              FCFLAGS_OPTIM="-O3 -march=opteron -msse2"
              ;;
            safe)
              enable_optim_opt="safe"
              FCFLAGS_OPTIM="-O2 -march=opteron -msse2"
              ;;
            standard)
              enable_optim_opt="standard"
              FCFLAGS_OPTIM="-O2 -march=opteron -msse2"
              ;;
          esac   # [case: enable_optim, indent: 4, item: True]
          ;;
        *)
          abi_cpu_spec_opt="default"
          case "${enable_optim}" in
            aggressive)
              enable_optim_opt="aggressive"
              FCFLAGS_OPTIM="-O3"
              ;;
            safe)
              enable_optim_opt="safe"
              FCFLAGS_OPTIM="-O2"
              ;;
            standard)
              enable_optim_opt="standard"
              FCFLAGS_OPTIM="-O2 -OPT:Olimit=0 -g -ggdbm"
              ;;
          esac   # [case: enable_optim, indent: 4, item: True]
          ;;
      esac   # [case: abi_cpu_spec, indent: 2, item: True]
      ;;
    pgi)
      abi_fc_vendor_opt="pgi"
      abi_fc_version_opt="default"
      abi_cpu_spec_opt="default"
      case "${enable_optim}" in
        aggressive)
          enable_optim_opt="aggressive"
          FCFLAGS_OPTIM="-O3 nehalem-64 -m64"
          ;;
        safe)
          enable_optim_opt="safe"
          FCFLAGS_OPTIM="-O2 -tp nehalem-64 -m64"
          ;;
        standard)
          enable_optim_opt="standard"
          FCFLAGS_OPTIM="-O2 -tp nehalem-64 -m64"
          ;;
      esac   # [case: enable_optim, indent: 2, item: True]
      ;;
    g95)
      abi_fc_vendor_opt="g95"
      abi_fc_version_opt="default"
      case "${abi_cpu_spec}" in
        intel_pentium4)
          abi_cpu_spec_opt="intel_pentium4"
          case "${enable_optim}" in
            aggressive)
              enable_optim_opt="aggressive"
              FCFLAGS_OPTIM="-O3 -march=pentium4 -mmmx -msse -msse2"
              ;;
            safe)
              enable_optim_opt="safe"
              FCFLAGS_OPTIM="-O2 -march=pentium4 -mmmx -msse -msse2"
              ;;
            standard)
              enable_optim_opt="standard"
              FCFLAGS_OPTIM="-O2 -march=pentium4 -mmmx -msse -msse2"
              ;;
          esac   # [case: enable_optim, indent: 4, item: True]
          ;;
        intel_coreduo)
          abi_cpu_spec_opt="intel_coreduo"
          case "${enable_optim}" in
            aggressive)
              enable_optim_opt="aggressive"
              FCFLAGS_OPTIM="-O3 -march=prescott -mmmx -msse -msse2"
              ;;
            safe)
              enable_optim_opt="safe"
              FCFLAGS_OPTIM="-O2 -march=prescott -mmmx -msse -msse2"
              ;;
            standard)
              enable_optim_opt="standard"
              FCFLAGS_OPTIM="-O2 -march=prescott -mmmx -msse -msse2"
              ;;
          esac   # [case: enable_optim, indent: 4, item: True]
          ;;
        intel_xeon)
          abi_cpu_spec_opt="intel_xeon"
          case "${enable_optim}" in
            aggressive)
              enable_optim_opt="aggressive"
              FCFLAGS_OPTIM="-O3 -march=nocona -mmmx -msse -msse2"
              ;;
            safe)
              enable_optim_opt="safe"
              FCFLAGS_OPTIM="-O2 -march=nocona -mmmx -msse"
              ;;
            standard)
              enable_optim_opt="standard"
              FCFLAGS_OPTIM="-O3 -march=nocona -mmmx -msse -msse2"
              ;;
          esac   # [case: enable_optim, indent: 4, item: True]
          ;;
        amd_opteron)
          abi_cpu_spec_opt="amd_opteron"
          case "${enable_optim}" in
            aggressive)
              enable_optim_opt="aggressive"
              FCFLAGS_OPTIM="-O3 -march=opteron"
              ;;
            safe)
              enable_optim_opt="safe"
              FCFLAGS_OPTIM="-O2 -march=opteron"
              ;;
            standard)
              enable_optim_opt="standard"
              FCFLAGS_OPTIM="-O2 -march=opteron"
              ;;
          esac   # [case: enable_optim, indent: 4, item: True]
          ;;
        intel_itanium1)
          abi_cpu_spec_opt="intel_itanium1"
          case "${enable_optim}" in
            aggressive)
              enable_optim_opt="aggressive"
              FCFLAGS_OPTIM="-O3"
              ;;
            safe)
              enable_optim_opt="safe"
              FCFLAGS_OPTIM="-O2"
              ;;
            standard)
              enable_optim_opt="standard"
              FCFLAGS_OPTIM="-O3"
              ;;
          esac   # [case: enable_optim, indent: 4, item: True]
          ;;
        dec_alphaev67)
          abi_cpu_spec_opt="dec_alphaev67"
          case "${enable_optim}" in
            aggressive)
              enable_optim_opt="aggressive"
              FCFLAGS_OPTIM="-O3"
              ;;
            safe)
              enable_optim_opt="safe"
              FCFLAGS_OPTIM="-O2"
              ;;
            standard)
              enable_optim_opt="standard"
              FCFLAGS_OPTIM="-O3"
              ;;
          esac   # [case: enable_optim, indent: 4, item: True]
          ;;
        ibm_powerpc)
          abi_cpu_spec_opt="ibm_powerpc"
          case "${enable_optim}" in
            aggressive)
              enable_optim_opt="aggressive"
              FCFLAGS_OPTIM="-O4 -mpowerpc"
              ;;
            safe)
              enable_optim_opt="safe"
              FCFLAGS_OPTIM="-O2 -mpowerpc"
              ;;
            standard)
              enable_optim_opt="standard"
              FCFLAGS_OPTIM="-O2 -mpowerpc"
              ;;
          esac   # [case: enable_optim, indent: 4, item: True]
          ;;
        dec_alphaev56)
          abi_cpu_spec_opt="dec_alphaev56"
          case "${enable_optim}" in
            aggressive)
              enable_optim_opt="aggressive"
              FCFLAGS_OPTIM="-O3"
              ;;
            safe)
              enable_optim_opt="safe"
              FCFLAGS_OPTIM="-O2"
              ;;
            standard)
              enable_optim_opt="standard"
              FCFLAGS_OPTIM="-O3"
              ;;
          esac   # [case: enable_optim, indent: 4, item: True]
          ;;
        intel_itanium2)
          abi_cpu_spec_opt="intel_itanium2"
          case "${enable_optim}" in
            aggressive)
              enable_optim_opt="aggressive"
              FCFLAGS_OPTIM="-O3"
              ;;
            safe)
              enable_optim_opt="safe"
              FCFLAGS_OPTIM="-O2"
              ;;
            standard)
              enable_optim_opt="standard"
              FCFLAGS_OPTIM="-O3"
              ;;
          esac   # [case: enable_optim, indent: 4, item: True]
          ;;
        amd_athlon)
          abi_cpu_spec_opt="amd_athlon"
          case "${enable_optim}" in
            aggressive)
              enable_optim_opt="aggressive"
              FCFLAGS_OPTIM="-O3 -march=athlon"
              ;;
            safe)
              enable_optim_opt="safe"
              FCFLAGS_OPTIM="-O2 -march=athlon"
              ;;
            standard)
              enable_optim_opt="standard"
              FCFLAGS_OPTIM="-O2 -march=athlon"
              ;;
          esac   # [case: enable_optim, indent: 4, item: True]
          ;;
        intel_core2)
          abi_cpu_spec_opt="intel_core2"
          case "${enable_optim}" in
            aggressive)
              enable_optim_opt="aggressive"
              FCFLAGS_OPTIM="-O3 -march=prescott -mmmx -msse -msse2 -msse3"
              ;;
            safe)
              enable_optim_opt="safe"
              FCFLAGS_OPTIM="-O2 -march=prescott -mmmx -msse -msse2 -msse3"
              ;;
            standard)
              enable_optim_opt="standard"
              FCFLAGS_OPTIM="-O2 -march=prescott -mmmx -msse -msse2 -msse3"
              ;;
          esac   # [case: enable_optim, indent: 4, item: True]
          ;;
        amd_athlon64)
          abi_cpu_spec_opt="amd_athlon64"
          case "${enable_optim}" in
            aggressive)
              enable_optim_opt="aggressive"
              FCFLAGS_OPTIM="-O3 -march=athlon64"
              ;;
            safe)
              enable_optim_opt="safe"
              FCFLAGS_OPTIM="-O2 -march=athlon64"
              ;;
            standard)
              enable_optim_opt="standard"
              FCFLAGS_OPTIM="-O2 -march=athlon64"
              ;;
          esac   # [case: enable_optim, indent: 4, item: True]
          ;;
        intel_pentium3)
          abi_cpu_spec_opt="intel_pentium3"
          case "${enable_optim}" in
            aggressive)
              enable_optim_opt="aggressive"
              FCFLAGS_OPTIM="-O3 -march=pentium3 -mmmx -msse"
              ;;
            safe)
              enable_optim_opt="safe"
              FCFLAGS_OPTIM="-O2 -march=pentium3 -mmmx -msse"
              ;;
            standard)
              enable_optim_opt="standard"
              FCFLAGS_OPTIM="-O2 -march=pentium3 -mmmx -msse"
              ;;
          esac   # [case: enable_optim, indent: 4, item: True]
          ;;
        ibm_powerpc64)
          abi_cpu_spec_opt="ibm_powerpc64"
          case "${enable_optim}" in
            aggressive)
              enable_optim_opt="aggressive"
              FCFLAGS_OPTIM="-O4 -mpowerpc64"
              ;;
            safe)
              enable_optim_opt="safe"
              FCFLAGS_OPTIM="-O2 -mpowerpc64"
              ;;
            standard)
              enable_optim_opt="standard"
              FCFLAGS_OPTIM="-O2 -mpowerpc64"
              ;;
          esac   # [case: enable_optim, indent: 4, item: True]
          ;;
        *)
          abi_cpu_spec_opt="default"
          case "${enable_optim}" in
            aggressive)
              enable_optim_opt="aggressive"
              FCFLAGS_OPTIM="-O3"
              ;;
            safe)
              enable_optim_opt="safe"
              FCFLAGS_OPTIM="-O2"
              ;;
            standard)
              enable_optim_opt="standard"
              FCFLAGS_OPTIM="-O2"
              ;;
          esac   # [case: enable_optim, indent: 4, item: True]
          ;;
      esac   # [case: abi_cpu_spec, indent: 2, item: True]
      ;;
    fujitsu)
      abi_fc_vendor_opt="fujitsu"
      abi_fc_version_opt="default"
      abi_cpu_spec_opt="default"
      case "${enable_optim}" in
        aggressive)
          enable_optim_opt="aggressive"
          FCFLAGS_OPTIM="-Of -X9 -Ps -Wv,-md"
          ;;
        safe)
          enable_optim_opt="safe"
          FCFLAGS_OPTIM="-Of -X9 -Ps -Wv,-md"
          ;;
        standard)
          enable_optim_opt="standard"
          FCFLAGS_OPTIM="-Of -X9 -Ps -Wv,-md"
          ;;
      esac   # [case: enable_optim, indent: 2, item: True]
      ;;
    pathscale)
      abi_fc_vendor_opt="pathscale"
      abi_fc_version_opt="default"
      case "${abi_cpu_spec}" in
        intel_pentium4)
          abi_cpu_spec_opt="intel_pentium4"
          case "${enable_optim}" in
            aggressive)
              enable_optim_opt="aggressive"
              FCFLAGS_OPTIM="-O3 -march=pentium4 -msse2"
              ;;
            safe)
              enable_optim_opt="safe"
              FCFLAGS_OPTIM="-O2 -march=pentium4 -msse2"
              ;;
            standard)
              enable_optim_opt="standard"
              FCFLAGS_OPTIM="-O2 -march=pentium4 -msse2"
              ;;
          esac   # [case: enable_optim, indent: 4, item: True]
          ;;
        amd_opteron)
          abi_cpu_spec_opt="amd_opteron"
          case "${enable_optim}" in
            aggressive)
              enable_optim_opt="aggressive"
              FCFLAGS_OPTIM="-O3 -march=opteron -msse2"
              ;;
            safe)
              enable_optim_opt="safe"
              FCFLAGS_OPTIM="-O2 -march=opteron -msse2"
              ;;
            standard)
              enable_optim_opt="standard"
              FCFLAGS_OPTIM="-O2 -march=opteron -msse2"
              ;;
          esac   # [case: enable_optim, indent: 4, item: True]
          ;;
        *)
          abi_cpu_spec_opt="default"
          case "${enable_optim}" in
            aggressive)
              enable_optim_opt="aggressive"
              FCFLAGS_OPTIM="-O3"
              ;;
            safe)
              enable_optim_opt="safe"
              FCFLAGS_OPTIM="-O2"
              ;;
            standard)
              enable_optim_opt="standard"
              FCFLAGS_OPTIM="-O2"
              ;;
          esac   # [case: enable_optim, indent: 4, item: True]
          ;;
      esac   # [case: abi_cpu_spec, indent: 2, item: True]
      ;;
    nag)
      abi_fc_vendor_opt="nag"
      abi_fc_version_opt="default"
      abi_cpu_spec_opt="default"
      case "${enable_optim}" in
        aggressive)
          enable_optim_opt="aggressive"
          FCFLAGS_OPTIM="-O4"
          ;;
        safe)
          enable_optim_opt="safe"
          FCFLAGS_OPTIM="-O2"
          ;;
        standard)
          enable_optim_opt="standard"
          FCFLAGS_OPTIM="-O3"
          ;;
      esac   # [case: enable_optim, indent: 2, item: True]
      ;;
    intel)
      abi_fc_vendor_opt="intel"
      abi_fc_version_opt="default"
      case "${abi_cpu_spec}" in
        intel_itanium1)
          abi_cpu_spec_opt="intel_itanium1"
          case "${enable_optim}" in
            aggressive)
              enable_optim_opt="aggressive"
              FCFLAGS_OPTIM="-O3 -fp-model fast=1 -fp-relaxed -ip"
              ;;
            safe)
              enable_optim_opt="safe"
              FCFLAGS_OPTIM="-O2 -fp-model precise -fp-speculation=safe"
              ;;
            standard)
              enable_optim_opt="standard"
              FCFLAGS_OPTIM="-O2"
              ;;
          esac   # [case: enable_optim, indent: 4, item: True]
          ;;
        intel_itanium2)
          abi_cpu_spec_opt="intel_itanium2"
          case "${enable_optim}" in
            aggressive)
              enable_optim_opt="aggressive"
              FCFLAGS_OPTIM="-O3 -fp-model fast=1 -fp-relaxed -ip"
              ;;
            safe)
              enable_optim_opt="safe"
              FCFLAGS_OPTIM="-O2 -fp-model precise -fp-speculation=safe"
              ;;
            standard)
              enable_optim_opt="standard"
              FCFLAGS_OPTIM="-O2"
              ;;
          esac   # [case: enable_optim, indent: 4, item: True]
          ;;
        amd_opteron)
          abi_cpu_spec_opt="amd_opteron"
          case "${enable_optim}" in
            aggressive)
              enable_optim_opt="aggressive"
              FCFLAGS_OPTIM="-O3"
              ;;
            safe)
              enable_optim_opt="safe"
              FCFLAGS_OPTIM="-O1"
              ;;
            standard)
              enable_optim_opt="standard"
              FCFLAGS_OPTIM="-O2"
              ;;
          esac   # [case: enable_optim, indent: 4, item: True]
          ;;
        *)
          abi_cpu_spec_opt="default"
          case "${enable_optim}" in
            aggressive)
              enable_optim_opt="aggressive"
              FCFLAGS_OPTIM="-O3 -xHOST"
              ;;
            safe)
              enable_optim_opt="safe"
              FCFLAGS_OPTIM="-O2 -fltconsistency -fp-model precise -fp-speculation=safe -prec-div -prec-sqrt"
              ;;
            standard)
              enable_optim_opt="standard"
              FCFLAGS_OPTIM="-O3"
              ;;
          esac   # [case: enable_optim, indent: 4, item: True]
          ;;
      esac   # [case: abi_cpu_spec, indent: 2, item: True]
      ;;
  esac   # [case: abi_fc_vendor, indent: 0, item: True]

  dnl Display settings
  AC_MSG_RESULT([${abi_fc_vendor_opt}/${abi_fc_version_opt}/${abi_cpu_spec_opt}])

])
m4trace:config/m4/auto-options.m4:31: -1- AC_DEFUN([ABI_OPTIONS_DEFINE], [

  dnl
  dnl --enable arguments
  dnl

  AC_ARG_ENABLE(64bit-flags,
    AC_HELP_STRING([--enable-64bit-flags],
      [Use 64-bit flags (see documentation) (default: no)]))
  AC_SUBST(enable_64bit_flags)

  AC_ARG_ENABLE(avx-safe-mode,
    AC_HELP_STRING([--enable-avx-safe-mode],
      [Disable vectorization in problematic procedures (default: no)]))
  AC_SUBST(enable_avx_safe_mode)

  AC_ARG_ENABLE(bse-unpacked,
    AC_HELP_STRING([--enable-bse-unpacked],
      [Activate Bethe-Salpeter unpacking (EXPERIMENTAL) (default: no)]))
  AC_SUBST(enable_bse_unpacked)

  AC_ARG_ENABLE(cclock,
    AC_HELP_STRING([--enable-cclock],
      [Use C clock for timings (default: no)]))
  AC_SUBST(enable_cclock)

  AC_ARG_ENABLE(config-file,
    AC_HELP_STRING([--enable-config-file],
      [Read options from config file (default: yes)]))
  AC_SUBST(enable_config_file)

  AC_ARG_ENABLE(connectors,
    AC_HELP_STRING([--enable-connectors],
      [Enable detection of external libraries (EXPERIMENTAL) (default: yes)]))
  AC_SUBST(enable_connectors)

  AC_ARG_ENABLE(debug,
    AC_HELP_STRING([--enable-debug],
      [Set debug level (default: basic)]))
  AC_SUBST(enable_debug)

  AC_ARG_ENABLE(exports,
    AC_HELP_STRING([--enable-exports],
      [Activate build of exported libraries (EXPERIMENTAL) (default: no)]))
  AC_SUBST(enable_exports)

  AC_ARG_ENABLE(fallbacks,
    AC_HELP_STRING([--enable-fallbacks],
      [Enable the internal build of external packages (default: yes)]))
  AC_SUBST(enable_fallbacks)

  AC_ARG_ENABLE(fast-check,
    AC_HELP_STRING([--enable-fast-check],
      [Run 'make check' using 4 processors (default: no)]))
  AC_SUBST(enable_fast_check)

  AC_ARG_ENABLE(fc-wrapper,
    AC_HELP_STRING([--enable-fc-wrapper],
      [Wrap Fortran compiler calls (default: no)]))
  AC_SUBST(enable_fc_wrapper)

  AC_ARG_ENABLE(gpu,
    AC_HELP_STRING([--enable-gpu],
      [Activate support for GPU (EXPERIMENTAL) (default: no)]))
  AC_SUBST(enable_gpu)

  AC_ARG_ENABLE(gw-dpc,
    AC_HELP_STRING([--enable-gw-dpc],
      [Activate double-precision GW calculations (EXPERIMENTAL) (default: no)]))
  AC_SUBST(enable_gw_dpc)

  AC_ARG_ENABLE(hints,
    AC_HELP_STRING([--enable-hints],
      [Preset flags to have the source building properly (default: yes)]))
  AC_SUBST(enable_hints)

  AC_ARG_ENABLE(lotf,
    AC_HELP_STRING([--enable-lotf],
      [Activate LOTF functionality (EXPERIMENTAL) (default: no)]))
  AC_SUBST(enable_lotf)

  AC_ARG_ENABLE(macroave,
    AC_HELP_STRING([--enable-macroave],
      [Enable build of macroave (EXPERIMENTAL) (default: yes)]))
  AC_SUBST(enable_macroave)

  AC_ARG_ENABLE(maintainer-checks,
    AC_HELP_STRING([--enable-maintainer-checks],
      [Activate maintainer checks (BuildBot) (default: no)]))
  AC_SUBST(enable_maintainer_checks)

  AC_ARG_ENABLE(memory-profiling,
    AC_HELP_STRING([--enable-memory-profiling],
      [Enable memory profiling (default: None)]))
  AC_SUBST(enable_memory_profiling)

  AC_ARG_ENABLE(mpi,
    AC_HELP_STRING([--enable-mpi],
      [Enable MPI support (default: auto)]))
  AC_SUBST(enable_mpi)

  AC_ARG_ENABLE(mpi-inplace,
    AC_HELP_STRING([--enable-mpi-inplace],
      [Activate support for MPI_IN_PLACE (default: no)]))
  AC_SUBST(enable_mpi_inplace)

  AC_ARG_ENABLE(mpi-io,
    AC_HELP_STRING([--enable-mpi-io],
      [Enable MPI I/O (default: auto)]))
  AC_SUBST(enable_mpi_io)

  AC_ARG_ENABLE(mpi-io-default,
    AC_HELP_STRING([--enable-mpi-io-default],
      [Use MPI-IO as default IO library (change the default value of iomode) (EXPERIMENTAL) (default: no)]))
  AC_SUBST(enable_mpi_io_default)

  AC_ARG_ENABLE(netcdf-default,
    AC_HELP_STRING([--enable-netcdf-default],
      [Use NetCDF as default IO library (change the default value of iomode) (default: no)]))
  AC_SUBST(enable_netcdf_default)

  AC_ARG_ENABLE(openmp,
    AC_HELP_STRING([--enable-openmp],
      [Activate support for OpenMP (EXPERIMENTAL) (default: no)]))
  AC_SUBST(enable_openmp)

  AC_ARG_ENABLE(optim,
    AC_HELP_STRING([--enable-optim],
      [Set optimization level (default: standard)]))
  AC_SUBST(enable_optim)

  AC_ARG_ENABLE(stdin,
    AC_HELP_STRING([--enable-stdin],
      [Tell Abinit to read file lists from standard input (default: yes)]))
  AC_SUBST(enable_stdin)

  AC_ARG_ENABLE(triqs-v1-4,
    AC_HELP_STRING([--enable-triqs-v1-4],
      [Activate internal support for TRIQS 1.4 (default: no)]))
  AC_SUBST(enable_triqs_v1_4)

  AC_ARG_ENABLE(triqs-v2-0,
    AC_HELP_STRING([--enable-triqs-v2-0],
      [Activate internal support for TRIQS 2.0 (This option is dominant over the others versions) (default: no)]))
  AC_SUBST(enable_triqs_v2_0)

  AC_ARG_ENABLE(wannier90-v1,
    AC_HELP_STRING([--enable-wannier90-v1],
      [Activate support for Wannier90 v1.x (default is v2.x) (default: no)]))
  AC_SUBST(enable_wannier90_v1)

  AC_ARG_ENABLE(xml,
    AC_HELP_STRING([--enable-xml],
      [Enable support for XML (default: no)]))
  AC_SUBST(enable_xml)

  AC_ARG_ENABLE(zdot-bugfix,
    AC_HELP_STRING([--enable-zdot-bugfix],
      [Activate workaround for bugged ZDOTC and ZDOTU (default: no)]))
  AC_SUBST(enable_zdot_bugfix)

  dnl
  dnl --with arguments
  dnl

  AC_ARG_WITH(algo-flavor,
    AC_HELP_STRING([--with-algo-flavor],
      [Kind of external algorithms to support (default: none)]))
  AC_SUBST(with_algo_flavor)

  AC_ARG_WITH(algo-incs,
    AC_HELP_STRING([--with-algo-incs],
      [Include parameters for the algorithmic libraries (default: None)]))
  AC_SUBST(with_algo_incs)

  AC_ARG_WITH(algo-libs,
    AC_HELP_STRING([--with-algo-libs],
      [Algorithmic libraries to link Abinit binaries with (default: None)]))
  AC_SUBST(with_algo_libs)

  AC_ARG_WITH(atompaw-bins,
    AC_HELP_STRING([--with-atompaw-bins],
      [Path to the AtomPAW executables (default: None)]))
  AC_SUBST(with_atompaw_bins)

  AC_ARG_WITH(atompaw-incs,
    AC_HELP_STRING([--with-atompaw-incs],
      [Include parameters for AtomPAW support (default: None)]))
  AC_SUBST(with_atompaw_incs)

  AC_ARG_WITH(atompaw-libs,
    AC_HELP_STRING([--with-atompaw-libs],
      [AtomPAW libraries to link Abinit binaries with (default: None)]))
  AC_SUBST(with_atompaw_libs)

  AC_ARG_WITH(bigdft-incs,
    AC_HELP_STRING([--with-bigdft-incs],
      [Include parameters for BigDFT support (default: None)]))
  AC_SUBST(with_bigdft_incs)

  AC_ARG_WITH(bigdft-libs,
    AC_HELP_STRING([--with-bigdft-libs],
      [BigDFT libraries to link Abinit binaries with (default: None)]))
  AC_SUBST(with_bigdft_libs)

  AC_ARG_WITH(config-file,
    AC_HELP_STRING([--with-config-file],
      [Specify config file to read options from (default: None)]))
  AC_SUBST(with_config_file)

  AC_ARG_WITH(dft-flavor,
    AC_HELP_STRING([--with-dft-flavor],
      [Kind of DFT support to activate (default: none)]))
  AC_SUBST(with_dft_flavor)

  AC_ARG_WITH(fc-vendor,
    AC_HELP_STRING([--with-fc-vendor],
      [Fortran compiler vendor to be used by the build system (default: None)]))
  AC_SUBST(with_fc_vendor)

  AC_ARG_WITH(fc-version,
    AC_HELP_STRING([--with-fc-version],
      [Fortran compiler version to be used by the build system (default: None)]))
  AC_SUBST(with_fc_version)

  AC_ARG_WITH(fft-flavor,
    AC_HELP_STRING([--with-fft-flavor],
      [Kind of FFT support to activate (default: none)]))
  AC_SUBST(with_fft_flavor)

  AC_ARG_WITH(fft-incs,
    AC_HELP_STRING([--with-fft-incs],
      [Include parameters for the FFT libraries (default: None)]))
  AC_SUBST(with_fft_incs)

  AC_ARG_WITH(fft-libs,
    AC_HELP_STRING([--with-fft-libs],
      [FFT libraries to link Abinit binaries with (default: None)]))
  AC_SUBST(with_fft_libs)

  AC_ARG_WITH(gpu-cflags,
    AC_HELP_STRING([--with-gpu-cflags],
      [C flags to build GPU kernels (default: None)]))
  AC_SUBST(with_gpu_cflags)

  AC_ARG_WITH(gpu-cppflags,
    AC_HELP_STRING([--with-gpu-cppflags],
      [Preprocessing options to build GPU kernels (default: None)]))
  AC_SUBST(with_gpu_cppflags)

  AC_ARG_WITH(gpu-flavor,
    AC_HELP_STRING([--with-gpu-flavor],
      [Kind of GPU support to activate (default: cuda-double)]))
  AC_SUBST(with_gpu_flavor)

  AC_ARG_WITH(gpu-incs,
    AC_HELP_STRING([--with-gpu-incs],
      [Include parameters for GPU support (default: None)]))
  AC_SUBST(with_gpu_incs)

  AC_ARG_WITH(gpu-ldflags,
    AC_HELP_STRING([--with-gpu-ldflags],
      [Link flags to build GPU-specific binaries (default: None)]))
  AC_SUBST(with_gpu_ldflags)

  AC_ARG_WITH(gpu-libs,
    AC_HELP_STRING([--with-gpu-libs],
      [GPU libraries to link Abinit binaries with (default: None)]))
  AC_SUBST(with_gpu_libs)

  AC_ARG_WITH(gpu-prefix,
    AC_HELP_STRING([--with-gpu-prefix],
      [Prefix path for the GPU installation (default: None)]))
  AC_SUBST(with_gpu_prefix)

  AC_ARG_WITH(libxc-incs,
    AC_HELP_STRING([--with-libxc-incs],
      [Include parameters for ETSF XC support (default: None)]))
  AC_SUBST(with_libxc_incs)

  AC_ARG_WITH(libxc-libs,
    AC_HELP_STRING([--with-libxc-libs],
      [ETSF XC libraries to link Abinit binaries with (default: None)]))
  AC_SUBST(with_libxc_libs)

  AC_ARG_WITH(linalg-flavor,
    AC_HELP_STRING([--with-linalg-flavor],
      [See ~abinit/doc/build/config-template.ac for information, in particular for ScaLAPACK support (default: netlib)]))
  AC_SUBST(with_linalg_flavor)

  AC_ARG_WITH(linalg-incs,
    AC_HELP_STRING([--with-linalg-incs],
      [Include parameters for the linear algebra libraries (BLAS+LAPACK) (default: None)]))
  AC_SUBST(with_linalg_incs)

  AC_ARG_WITH(linalg-libs,
    AC_HELP_STRING([--with-linalg-libs],
      [Linear algebra libraries (BLAS+LAPACK) to link with (default: None)]))
  AC_SUBST(with_linalg_libs)

  AC_ARG_WITH(math-flavor,
    AC_HELP_STRING([--with-math-flavor],
      [Kind of math library to use (default: none)]))
  AC_SUBST(with_math_flavor)

  AC_ARG_WITH(math-incs,
    AC_HELP_STRING([--with-math-incs],
      [Include parameters for the math library (default: None)]))
  AC_SUBST(with_math_incs)

  AC_ARG_WITH(math-libs,
    AC_HELP_STRING([--with-math-libs],
      [GSL libraries to link Abinit binaries with (default: None)]))
  AC_SUBST(with_math_libs)

  AC_ARG_WITH(mpi-incs,
    AC_HELP_STRING([--with-mpi-incs],
      [Include parameters for the MPI library (default: None)]))
  AC_SUBST(with_mpi_incs)

  AC_ARG_WITH(mpi-level,
    AC_HELP_STRING([--with-mpi-level],
      [MPI standard level to use (1 or 2) (default: None)]))
  AC_SUBST(with_mpi_level)

  AC_ARG_WITH(mpi-libs,
    AC_HELP_STRING([--with-mpi-libs],
      [MPI libraries to link Abinit binaries with (default: None)]))
  AC_SUBST(with_mpi_libs)

  AC_ARG_WITH(mpi-prefix,
    AC_HELP_STRING([--with-mpi-prefix],
      [Prefix path to the MPI installation (default: None)]))
  AC_SUBST(with_mpi_prefix)

  AC_ARG_WITH(netcdf-incs,
    AC_HELP_STRING([--with-netcdf-incs],
      [Include parameters for NetCDF support (default: None)]))
  AC_SUBST(with_netcdf_incs)

  AC_ARG_WITH(netcdf-libs,
    AC_HELP_STRING([--with-netcdf-libs],
      [NetCDF libraries to link Abinit binaries with (default: None)]))
  AC_SUBST(with_netcdf_libs)

  AC_ARG_WITH(psml-incs,
    AC_HELP_STRING([--with-psml-incs],
      [Include parameters for PSML support (default: None)]))
  AC_SUBST(with_psml_incs)

  AC_ARG_WITH(psml-libs,
    AC_HELP_STRING([--with-psml-libs],
      [PSML libraries to link Abinit binaries with (default: None)]))
  AC_SUBST(with_psml_libs)

  AC_ARG_WITH(tardir,
    AC_HELP_STRING([--with-tardir],
      [Repository of tarballs for fallbacks (default: None)]))
  AC_SUBST(with_tardir)

  AC_ARG_WITH(timer-flavor,
    AC_HELP_STRING([--with-timer-flavor],
      [Kind of timer to use (default: abinit)]))
  AC_SUBST(with_timer_flavor)

  AC_ARG_WITH(timer-incs,
    AC_HELP_STRING([--with-timer-incs],
      [Include parameters for the timer library (default: None)]))
  AC_SUBST(with_timer_incs)

  AC_ARG_WITH(timer-libs,
    AC_HELP_STRING([--with-timer-libs],
      [PAPI libraries to link Abinit binaries with (default: None)]))
  AC_SUBST(with_timer_libs)

  AC_ARG_WITH(trio-flavor,
    AC_HELP_STRING([--with-trio-flavor],
      [Kind of transferable I/O to activate (default: none)]))
  AC_SUBST(with_trio_flavor)

  AC_ARG_WITH(triqs-incs,
    AC_HELP_STRING([--with-triqs-incs],
      [Include parameters for TRIQS support (default: None)]))
  AC_SUBST(with_triqs_incs)

  AC_ARG_WITH(triqs-libs,
    AC_HELP_STRING([--with-triqs-libs],
      [TRIQS libraries to link Abinit binaries with (default: None)]))
  AC_SUBST(with_triqs_libs)

  AC_ARG_WITH(wannier90-bins,
    AC_HELP_STRING([--with-wannier90-bins],
      [Full path to the Wannier90 executables (default: None)]))
  AC_SUBST(with_wannier90_bins)

  AC_ARG_WITH(wannier90-incs,
    AC_HELP_STRING([--with-wannier90-incs],
      [Include parameters for Wannier90 support (default: None)]))
  AC_SUBST(with_wannier90_incs)

  AC_ARG_WITH(wannier90-libs,
    AC_HELP_STRING([--with-wannier90-libs],
      [Wannier90 libraries to link Abinit binaries with (default: None)]))
  AC_SUBST(with_wannier90_libs)

  AC_ARG_WITH(yaml-incs,
    AC_HELP_STRING([--with-yaml-incs],
      [Include parameters for YAML output support (default: None)]))
  AC_SUBST(with_yaml_incs)

  AC_ARG_WITH(yaml-libs,
    AC_HELP_STRING([--with-yaml-libs],
      [YAML libraries to link Abinit binaries with (default: None)]))
  AC_SUBST(with_yaml_libs)
])
m4trace:config/m4/auto-options.m4:454: -1- AC_DEFUN([ABI_OPTIONS_SETUP], [

  dnl
  dnl --enable arguments
  dnl

  if test "${enable_64bit_flags}" = ""; then
    enable_64bit_flags="no"
  fi
  if test "${enable_avx_safe_mode}" = ""; then
    enable_avx_safe_mode="no"
  fi
  if test "${enable_bse_unpacked}" = ""; then
    enable_bse_unpacked="no"
  fi
  if test "${enable_cclock}" = ""; then
    enable_cclock="no"
  fi
  if test "${enable_config_file}" = ""; then
    enable_config_file="yes"
  fi
  if test "${enable_connectors}" = ""; then
    enable_connectors="yes"
  fi
  if test "${enable_debug}" = ""; then
    enable_debug="basic"
  fi
  if test "${enable_exports}" = ""; then
    enable_exports="no"
  fi
  if test "${enable_fallbacks}" = ""; then
    enable_fallbacks="yes"
  fi
  if test "${enable_fast_check}" = ""; then
    enable_fast_check="no"
  fi
  if test "${enable_fc_wrapper}" = ""; then
    enable_fc_wrapper="no"
  fi
  if test "${enable_gpu}" = ""; then
    enable_gpu="no"
  fi
  if test "${enable_gw_dpc}" = ""; then
    enable_gw_dpc="no"
  fi
  if test "${enable_hints}" = ""; then
    enable_hints="yes"
  fi
  if test "${enable_lotf}" = ""; then
    enable_lotf="no"
  fi
  if test "${enable_macroave}" = ""; then
    enable_macroave="yes"
  fi
  if test "${enable_maintainer_checks}" = ""; then
    enable_maintainer_checks="no"
  fi
  if test "${enable_mpi}" = ""; then
    enable_mpi="auto"
  fi
  if test "${enable_mpi_inplace}" = ""; then
    enable_mpi_inplace="no"
  fi
  if test "${enable_mpi_io}" = ""; then
    enable_mpi_io="auto"
  fi
  if test "${enable_mpi_io_default}" = ""; then
    enable_mpi_io_default="no"
  fi
  if test "${enable_netcdf_default}" = ""; then
    enable_netcdf_default="no"
  fi
  if test "${enable_openmp}" = ""; then
    enable_openmp="no"
  fi
  if test "${enable_optim}" = ""; then
    enable_optim="standard"
  fi
  if test "${enable_stdin}" = ""; then
    enable_stdin="yes"
  fi
  if test "${enable_triqs_v1_4}" = ""; then
    enable_triqs_v1_4="no"
  fi
  if test "${enable_triqs_v2_0}" = ""; then
    enable_triqs_v2_0="no"
  fi
  if test "${enable_wannier90_v1}" = ""; then
    enable_wannier90_v1="no"
  fi
  if test "${enable_xml}" = ""; then
    enable_xml="no"
  fi
  if test "${enable_zdot_bugfix}" = ""; then
    enable_zdot_bugfix="no"
  fi

  dnl
  dnl --with arguments
  dnl

  if test "${with_algo_flavor}" = ""; then
    with_algo_flavor="none"
  fi
  if test "${with_algo_flavor}" = "no"; then
    with_algo_flavor=""
  fi
  if test "${with_algo_incs}" = "no"; then
    with_algo_incs=""
  fi
  if test "${with_algo_libs}" = "no"; then
    with_algo_libs=""
  fi
  if test "${with_atompaw_bins}" = "no"; then
    with_atompaw_bins=""
  fi
  if test "${with_atompaw_incs}" = "no"; then
    with_atompaw_incs=""
  fi
  if test "${with_atompaw_libs}" = "no"; then
    with_atompaw_libs=""
  fi
  if test "${with_bigdft_incs}" = "no"; then
    with_bigdft_incs=""
  fi
  if test "${with_bigdft_libs}" = "no"; then
    with_bigdft_libs=""
  fi
  if test "${with_config_file}" = "no"; then
    with_config_file=""
  fi
  if test "${with_dft_flavor}" = ""; then
    with_dft_flavor="none"
  fi
  if test "${with_dft_flavor}" = "no"; then
    with_dft_flavor=""
  fi
  if test "${with_fc_vendor}" = "no"; then
    with_fc_vendor=""
  fi
  if test "${with_fc_version}" = "no"; then
    with_fc_version=""
  fi
  if test "${with_fft_flavor}" = ""; then
    with_fft_flavor="none"
  fi
  if test "${with_fft_flavor}" = "no"; then
    with_fft_flavor=""
  fi
  if test "${with_fft_incs}" = "no"; then
    with_fft_incs=""
  fi
  if test "${with_fft_libs}" = "no"; then
    with_fft_libs=""
  fi
  if test "${with_gpu_cflags}" = "no"; then
    with_gpu_cflags=""
  fi
  if test "${with_gpu_cppflags}" = "no"; then
    with_gpu_cppflags=""
  fi
  if test "${with_gpu_flavor}" = ""; then
    with_gpu_flavor="cuda-double"
  fi
  if test "${with_gpu_flavor}" = "no"; then
    with_gpu_flavor=""
  fi
  if test "${with_gpu_incs}" = "no"; then
    with_gpu_incs=""
  fi
  if test "${with_gpu_ldflags}" = "no"; then
    with_gpu_ldflags=""
  fi
  if test "${with_gpu_libs}" = "no"; then
    with_gpu_libs=""
  fi
  if test "${with_gpu_prefix}" = "no"; then
    with_gpu_prefix=""
  fi
  if test "${with_libxc_incs}" = "no"; then
    with_libxc_incs=""
  fi
  if test "${with_libxc_libs}" = "no"; then
    with_libxc_libs=""
  fi
  if test "${with_linalg_flavor}" = ""; then
    with_linalg_flavor="netlib"
  fi
  if test "${with_linalg_flavor}" = "no"; then
    with_linalg_flavor=""
  fi
  if test "${with_linalg_incs}" = "no"; then
    with_linalg_incs=""
  fi
  if test "${with_linalg_libs}" = "no"; then
    with_linalg_libs=""
  fi
  if test "${with_math_flavor}" = ""; then
    with_math_flavor="none"
  fi
  if test "${with_math_flavor}" = "no"; then
    with_math_flavor=""
  fi
  if test "${with_math_incs}" = "no"; then
    with_math_incs=""
  fi
  if test "${with_math_libs}" = "no"; then
    with_math_libs=""
  fi
  if test "${with_mpi_incs}" = "no"; then
    with_mpi_incs=""
  fi
  if test "${with_mpi_level}" = "no"; then
    with_mpi_level=""
  fi
  if test "${with_mpi_libs}" = "no"; then
    with_mpi_libs=""
  fi
  if test "${with_mpi_prefix}" = "no"; then
    with_mpi_prefix=""
  fi
  if test "${with_netcdf_incs}" = "no"; then
    with_netcdf_incs=""
  fi
  if test "${with_netcdf_libs}" = "no"; then
    with_netcdf_libs=""
  fi
  if test "${with_psml_incs}" = "no"; then
    with_psml_incs=""
  fi
  if test "${with_psml_libs}" = "no"; then
    with_psml_libs=""
  fi
  if test "${with_tardir}" = "no"; then
    with_tardir=""
  fi
  if test "${with_timer_flavor}" = ""; then
    with_timer_flavor="abinit"
  fi
  if test "${with_timer_flavor}" = "no"; then
    with_timer_flavor=""
  fi
  if test "${with_timer_incs}" = "no"; then
    with_timer_incs=""
  fi
  if test "${with_timer_libs}" = "no"; then
    with_timer_libs=""
  fi
  if test "${with_trio_flavor}" = ""; then
    with_trio_flavor="none"
  fi
  if test "${with_trio_flavor}" = "no"; then
    with_trio_flavor=""
  fi
  if test "${with_triqs_incs}" = "no"; then
    with_triqs_incs=""
  fi
  if test "${with_triqs_libs}" = "no"; then
    with_triqs_libs=""
  fi
  if test "${with_wannier90_bins}" = "no"; then
    with_wannier90_bins=""
  fi
  if test "${with_wannier90_incs}" = "no"; then
    with_wannier90_incs=""
  fi
  if test "${with_wannier90_libs}" = "no"; then
    with_wannier90_libs=""
  fi
  if test "${with_yaml_incs}" = "no"; then
    with_yaml_incs=""
  fi
  if test "${with_yaml_libs}" = "no"; then
    with_yaml_libs=""
  fi
])
m4trace:config/m4/auto-options.m4:738: -1- AC_DEFUN([ABI_OPTIONS_BACKUP], [

  dnl
  dnl --enable arguments
  dnl
  cmd_enable_64bit_flags="${enable_64bit_flags}"
  cmd_enable_atompaw="${enable_atompaw}"
  cmd_enable_avx_safe_mode="${enable_avx_safe_mode}"
  cmd_enable_bigdft="${enable_bigdft}"
  cmd_enable_bse_unpacked="${enable_bse_unpacked}"
  cmd_enable_cclock="${enable_cclock}"
  cmd_enable_config_file="${enable_config_file}"
  cmd_enable_connectors="${enable_connectors}"
  cmd_enable_debug="${enable_debug}"
  cmd_enable_exports="${enable_exports}"
  cmd_enable_fallbacks="${enable_fallbacks}"
  cmd_enable_fast_check="${enable_fast_check}"
  cmd_enable_fc_wrapper="${enable_fc_wrapper}"
  cmd_enable_gpu="${enable_gpu}"
  cmd_enable_gw_dpc="${enable_gw_dpc}"
  cmd_enable_hints="${enable_hints}"
  cmd_enable_libpaw="${enable_libpaw}"
  cmd_enable_libtetra="${enable_libtetra}"
  cmd_enable_libxc="${enable_libxc}"
  cmd_enable_linalg="${enable_linalg}"
  cmd_enable_lotf="${enable_lotf}"
  cmd_enable_macroave="${enable_macroave}"
  cmd_enable_maintainer_checks="${enable_maintainer_checks}"
  cmd_enable_memory_profiling="${enable_memory_profiling}"
  cmd_enable_mpi="${enable_mpi}"
  cmd_enable_mpi_inplace="${enable_mpi_inplace}"
  cmd_enable_mpi_io="${enable_mpi_io}"
  cmd_enable_mpi_io_default="${enable_mpi_io_default}"
  cmd_enable_netcdf="${enable_netcdf}"
  cmd_enable_netcdf_default="${enable_netcdf_default}"
  cmd_enable_openmp="${enable_openmp}"
  cmd_enable_optim="${enable_optim}"
  cmd_enable_stdin="${enable_stdin}"
  cmd_enable_triqs_v1_4="${enable_triqs_v1_4}"
  cmd_enable_triqs_v2_0="${enable_triqs_v2_0}"
  cmd_enable_wannier90="${enable_wannier90}"
  cmd_enable_wannier90_v1="${enable_wannier90_v1}"
  cmd_enable_xml="${enable_xml}"
  cmd_enable_zdot_bugfix="${enable_zdot_bugfix}"

  dnl
  dnl --with arguments
  dnl
  cmd_with_algo_flavor="${with_algo_flavor}"
  cmd_with_algo_incs="${with_algo_incs}"
  cmd_with_algo_libs="${with_algo_libs}"
  cmd_with_atompaw_bins="${with_atompaw_bins}"
  cmd_with_atompaw_incs="${with_atompaw_incs}"
  cmd_with_atompaw_libs="${with_atompaw_libs}"
  cmd_with_bigdft_incs="${with_bigdft_incs}"
  cmd_with_bigdft_libs="${with_bigdft_libs}"
  cmd_with_config_file="${with_config_file}"
  cmd_with_dft_flavor="${with_dft_flavor}"
  cmd_with_fc_vendor="${with_fc_vendor}"
  cmd_with_fc_version="${with_fc_version}"
  cmd_with_fft_flavor="${with_fft_flavor}"
  cmd_with_fft_incs="${with_fft_incs}"
  cmd_with_fft_libs="${with_fft_libs}"
  cmd_with_gpu_cflags="${with_gpu_cflags}"
  cmd_with_gpu_cppflags="${with_gpu_cppflags}"
  cmd_with_gpu_flavor="${with_gpu_flavor}"
  cmd_with_gpu_incs="${with_gpu_incs}"
  cmd_with_gpu_ldflags="${with_gpu_ldflags}"
  cmd_with_gpu_libs="${with_gpu_libs}"
  cmd_with_gpu_prefix="${with_gpu_prefix}"
  cmd_with_libxc_incs="${with_libxc_incs}"
  cmd_with_libxc_libs="${with_libxc_libs}"
  cmd_with_linalg_flavor="${with_linalg_flavor}"
  cmd_with_linalg_incs="${with_linalg_incs}"
  cmd_with_linalg_libs="${with_linalg_libs}"
  cmd_with_math_flavor="${with_math_flavor}"
  cmd_with_math_incs="${with_math_incs}"
  cmd_with_math_libs="${with_math_libs}"
  cmd_with_mpi_incs="${with_mpi_incs}"
  cmd_with_mpi_level="${with_mpi_level}"
  cmd_with_mpi_libs="${with_mpi_libs}"
  cmd_with_mpi_prefix="${with_mpi_prefix}"
  cmd_with_netcdf_incs="${with_netcdf_incs}"
  cmd_with_netcdf_libs="${with_netcdf_libs}"
  cmd_with_psml_incs="${with_psml_incs}"
  cmd_with_psml_libs="${with_psml_libs}"
  cmd_with_tardir="${with_tardir}"
  cmd_with_timer_flavor="${with_timer_flavor}"
  cmd_with_timer_incs="${with_timer_incs}"
  cmd_with_timer_libs="${with_timer_libs}"
  cmd_with_trio_flavor="${with_trio_flavor}"
  cmd_with_triqs_incs="${with_triqs_incs}"
  cmd_with_triqs_libs="${with_triqs_libs}"
  cmd_with_wannier90_bins="${with_wannier90_bins}"
  cmd_with_wannier90_incs="${with_wannier90_incs}"
  cmd_with_wannier90_libs="${with_wannier90_libs}"
  cmd_with_yaml_incs="${with_yaml_incs}"
  cmd_with_yaml_libs="${with_yaml_libs}"

  dnl
  dnl Prefix
  dnl
  if test "${prefix}" != "NONE"; then
    cmd_prefix="${prefix}"
  fi
])
m4trace:config/m4/auto-options.m4:852: -1- AC_DEFUN([ABI_OPTIONS_RECALL], [

  dnl
  dnl --enable arguments
  dnl

  if test "${cmd_enable_64bit_flags}" != ""; then
    enable_64bit_flags="${cmd_enable_64bit_flags}"
  fi

  if test "${cmd_enable_atompaw}" != ""; then
    enable_atompaw="${cmd_enable_atompaw}"
  fi

  if test "${cmd_enable_avx_safe_mode}" != ""; then
    enable_avx_safe_mode="${cmd_enable_avx_safe_mode}"
  fi

  if test "${cmd_enable_bigdft}" != ""; then
    enable_bigdft="${cmd_enable_bigdft}"
  fi

  if test "${cmd_enable_bse_unpacked}" != ""; then
    enable_bse_unpacked="${cmd_enable_bse_unpacked}"
  fi

  if test "${cmd_enable_cclock}" != ""; then
    enable_cclock="${cmd_enable_cclock}"
  fi

  if test "${cmd_enable_config_file}" != ""; then
    enable_config_file="${cmd_enable_config_file}"
  fi

  if test "${cmd_enable_connectors}" != ""; then
    enable_connectors="${cmd_enable_connectors}"
  fi

  if test "${cmd_enable_debug}" != ""; then
    enable_debug="${cmd_enable_debug}"
  fi

  if test "${cmd_enable_exports}" != ""; then
    enable_exports="${cmd_enable_exports}"
  fi

  if test "${cmd_enable_fallbacks}" != ""; then
    enable_fallbacks="${cmd_enable_fallbacks}"
  fi

  if test "${cmd_enable_fast_check}" != ""; then
    enable_fast_check="${cmd_enable_fast_check}"
  fi

  if test "${cmd_enable_fc_wrapper}" != ""; then
    enable_fc_wrapper="${cmd_enable_fc_wrapper}"
  fi

  if test "${cmd_enable_gpu}" != ""; then
    enable_gpu="${cmd_enable_gpu}"
  fi

  if test "${cmd_enable_gw_dpc}" != ""; then
    enable_gw_dpc="${cmd_enable_gw_dpc}"
  fi

  if test "${cmd_enable_hints}" != ""; then
    enable_hints="${cmd_enable_hints}"
  fi

  if test "${cmd_enable_libpaw}" != ""; then
    enable_libpaw="${cmd_enable_libpaw}"
  fi

  if test "${cmd_enable_libtetra}" != ""; then
    enable_libtetra="${cmd_enable_libtetra}"
  fi

  if test "${cmd_enable_libxc}" != ""; then
    enable_libxc="${cmd_enable_libxc}"
  fi

  if test "${cmd_enable_linalg}" != ""; then
    enable_linalg="${cmd_enable_linalg}"
  fi

  if test "${cmd_enable_lotf}" != ""; then
    enable_lotf="${cmd_enable_lotf}"
  fi

  if test "${cmd_enable_macroave}" != ""; then
    enable_macroave="${cmd_enable_macroave}"
  fi

  if test "${cmd_enable_maintainer_checks}" != ""; then
    enable_maintainer_checks="${cmd_enable_maintainer_checks}"
  fi

  if test "${cmd_enable_memory_profiling}" != ""; then
    enable_memory_profiling="${cmd_enable_memory_profiling}"
  fi

  if test "${cmd_enable_mpi}" != ""; then
    enable_mpi="${cmd_enable_mpi}"
  fi

  if test "${cmd_enable_mpi_inplace}" != ""; then
    enable_mpi_inplace="${cmd_enable_mpi_inplace}"
  fi

  if test "${cmd_enable_mpi_io}" != ""; then
    enable_mpi_io="${cmd_enable_mpi_io}"
  fi

  if test "${cmd_enable_mpi_io_default}" != ""; then
    enable_mpi_io_default="${cmd_enable_mpi_io_default}"
  fi

  if test "${cmd_enable_netcdf}" != ""; then
    enable_netcdf="${cmd_enable_netcdf}"
  fi

  if test "${cmd_enable_netcdf_default}" != ""; then
    enable_netcdf_default="${cmd_enable_netcdf_default}"
  fi

  if test "${cmd_enable_openmp}" != ""; then
    enable_openmp="${cmd_enable_openmp}"
  fi

  if test "${cmd_enable_optim}" != ""; then
    enable_optim="${cmd_enable_optim}"
  fi

  if test "${cmd_enable_stdin}" != ""; then
    enable_stdin="${cmd_enable_stdin}"
  fi

  if test "${cmd_enable_triqs_v1_4}" != ""; then
    enable_triqs_v1_4="${cmd_enable_triqs_v1_4}"
  fi

  if test "${cmd_enable_triqs_v2_0}" != ""; then
    enable_triqs_v2_0="${cmd_enable_triqs_v2_0}"
  fi

  if test "${cmd_enable_wannier90}" != ""; then
    enable_wannier90="${cmd_enable_wannier90}"
  fi

  if test "${cmd_enable_wannier90_v1}" != ""; then
    enable_wannier90_v1="${cmd_enable_wannier90_v1}"
  fi

  if test "${cmd_enable_xml}" != ""; then
    enable_xml="${cmd_enable_xml}"
  fi

  if test "${cmd_enable_zdot_bugfix}" != ""; then
    enable_zdot_bugfix="${cmd_enable_zdot_bugfix}"
  fi

  dnl
  dnl --with arguments
  dnl

  if test "${cmd_with_algo_flavor}" != ""; then
    with_algo_flavor="${cmd_with_algo_flavor}"
  fi

  if test "${cmd_with_algo_incs}" != ""; then
    with_algo_incs="${cmd_with_algo_incs}"
  fi

  if test "${cmd_with_algo_libs}" != ""; then
    with_algo_libs="${cmd_with_algo_libs}"
  fi

  if test "${cmd_with_atompaw_bins}" != ""; then
    with_atompaw_bins="${cmd_with_atompaw_bins}"
  fi

  if test "${cmd_with_atompaw_incs}" != ""; then
    with_atompaw_incs="${cmd_with_atompaw_incs}"
  fi

  if test "${cmd_with_atompaw_libs}" != ""; then
    with_atompaw_libs="${cmd_with_atompaw_libs}"
  fi

  if test "${cmd_with_bigdft_incs}" != ""; then
    with_bigdft_incs="${cmd_with_bigdft_incs}"
  fi

  if test "${cmd_with_bigdft_libs}" != ""; then
    with_bigdft_libs="${cmd_with_bigdft_libs}"
  fi

  if test "${cmd_with_config_file}" != ""; then
    with_config_file="${cmd_with_config_file}"
  fi

  if test "${cmd_with_dft_flavor}" != ""; then
    with_dft_flavor="${cmd_with_dft_flavor}"
  fi

  if test "${cmd_with_fc_vendor}" != ""; then
    with_fc_vendor="${cmd_with_fc_vendor}"
  fi

  if test "${cmd_with_fc_version}" != ""; then
    with_fc_version="${cmd_with_fc_version}"
  fi

  if test "${cmd_with_fft_flavor}" != ""; then
    with_fft_flavor="${cmd_with_fft_flavor}"
  fi

  if test "${cmd_with_fft_incs}" != ""; then
    with_fft_incs="${cmd_with_fft_incs}"
  fi

  if test "${cmd_with_fft_libs}" != ""; then
    with_fft_libs="${cmd_with_fft_libs}"
  fi

  if test "${cmd_with_gpu_cflags}" != ""; then
    with_gpu_cflags="${cmd_with_gpu_cflags}"
  fi

  if test "${cmd_with_gpu_cppflags}" != ""; then
    with_gpu_cppflags="${cmd_with_gpu_cppflags}"
  fi

  if test "${cmd_with_gpu_flavor}" != ""; then
    with_gpu_flavor="${cmd_with_gpu_flavor}"
  fi

  if test "${cmd_with_gpu_incs}" != ""; then
    with_gpu_incs="${cmd_with_gpu_incs}"
  fi

  if test "${cmd_with_gpu_ldflags}" != ""; then
    with_gpu_ldflags="${cmd_with_gpu_ldflags}"
  fi

  if test "${cmd_with_gpu_libs}" != ""; then
    with_gpu_libs="${cmd_with_gpu_libs}"
  fi

  if test "${cmd_with_gpu_prefix}" != ""; then
    with_gpu_prefix="${cmd_with_gpu_prefix}"
  fi

  if test "${cmd_with_libxc_incs}" != ""; then
    with_libxc_incs="${cmd_with_libxc_incs}"
  fi

  if test "${cmd_with_libxc_libs}" != ""; then
    with_libxc_libs="${cmd_with_libxc_libs}"
  fi

  if test "${cmd_with_linalg_flavor}" != ""; then
    with_linalg_flavor="${cmd_with_linalg_flavor}"
  fi

  if test "${cmd_with_linalg_incs}" != ""; then
    with_linalg_incs="${cmd_with_linalg_incs}"
  fi

  if test "${cmd_with_linalg_libs}" != ""; then
    with_linalg_libs="${cmd_with_linalg_libs}"
  fi

  if test "${cmd_with_math_flavor}" != ""; then
    with_math_flavor="${cmd_with_math_flavor}"
  fi

  if test "${cmd_with_math_incs}" != ""; then
    with_math_incs="${cmd_with_math_incs}"
  fi

  if test "${cmd_with_math_libs}" != ""; then
    with_math_libs="${cmd_with_math_libs}"
  fi

  if test "${cmd_with_mpi_incs}" != ""; then
    with_mpi_incs="${cmd_with_mpi_incs}"
  fi

  if test "${cmd_with_mpi_level}" != ""; then
    with_mpi_level="${cmd_with_mpi_level}"
  fi

  if test "${cmd_with_mpi_libs}" != ""; then
    with_mpi_libs="${cmd_with_mpi_libs}"
  fi

  if test "${cmd_with_mpi_prefix}" != ""; then
    with_mpi_prefix="${cmd_with_mpi_prefix}"
  fi

  if test "${cmd_with_netcdf_incs}" != ""; then
    with_netcdf_incs="${cmd_with_netcdf_incs}"
  fi

  if test "${cmd_with_netcdf_libs}" != ""; then
    with_netcdf_libs="${cmd_with_netcdf_libs}"
  fi

  if test "${cmd_with_psml_incs}" != ""; then
    with_psml_incs="${cmd_with_psml_incs}"
  fi

  if test "${cmd_with_psml_libs}" != ""; then
    with_psml_libs="${cmd_with_psml_libs}"
  fi

  if test "${cmd_with_tardir}" != ""; then
    with_tardir="${cmd_with_tardir}"
  fi

  if test "${cmd_with_timer_flavor}" != ""; then
    with_timer_flavor="${cmd_with_timer_flavor}"
  fi

  if test "${cmd_with_timer_incs}" != ""; then
    with_timer_incs="${cmd_with_timer_incs}"
  fi

  if test "${cmd_with_timer_libs}" != ""; then
    with_timer_libs="${cmd_with_timer_libs}"
  fi

  if test "${cmd_with_trio_flavor}" != ""; then
    with_trio_flavor="${cmd_with_trio_flavor}"
  fi

  if test "${cmd_with_triqs_incs}" != ""; then
    with_triqs_incs="${cmd_with_triqs_incs}"
  fi

  if test "${cmd_with_triqs_libs}" != ""; then
    with_triqs_libs="${cmd_with_triqs_libs}"
  fi

  if test "${cmd_with_wannier90_bins}" != ""; then
    with_wannier90_bins="${cmd_with_wannier90_bins}"
  fi

  if test "${cmd_with_wannier90_incs}" != ""; then
    with_wannier90_incs="${cmd_with_wannier90_incs}"
  fi

  if test "${cmd_with_wannier90_libs}" != ""; then
    with_wannier90_libs="${cmd_with_wannier90_libs}"
  fi

  if test "${cmd_with_yaml_incs}" != ""; then
    with_yaml_incs="${cmd_with_yaml_incs}"
  fi

  if test "${cmd_with_yaml_libs}" != ""; then
    with_yaml_libs="${cmd_with_yaml_libs}"
  fi

  dnl
  dnl Prefix
  dnl
  if test "${cmd_prefix}" != ""; then
    prefix="${cmd_prefix}"
  fi
])
m4trace:config/m4/auto-options.m4:1234: -1- AC_DEFUN([ABI_OPTIONS_CHANGED], [
  AC_MSG_NOTICE([reporting user interface changes:])

  dnl Removed --enable-bindings option
  if test "${enable_bindings}" != ""; then
    AC_MSG_ERROR([removed option --enable-bindings has been used])
  fi

  dnl Removed --enable-clib option
  if test "${enable_clib}" != ""; then
    AC_MSG_ERROR([removed option --enable-clib has been used])
  fi

  dnl Removed --enable-dev-timer option
  if test "${enable_dev_timer}" != ""; then
    AC_MSG_ERROR([removed option --enable-dev-timer has been used])
  fi

  dnl Removed --enable-gui option
  if test "${enable_gui}" != ""; then
    AC_MSG_ERROR([removed option --enable-gui has been used])
  fi

  dnl Removed --enable-gui-build option
  if test "${enable_gui_build}" != ""; then
    AC_MSG_ERROR([removed option --enable-gui-build has been used])
  fi

  dnl Removed --enable-mpi-trace option
  if test "${enable_mpi_trace}" != ""; then
    AC_MSG_ERROR([removed option --enable-mpi-trace has been used])
  fi

  dnl Removed --enable-pkg-check option
  if test "${enable_pkg_check}" != ""; then
    AC_MSG_ERROR([removed option --enable-pkg-check has been used])
  fi

  dnl Removed --enable-test-timeout option
  if test "${enable_test_timeout}" != ""; then
    AC_MSG_ERROR([removed option --enable-test-timeout has been used])
  fi

  dnl New --enable-triqs-v1-4 option
  AC_MSG_NOTICE([ * new option --enable-triqs-v1-4 is available])

  dnl New --enable-triqs-v2-0 option
  AC_MSG_NOTICE([ * new option --enable-triqs-v2-0 is available])

  dnl New --enable-xml option
  AC_MSG_NOTICE([ * new option --enable-xml is available])

  dnl Removed --with-fox-incs option
  if test "${with_fox_incs}" != ""; then
    AC_MSG_ERROR([removed option --with-fox-incs has been used])
  fi

  dnl Removed --with-fox-libs option
  if test "${with_fox_libs}" != ""; then
    AC_MSG_ERROR([removed option --with-fox-libs has been used])
  fi

  dnl Removed --with-libpspio-incs option
  if test "${with_libpspio_incs}" != ""; then
    AC_MSG_ERROR([removed option --with-libpspio-incs has been used])
  fi

  dnl Removed --with-libpspio-libs option
  if test "${with_libpspio_libs}" != ""; then
    AC_MSG_ERROR([removed option --with-libpspio-libs has been used])
  fi

  dnl Removed --with-test-timeout option
  if test "${with_test_timeout}" != ""; then
    AC_MSG_ERROR([removed option --with-test-timeout has been used])
  fi

])
m4trace:config/m4/auto-options.m4:1320: -1- AC_DEFUN([ABI_OPTIONS_PARSE], [
  AC_REQUIRE([AC_PROG_EGREP])
  AC_MSG_NOTICE([parsing command-line options])

  dnl Parse enable_64bit_flags
  if test "${enable_64bit_flags}" != ""; then
    for v in `echo "${enable_64bit_flags}" | sed -e 's/+/ /g'`; do
      opt_ok="no"
      for r in no yes; do
        if test "${v}" = "${r}";then
          opt_ok="yes"
          break
        fi
      done
      test "${opt_ok}" = "no" && break
    done
    if test "${opt_ok}" = "no"; then
      AC_MSG_WARN([enable_64bit_flags = (no|yes)])
      AC_MSG_ERROR([invalid option: enable_64bit_flags = ${v}])
    fi
  fi

  dnl Hidden option: enable_atompaw
  dnl ac_configure_args="${ac_configure_args} --enable-atompaw=\"${enable_atompaw}\""
  enable_atompaw="no"

  dnl Parse enable_avx_safe_mode
  if test "${enable_avx_safe_mode}" != ""; then
    for v in `echo "${enable_avx_safe_mode}" | sed -e 's/+/ /g'`; do
      opt_ok="no"
      for r in no yes; do
        if test "${v}" = "${r}";then
          opt_ok="yes"
          break
        fi
      done
      test "${opt_ok}" = "no" && break
    done
    if test "${opt_ok}" = "no"; then
      AC_MSG_WARN([enable_avx_safe_mode = (no|yes)])
      AC_MSG_ERROR([invalid option: enable_avx_safe_mode = ${v}])
    fi
  fi

  dnl Hidden option: enable_bigdft
  dnl ac_configure_args="${ac_configure_args} --enable-bigdft=\"${enable_bigdft}\""
  enable_bigdft="no"

  dnl Parse enable_bse_unpacked
  if test "${enable_bse_unpacked}" != ""; then
    for v in `echo "${enable_bse_unpacked}" | sed -e 's/+/ /g'`; do
      opt_ok="no"
      for r in no yes; do
        if test "${v}" = "${r}";then
          opt_ok="yes"
          break
        fi
      done
      test "${opt_ok}" = "no" && break
    done
    if test "${opt_ok}" = "no"; then
      AC_MSG_WARN([enable_bse_unpacked = (no|yes)])
      AC_MSG_ERROR([invalid option: enable_bse_unpacked = ${v}])
    fi
  fi

  dnl Parse enable_cclock
  if test "${enable_cclock}" != ""; then
    for v in `echo "${enable_cclock}" | sed -e 's/+/ /g'`; do
      opt_ok="no"
      for r in no yes; do
        if test "${v}" = "${r}";then
          opt_ok="yes"
          break
        fi
      done
      test "${opt_ok}" = "no" && break
    done
    if test "${opt_ok}" = "no"; then
      AC_MSG_WARN([enable_cclock = (no|yes)])
      AC_MSG_ERROR([invalid option: enable_cclock = ${v}])
    fi
  fi

  dnl Parse enable_config_file
  if test "${enable_config_file}" != ""; then
    for v in `echo "${enable_config_file}" | sed -e 's/+/ /g'`; do
      opt_ok="no"
      for r in no yes; do
        if test "${v}" = "${r}";then
          opt_ok="yes"
          break
        fi
      done
      test "${opt_ok}" = "no" && break
    done
    if test "${opt_ok}" = "no"; then
      AC_MSG_WARN([enable_config_file = (no|yes)])
      AC_MSG_ERROR([invalid option: enable_config_file = ${v}])
    fi
  fi

  dnl Parse enable_connectors
  if test "${enable_connectors}" != ""; then
    for v in `echo "${enable_connectors}" | sed -e 's/+/ /g'`; do
      opt_ok="no"
      for r in no yes; do
        if test "${v}" = "${r}";then
          opt_ok="yes"
          break
        fi
      done
      test "${opt_ok}" = "no" && break
    done
    if test "${opt_ok}" = "no"; then
      AC_MSG_WARN([enable_connectors = (no|yes)])
      AC_MSG_ERROR([invalid option: enable_connectors = ${v}])
    fi
  fi

  dnl Parse enable_debug
  if test "${enable_debug}" != ""; then
    for v in `echo "${enable_debug}" | sed -e 's/+/ /g'`; do
      opt_ok="no"
      for r in no yes basic verbose enhanced paranoid naughty; do
        if test "${v}" = "${r}";then
          opt_ok="yes"
          break
        fi
      done
      test "${opt_ok}" = "no" && break
    done
    if test "${opt_ok}" = "no"; then
      AC_MSG_WARN([enable_debug = (no|yes|basic|verbose|enhanced|paranoid|naughty)])
      AC_MSG_ERROR([invalid option: enable_debug = ${v}])
    fi
  fi

  dnl Parse enable_exports
  if test "${enable_exports}" != ""; then
    for v in `echo "${enable_exports}" | sed -e 's/+/ /g'`; do
      opt_ok="no"
      for r in no yes; do
        if test "${v}" = "${r}";then
          opt_ok="yes"
          break
        fi
      done
      test "${opt_ok}" = "no" && break
    done
    if test "${opt_ok}" = "no"; then
      AC_MSG_WARN([enable_exports = (no|yes)])
      AC_MSG_ERROR([invalid option: enable_exports = ${v}])
    fi
  fi

  dnl Parse enable_fallbacks
  if test "${enable_fallbacks}" != ""; then
    for v in `echo "${enable_fallbacks}" | sed -e 's/+/ /g'`; do
      opt_ok="no"
      for r in no yes force; do
        if test "${v}" = "${r}";then
          opt_ok="yes"
          break
        fi
      done
      test "${opt_ok}" = "no" && break
    done
    if test "${opt_ok}" = "no"; then
      AC_MSG_WARN([enable_fallbacks = (no|yes|force)])
      AC_MSG_ERROR([invalid option: enable_fallbacks = ${v}])
    fi
  fi

  dnl Parse enable_fast_check
  if test "${enable_fast_check}" != ""; then
    for v in `echo "${enable_fast_check}" | sed -e 's/+/ /g'`; do
      opt_ok="no"
      for r in no yes; do
        if test "${v}" = "${r}";then
          opt_ok="yes"
          break
        fi
      done
      test "${opt_ok}" = "no" && break
    done
    if test "${opt_ok}" = "no"; then
      AC_MSG_WARN([enable_fast_check = (no|yes)])
      AC_MSG_ERROR([invalid option: enable_fast_check = ${v}])
    fi
  fi

  dnl Parse enable_fc_wrapper
  if test "${enable_fc_wrapper}" != ""; then
    for v in `echo "${enable_fc_wrapper}" | sed -e 's/+/ /g'`; do
      opt_ok="no"
      for r in no yes; do
        if test "${v}" = "${r}";then
          opt_ok="yes"
          break
        fi
      done
      test "${opt_ok}" = "no" && break
    done
    if test "${opt_ok}" = "no"; then
      AC_MSG_WARN([enable_fc_wrapper = (no|yes)])
      AC_MSG_ERROR([invalid option: enable_fc_wrapper = ${v}])
    fi
  fi

  dnl Parse enable_gpu
  if test "${enable_gpu}" != ""; then
    for v in `echo "${enable_gpu}" | sed -e 's/+/ /g'`; do
      opt_ok="no"
      for r in no yes; do
        if test "${v}" = "${r}";then
          opt_ok="yes"
          break
        fi
      done
      test "${opt_ok}" = "no" && break
    done
    if test "${opt_ok}" = "no"; then
      AC_MSG_WARN([enable_gpu = (no|yes)])
      AC_MSG_ERROR([invalid option: enable_gpu = ${v}])
    fi
  fi

  dnl Parse enable_gw_dpc
  if test "${enable_gw_dpc}" != ""; then
    for v in `echo "${enable_gw_dpc}" | sed -e 's/+/ /g'`; do
      opt_ok="no"
      for r in no yes; do
        if test "${v}" = "${r}";then
          opt_ok="yes"
          break
        fi
      done
      test "${opt_ok}" = "no" && break
    done
    if test "${opt_ok}" = "no"; then
      AC_MSG_WARN([enable_gw_dpc = (no|yes)])
      AC_MSG_ERROR([invalid option: enable_gw_dpc = ${v}])
    fi
  fi

  dnl Parse enable_hints
  if test "${enable_hints}" != ""; then
    for v in `echo "${enable_hints}" | sed -e 's/+/ /g'`; do
      opt_ok="no"
      for r in no yes; do
        if test "${v}" = "${r}";then
          opt_ok="yes"
          break
        fi
      done
      test "${opt_ok}" = "no" && break
    done
    if test "${opt_ok}" = "no"; then
      AC_MSG_WARN([enable_hints = (no|yes)])
      AC_MSG_ERROR([invalid option: enable_hints = ${v}])
    fi
  fi

  dnl Hidden option: enable_libpaw
  dnl ac_configure_args="${ac_configure_args} --enable-libpaw=\"${enable_libpaw}\""
  enable_libpaw="yes"

  dnl Hidden option: enable_libtetra
  dnl ac_configure_args="${ac_configure_args} --enable-libtetra=\"${enable_libtetra}\""
  enable_libtetra="yes"

  dnl Hidden option: enable_libxc
  dnl ac_configure_args="${ac_configure_args} --enable-libxc=\"${enable_libxc}\""
  enable_libxc="no"

  dnl Hidden option: enable_linalg
  dnl ac_configure_args="${ac_configure_args} --enable-linalg=\"${enable_linalg}\""
  enable_linalg="no"

  dnl Parse enable_lotf
  if test "${enable_lotf}" != ""; then
    for v in `echo "${enable_lotf}" | sed -e 's/+/ /g'`; do
      opt_ok="no"
      for r in no yes; do
        if test "${v}" = "${r}";then
          opt_ok="yes"
          break
        fi
      done
      test "${opt_ok}" = "no" && break
    done
    if test "${opt_ok}" = "no"; then
      AC_MSG_WARN([enable_lotf = (no|yes)])
      AC_MSG_ERROR([invalid option: enable_lotf = ${v}])
    fi
  fi

  dnl Parse enable_macroave
  if test "${enable_macroave}" != ""; then
    for v in `echo "${enable_macroave}" | sed -e 's/+/ /g'`; do
      opt_ok="no"
      for r in no yes; do
        if test "${v}" = "${r}";then
          opt_ok="yes"
          break
        fi
      done
      test "${opt_ok}" = "no" && break
    done
    if test "${opt_ok}" = "no"; then
      AC_MSG_WARN([enable_macroave = (no|yes)])
      AC_MSG_ERROR([invalid option: enable_macroave = ${v}])
    fi
  fi

  dnl Parse enable_maintainer_checks
  if test "${enable_maintainer_checks}" != ""; then
    for v in `echo "${enable_maintainer_checks}" | sed -e 's/+/ /g'`; do
      opt_ok="no"
      for r in no yes; do
        if test "${v}" = "${r}";then
          opt_ok="yes"
          break
        fi
      done
      test "${opt_ok}" = "no" && break
    done
    if test "${opt_ok}" = "no"; then
      AC_MSG_WARN([enable_maintainer_checks = (no|yes)])
      AC_MSG_ERROR([invalid option: enable_maintainer_checks = ${v}])
    fi
  fi

  dnl Parse enable_memory_profiling
  if test "${enable_memory_profiling}" != ""; then
    for v in `echo "${enable_memory_profiling}" | sed -e 's/+/ /g'`; do
      opt_ok="no"
      for r in no yes; do
        if test "${v}" = "${r}";then
          opt_ok="yes"
          break
        fi
      done
      test "${opt_ok}" = "no" && break
    done
    if test "${opt_ok}" = "no"; then
      AC_MSG_WARN([enable_memory_profiling = (no|yes)])
      AC_MSG_ERROR([invalid option: enable_memory_profiling = ${v}])
    fi
  fi

  dnl Parse enable_mpi
  if test "${enable_mpi}" != ""; then
    for v in `echo "${enable_mpi}" | sed -e 's/+/ /g'`; do
      opt_ok="no"
      for r in no yes auto; do
        if test "${v}" = "${r}";then
          opt_ok="yes"
          break
        fi
      done
      test "${opt_ok}" = "no" && break
    done
    if test "${opt_ok}" = "no"; then
      AC_MSG_WARN([enable_mpi = (no|yes|auto)])
      AC_MSG_ERROR([invalid option: enable_mpi = ${v}])
    fi
  fi

  dnl Parse enable_mpi_inplace
  if test "${enable_mpi_inplace}" != ""; then
    for v in `echo "${enable_mpi_inplace}" | sed -e 's/+/ /g'`; do
      opt_ok="no"
      for r in no yes; do
        if test "${v}" = "${r}";then
          opt_ok="yes"
          break
        fi
      done
      test "${opt_ok}" = "no" && break
    done
    if test "${opt_ok}" = "no"; then
      AC_MSG_WARN([enable_mpi_inplace = (no|yes)])
      AC_MSG_ERROR([invalid option: enable_mpi_inplace = ${v}])
    fi
  fi

  dnl Parse enable_mpi_io
  if test "${enable_mpi_io}" != ""; then
    for v in `echo "${enable_mpi_io}" | sed -e 's/+/ /g'`; do
      opt_ok="no"
      for r in no yes auto; do
        if test "${v}" = "${r}";then
          opt_ok="yes"
          break
        fi
      done
      test "${opt_ok}" = "no" && break
    done
    if test "${opt_ok}" = "no"; then
      AC_MSG_WARN([enable_mpi_io = (no|yes|auto)])
      AC_MSG_ERROR([invalid option: enable_mpi_io = ${v}])
    fi
  fi

  dnl Parse enable_mpi_io_default
  if test "${enable_mpi_io_default}" != ""; then
    for v in `echo "${enable_mpi_io_default}" | sed -e 's/+/ /g'`; do
      opt_ok="no"
      for r in no yes; do
        if test "${v}" = "${r}";then
          opt_ok="yes"
          break
        fi
      done
      test "${opt_ok}" = "no" && break
    done
    if test "${opt_ok}" = "no"; then
      AC_MSG_WARN([enable_mpi_io_default = (no|yes)])
      AC_MSG_ERROR([invalid option: enable_mpi_io_default = ${v}])
    fi
  fi

  dnl Hidden option: enable_netcdf
  dnl ac_configure_args="${ac_configure_args} --enable-netcdf=\"${enable_netcdf}\""
  enable_netcdf="no"

  dnl Parse enable_netcdf_default
  if test "${enable_netcdf_default}" != ""; then
    for v in `echo "${enable_netcdf_default}" | sed -e 's/+/ /g'`; do
      opt_ok="no"
      for r in no yes; do
        if test "${v}" = "${r}";then
          opt_ok="yes"
          break
        fi
      done
      test "${opt_ok}" = "no" && break
    done
    if test "${opt_ok}" = "no"; then
      AC_MSG_WARN([enable_netcdf_default = (no|yes)])
      AC_MSG_ERROR([invalid option: enable_netcdf_default = ${v}])
    fi
  fi

  dnl Parse enable_openmp
  if test "${enable_openmp}" != ""; then
    for v in `echo "${enable_openmp}" | sed -e 's/+/ /g'`; do
      opt_ok="no"
      for r in no yes; do
        if test "${v}" = "${r}";then
          opt_ok="yes"
          break
        fi
      done
      test "${opt_ok}" = "no" && break
    done
    if test "${opt_ok}" = "no"; then
      AC_MSG_WARN([enable_openmp = (no|yes)])
      AC_MSG_ERROR([invalid option: enable_openmp = ${v}])
    fi
  fi

  dnl Parse enable_optim
  if test "${enable_optim}" != ""; then
    for v in `echo "${enable_optim}" | sed -e 's/+/ /g'`; do
      opt_ok="no"
      for r in no yes safe standard aggressive; do
        if test "${v}" = "${r}";then
          opt_ok="yes"
          break
        fi
      done
      test "${opt_ok}" = "no" && break
    done
    if test "${opt_ok}" = "no"; then
      AC_MSG_WARN([enable_optim = (no|yes|safe|standard|aggressive)])
      AC_MSG_ERROR([invalid option: enable_optim = ${v}])
    fi
  fi

  dnl Parse enable_stdin
  if test "${enable_stdin}" != ""; then
    for v in `echo "${enable_stdin}" | sed -e 's/+/ /g'`; do
      opt_ok="no"
      for r in no yes; do
        if test "${v}" = "${r}";then
          opt_ok="yes"
          break
        fi
      done
      test "${opt_ok}" = "no" && break
    done
    if test "${opt_ok}" = "no"; then
      AC_MSG_WARN([enable_stdin = (no|yes)])
      AC_MSG_ERROR([invalid option: enable_stdin = ${v}])
    fi
  fi

  dnl Parse enable_triqs_v1_4
  if test "${enable_triqs_v1_4}" != ""; then
    for v in `echo "${enable_triqs_v1_4}" | sed -e 's/+/ /g'`; do
      opt_ok="no"
      for r in no yes; do
        if test "${v}" = "${r}";then
          opt_ok="yes"
          break
        fi
      done
      test "${opt_ok}" = "no" && break
    done
    if test "${opt_ok}" = "no"; then
      AC_MSG_WARN([enable_triqs_v1_4 = (no|yes)])
      AC_MSG_ERROR([invalid option: enable_triqs_v1_4 = ${v}])
    fi
  fi

  dnl Parse enable_triqs_v2_0
  if test "${enable_triqs_v2_0}" != ""; then
    for v in `echo "${enable_triqs_v2_0}" | sed -e 's/+/ /g'`; do
      opt_ok="no"
      for r in no yes; do
        if test "${v}" = "${r}";then
          opt_ok="yes"
          break
        fi
      done
      test "${opt_ok}" = "no" && break
    done
    if test "${opt_ok}" = "no"; then
      AC_MSG_WARN([enable_triqs_v2_0 = (no|yes)])
      AC_MSG_ERROR([invalid option: enable_triqs_v2_0 = ${v}])
    fi
  fi

  dnl Hidden option: enable_wannier90
  dnl ac_configure_args="${ac_configure_args} --enable-wannier90=\"${enable_wannier90}\""
  enable_wannier90="no"

  dnl Parse enable_wannier90_v1
  if test "${enable_wannier90_v1}" != ""; then
    for v in `echo "${enable_wannier90_v1}" | sed -e 's/+/ /g'`; do
      opt_ok="no"
      for r in no yes; do
        if test "${v}" = "${r}";then
          opt_ok="yes"
          break
        fi
      done
      test "${opt_ok}" = "no" && break
    done
    if test "${opt_ok}" = "no"; then
      AC_MSG_WARN([enable_wannier90_v1 = (no|yes)])
      AC_MSG_ERROR([invalid option: enable_wannier90_v1 = ${v}])
    fi
  fi

  dnl Parse enable_xml
  if test "${enable_xml}" != ""; then
    for v in `echo "${enable_xml}" | sed -e 's/+/ /g'`; do
      opt_ok="no"
      for r in no yes; do
        if test "${v}" = "${r}";then
          opt_ok="yes"
          break
        fi
      done
      test "${opt_ok}" = "no" && break
    done
    if test "${opt_ok}" = "no"; then
      AC_MSG_WARN([enable_xml = (no|yes)])
      AC_MSG_ERROR([invalid option: enable_xml = ${v}])
    fi
  fi

  dnl Parse enable_zdot_bugfix
  if test "${enable_zdot_bugfix}" != ""; then
    for v in `echo "${enable_zdot_bugfix}" | sed -e 's/+/ /g'`; do
      opt_ok="no"
      for r in no yes; do
        if test "${v}" = "${r}";then
          opt_ok="yes"
          break
        fi
      done
      test "${opt_ok}" = "no" && break
    done
    if test "${opt_ok}" = "no"; then
      AC_MSG_WARN([enable_zdot_bugfix = (no|yes)])
      AC_MSG_ERROR([invalid option: enable_zdot_bugfix = ${v}])
    fi
  fi

  dnl Parse with_algo_flavor
  dnl FIXME: NOT IMPLEMENTED!

  dnl Parse with_algo_incs
 if test "${with_algo_incs}" != ""; then
    opt_ok="yes"
    for v in ${with_algo_incs}; do
      if test "`echo "${v}" | grep '^-I'`" = ""; then
        opt_ok="no"
        break
      fi
    done
    if test "${opt_ok}" = "no"; then
      AC_MSG_ERROR([invalid include statement in with_algo_incs: ${v}])
    fi
  fi

  dnl Parse with_algo_libs
 if test "${with_algo_libs}" != ""; then
    opt_ok="yes"
    for v in ${with_algo_libs}; do
      if test "`echo "${v}" | grep '^-[[LloW]]'`" = ""; then
        opt_ok="no"
        break
      fi
    done
    if test "${opt_ok}" = "no"; then
      AC_MSG_WARN([possible invalid library statement in with_algo_libs: ${v}])
    fi
  fi

  dnl Parse with_atompaw_incs
 if test "${with_atompaw_incs}" != ""; then
    opt_ok="yes"
    for v in ${with_atompaw_incs}; do
      if test "`echo "${v}" | grep '^-I'`" = ""; then
        opt_ok="no"
        break
      fi
    done
    if test "${opt_ok}" = "no"; then
      AC_MSG_ERROR([invalid include statement in with_atompaw_incs: ${v}])
    fi
  fi

  dnl Parse with_atompaw_libs
 if test "${with_atompaw_libs}" != ""; then
    opt_ok="yes"
    for v in ${with_atompaw_libs}; do
      if test "`echo "${v}" | grep '^-[[LloW]]'`" = ""; then
        opt_ok="no"
        break
      fi
    done
    if test "${opt_ok}" = "no"; then
      AC_MSG_WARN([possible invalid library statement in with_atompaw_libs: ${v}])
    fi
  fi

  dnl Parse with_bigdft_incs
 if test "${with_bigdft_incs}" != ""; then
    opt_ok="yes"
    for v in ${with_bigdft_incs}; do
      if test "`echo "${v}" | grep '^-I'`" = ""; then
        opt_ok="no"
        break
      fi
    done
    if test "${opt_ok}" = "no"; then
      AC_MSG_ERROR([invalid include statement in with_bigdft_incs: ${v}])
    fi
  fi

  dnl Parse with_bigdft_libs
 if test "${with_bigdft_libs}" != ""; then
    opt_ok="yes"
    for v in ${with_bigdft_libs}; do
      if test "`echo "${v}" | grep '^-[[LloW]]'`" = ""; then
        opt_ok="no"
        break
      fi
    done
    if test "${opt_ok}" = "no"; then
      AC_MSG_WARN([possible invalid library statement in with_bigdft_libs: ${v}])
    fi
  fi

  dnl Parse with_dft_flavor
  if test "${with_dft_flavor}" != ""; then
    for v in `echo "${with_dft_flavor}" | sed -e 's/+/ /g'`; do
      opt_ok="no"
      for r in atompaw atompaw-fallback bigdft bigdft-fallback libxc libxc-fallback none wannier90 wannier90-fallback; do
        if test "${v}" = "${r}";then
          opt_ok="yes"
          break
        fi
      done
      test "${opt_ok}" = "no" && break
    done
    if test "${opt_ok}" = "no"; then
      AC_MSG_WARN([with_dft_flavor = (atompaw|atompaw-fallback|bigdft|bigdft-fallback|libxc|libxc-fallback|none|wannier90|wannier90-fallback)])
      AC_MSG_ERROR([invalid option: with_dft_flavor = ${v}])
    fi
  fi

  dnl Parse with_fft_flavor
  if test "${with_fft_flavor}" != ""; then
    for v in `echo "${with_fft_flavor}" | sed -e 's/+/ /g'`; do
      opt_ok="no"
      for r in asl custom fftw2 fftw2-threads fftw3 fftw3-mkl fftw3-threads fftw3-mpi none sgimath dfti dfti-threads; do
        if test "${v}" = "${r}";then
          opt_ok="yes"
          break
        fi
      done
      test "${opt_ok}" = "no" && break
    done
    if test "${opt_ok}" = "no"; then
      AC_MSG_WARN([with_fft_flavor = (asl|custom|fftw2|fftw2-threads|fftw3|fftw3-mkl|fftw3-threads|fftw3-mpi|none|sgimath|dfti|dfti-threads)])
      AC_MSG_ERROR([invalid option: with_fft_flavor = ${v}])
    fi
  fi

  dnl Parse with_fft_incs
 if test "${with_fft_incs}" != ""; then
    opt_ok="yes"
    for v in ${with_fft_incs}; do
      if test "`echo "${v}" | grep '^-I'`" = ""; then
        opt_ok="no"
        break
      fi
    done
    if test "${opt_ok}" = "no"; then
      AC_MSG_ERROR([invalid include statement in with_fft_incs: ${v}])
    fi
  fi

  dnl Parse with_fft_libs
 if test "${with_fft_libs}" != ""; then
    opt_ok="yes"
    for v in ${with_fft_libs}; do
      if test "`echo "${v}" | grep '^-[[LloW]]'`" = ""; then
        opt_ok="no"
        break
      fi
    done
    if test "${opt_ok}" = "no"; then
      AC_MSG_WARN([possible invalid library statement in with_fft_libs: ${v}])
    fi
  fi

  dnl Parse with_gpu_flavor
  if test "${with_gpu_flavor}" != ""; then
    for v in `echo "${with_gpu_flavor}" | sed -e 's/+/ /g'`; do
      opt_ok="no"
      for r in cuda-single cuda-double none; do
        if test "${v}" = "${r}";then
          opt_ok="yes"
          break
        fi
      done
      test "${opt_ok}" = "no" && break
    done
    if test "${opt_ok}" = "no"; then
      AC_MSG_WARN([with_gpu_flavor = (cuda-single|cuda-double|none)])
      AC_MSG_ERROR([invalid option: with_gpu_flavor = ${v}])
    fi
  fi

  dnl Parse with_gpu_incs
 if test "${with_gpu_incs}" != ""; then
    opt_ok="yes"
    for v in ${with_gpu_incs}; do
      if test "`echo "${v}" | grep '^-I'`" = ""; then
        opt_ok="no"
        break
      fi
    done
    if test "${opt_ok}" = "no"; then
      AC_MSG_ERROR([invalid include statement in with_gpu_incs: ${v}])
    fi
  fi

  dnl Parse with_gpu_libs
 if test "${with_gpu_libs}" != ""; then
    opt_ok="yes"
    for v in ${with_gpu_libs}; do
      if test "`echo "${v}" | grep '^-[[LloW]]'`" = ""; then
        opt_ok="no"
        break
      fi
    done
    if test "${opt_ok}" = "no"; then
      AC_MSG_WARN([possible invalid library statement in with_gpu_libs: ${v}])
    fi
  fi

  dnl Parse with_libxc_incs
 if test "${with_libxc_incs}" != ""; then
    opt_ok="yes"
    for v in ${with_libxc_incs}; do
      if test "`echo "${v}" | grep '^-I'`" = ""; then
        opt_ok="no"
        break
      fi
    done
    if test "${opt_ok}" = "no"; then
      AC_MSG_ERROR([invalid include statement in with_libxc_incs: ${v}])
    fi
  fi

  dnl Parse with_libxc_libs
 if test "${with_libxc_libs}" != ""; then
    opt_ok="yes"
    for v in ${with_libxc_libs}; do
      if test "`echo "${v}" | grep '^-[[LloW]]'`" = ""; then
        opt_ok="no"
        break
      fi
    done
    if test "${opt_ok}" = "no"; then
      AC_MSG_WARN([possible invalid library statement in with_libxc_libs: ${v}])
    fi
  fi

  dnl Parse with_linalg_flavor
  if test "${with_linalg_flavor}" != ""; then
    for v in `echo "${with_linalg_flavor}" | sed -e 's/+/ /g'`; do
      opt_ok="no"
      for r in acml asl atlas custom elpa essl goto magma mkl netlib netlib-fallback none plasma scalapack; do
        if test "${v}" = "${r}";then
          opt_ok="yes"
          break
        fi
      done
      test "${opt_ok}" = "no" && break
    done
    if test "${opt_ok}" = "no"; then
      AC_MSG_WARN([with_linalg_flavor = (acml|asl|atlas|custom|elpa|essl|goto|magma|mkl|netlib|netlib-fallback|none|plasma|scalapack)])
      AC_MSG_ERROR([invalid option: with_linalg_flavor = ${v}])
    fi
  fi

  dnl Parse with_linalg_incs
 if test "${with_linalg_incs}" != ""; then
    opt_ok="yes"
    for v in ${with_linalg_incs}; do
      if test "`echo "${v}" | grep '^-I'`" = ""; then
        opt_ok="no"
        break
      fi
    done
    if test "${opt_ok}" = "no"; then
      AC_MSG_ERROR([invalid include statement in with_linalg_incs: ${v}])
    fi
  fi

  dnl Parse with_linalg_libs
 if test "${with_linalg_libs}" != ""; then
    opt_ok="yes"
    for v in ${with_linalg_libs}; do
      if test "`echo "${v}" | grep '^-[[LloW]]'`" = ""; then
        opt_ok="no"
        break
      fi
    done
    if test "${opt_ok}" = "no"; then
      AC_MSG_WARN([possible invalid library statement in with_linalg_libs: ${v}])
    fi
  fi

  dnl Parse with_math_flavor
  if test "${with_math_flavor}" != ""; then
    for v in `echo "${with_math_flavor}" | sed -e 's/+/ /g'`; do
      opt_ok="no"
      for r in gsl none; do
        if test "${v}" = "${r}";then
          opt_ok="yes"
          break
        fi
      done
      test "${opt_ok}" = "no" && break
    done
    if test "${opt_ok}" = "no"; then
      AC_MSG_WARN([with_math_flavor = (gsl|none)])
      AC_MSG_ERROR([invalid option: with_math_flavor = ${v}])
    fi
  fi

  dnl Parse with_math_incs
 if test "${with_math_incs}" != ""; then
    opt_ok="yes"
    for v in ${with_math_incs}; do
      if test "`echo "${v}" | grep '^-I'`" = ""; then
        opt_ok="no"
        break
      fi
    done
    if test "${opt_ok}" = "no"; then
      AC_MSG_ERROR([invalid include statement in with_math_incs: ${v}])
    fi
  fi

  dnl Parse with_math_libs
 if test "${with_math_libs}" != ""; then
    opt_ok="yes"
    for v in ${with_math_libs}; do
      if test "`echo "${v}" | grep '^-[[LloW]]'`" = ""; then
        opt_ok="no"
        break
      fi
    done
    if test "${opt_ok}" = "no"; then
      AC_MSG_WARN([possible invalid library statement in with_math_libs: ${v}])
    fi
  fi

  dnl Parse with_mpi_incs
 if test "${with_mpi_incs}" != ""; then
    opt_ok="yes"
    for v in ${with_mpi_incs}; do
      if test "`echo "${v}" | grep '^-I'`" = ""; then
        opt_ok="no"
        break
      fi
    done
    if test "${opt_ok}" = "no"; then
      AC_MSG_ERROR([invalid include statement in with_mpi_incs: ${v}])
    fi
  fi

  dnl Parse with_mpi_level
  if test "${with_mpi_level}" != ""; then
    for v in `echo "${with_mpi_level}" | sed -e 's/+/ /g'`; do
      opt_ok="no"
      for r in 1 2; do
        if test "${v}" = "${r}";then
          opt_ok="yes"
          break
        fi
      done
      test "${opt_ok}" = "no" && break
    done
    if test "${opt_ok}" = "no"; then
      AC_MSG_WARN([with_mpi_level = (1|2)])
      AC_MSG_ERROR([invalid option: with_mpi_level = ${v}])
    fi
  fi

  dnl Parse with_mpi_libs
 if test "${with_mpi_libs}" != ""; then
    opt_ok="yes"
    for v in ${with_mpi_libs}; do
      if test "`echo "${v}" | grep '^-[[LloW]]'`" = ""; then
        opt_ok="no"
        break
      fi
    done
    if test "${opt_ok}" = "no"; then
      AC_MSG_WARN([possible invalid library statement in with_mpi_libs: ${v}])
    fi
  fi

  dnl Parse with_netcdf_incs
 if test "${with_netcdf_incs}" != ""; then
    opt_ok="yes"
    for v in ${with_netcdf_incs}; do
      if test "`echo "${v}" | grep '^-I'`" = ""; then
        opt_ok="no"
        break
      fi
    done
    if test "${opt_ok}" = "no"; then
      AC_MSG_ERROR([invalid include statement in with_netcdf_incs: ${v}])
    fi
  fi

  dnl Parse with_netcdf_libs
 if test "${with_netcdf_libs}" != ""; then
    opt_ok="yes"
    for v in ${with_netcdf_libs}; do
      if test "`echo "${v}" | grep '^-[[LloW]]'`" = ""; then
        opt_ok="no"
        break
      fi
    done
    if test "${opt_ok}" = "no"; then
      AC_MSG_WARN([possible invalid library statement in with_netcdf_libs: ${v}])
    fi
  fi

  dnl Parse with_psml_incs
 if test "${with_psml_incs}" != ""; then
    opt_ok="yes"
    for v in ${with_psml_incs}; do
      if test "`echo "${v}" | grep '^-I'`" = ""; then
        opt_ok="no"
        break
      fi
    done
    if test "${opt_ok}" = "no"; then
      AC_MSG_ERROR([invalid include statement in with_psml_incs: ${v}])
    fi
  fi

  dnl Parse with_psml_libs
 if test "${with_psml_libs}" != ""; then
    opt_ok="yes"
    for v in ${with_psml_libs}; do
      if test "`echo "${v}" | grep '^-[[LloW]]'`" = ""; then
        opt_ok="no"
        break
      fi
    done
    if test "${opt_ok}" = "no"; then
      AC_MSG_WARN([possible invalid library statement in with_psml_libs: ${v}])
    fi
  fi

  dnl Parse with_timer_flavor
  if test "${with_timer_flavor}" != ""; then
    for v in `echo "${with_timer_flavor}" | sed -e 's/+/ /g'`; do
      opt_ok="no"
      for r in abinit gptl none papi; do
        if test "${v}" = "${r}";then
          opt_ok="yes"
          break
        fi
      done
      test "${opt_ok}" = "no" && break
    done
    if test "${opt_ok}" = "no"; then
      AC_MSG_WARN([with_timer_flavor = (abinit|gptl|none|papi)])
      AC_MSG_ERROR([invalid option: with_timer_flavor = ${v}])
    fi
  fi

  dnl Parse with_timer_incs
 if test "${with_timer_incs}" != ""; then
    opt_ok="yes"
    for v in ${with_timer_incs}; do
      if test "`echo "${v}" | grep '^-I'`" = ""; then
        opt_ok="no"
        break
      fi
    done
    if test "${opt_ok}" = "no"; then
      AC_MSG_ERROR([invalid include statement in with_timer_incs: ${v}])
    fi
  fi

  dnl Parse with_timer_libs
 if test "${with_timer_libs}" != ""; then
    opt_ok="yes"
    for v in ${with_timer_libs}; do
      if test "`echo "${v}" | grep '^-[[LloW]]'`" = ""; then
        opt_ok="no"
        break
      fi
    done
    if test "${opt_ok}" = "no"; then
      AC_MSG_WARN([possible invalid library statement in with_timer_libs: ${v}])
    fi
  fi

  dnl Parse with_trio_flavor
  if test "${with_trio_flavor}" != ""; then
    for v in `echo "${with_trio_flavor}" | sed -e 's/+/ /g'`; do
      opt_ok="no"
      for r in psml netcdf netcdf-fallback yaml none; do
        if test "${v}" = "${r}";then
          opt_ok="yes"
          break
        fi
      done
      test "${opt_ok}" = "no" && break
    done
    if test "${opt_ok}" = "no"; then
      AC_MSG_WARN([with_trio_flavor = (psml|netcdf|netcdf-fallback|yaml|none)])
      AC_MSG_ERROR([invalid option: with_trio_flavor = ${v}])
    fi
  fi

  dnl Parse with_triqs_incs
 if test "${with_triqs_incs}" != ""; then
    opt_ok="yes"
    for v in ${with_triqs_incs}; do
      if test "`echo "${v}" | grep '^-I'`" = ""; then
        opt_ok="no"
        break
      fi
    done
    if test "${opt_ok}" = "no"; then
      AC_MSG_ERROR([invalid include statement in with_triqs_incs: ${v}])
    fi
  fi

  dnl Parse with_triqs_libs
 if test "${with_triqs_libs}" != ""; then
    opt_ok="yes"
    for v in ${with_triqs_libs}; do
      if test "`echo "${v}" | grep '^-[[LloW]]'`" = ""; then
        opt_ok="no"
        break
      fi
    done
    if test "${opt_ok}" = "no"; then
      AC_MSG_WARN([possible invalid library statement in with_triqs_libs: ${v}])
    fi
  fi

  dnl Parse with_wannier90_incs
 if test "${with_wannier90_incs}" != ""; then
    opt_ok="yes"
    for v in ${with_wannier90_incs}; do
      if test "`echo "${v}" | grep '^-I'`" = ""; then
        opt_ok="no"
        break
      fi
    done
    if test "${opt_ok}" = "no"; then
      AC_MSG_ERROR([invalid include statement in with_wannier90_incs: ${v}])
    fi
  fi

  dnl Parse with_wannier90_libs
 if test "${with_wannier90_libs}" != ""; then
    opt_ok="yes"
    for v in ${with_wannier90_libs}; do
      if test "`echo "${v}" | grep '^-[[LloW]]'`" = ""; then
        opt_ok="no"
        break
      fi
    done
    if test "${opt_ok}" = "no"; then
      AC_MSG_WARN([possible invalid library statement in with_wannier90_libs: ${v}])
    fi
  fi

  dnl Parse with_yaml_incs
 if test "${with_yaml_incs}" != ""; then
    opt_ok="yes"
    for v in ${with_yaml_incs}; do
      if test "`echo "${v}" | grep '^-I'`" = ""; then
        opt_ok="no"
        break
      fi
    done
    if test "${opt_ok}" = "no"; then
      AC_MSG_ERROR([invalid include statement in with_yaml_incs: ${v}])
    fi
  fi

  dnl Parse with_yaml_libs
 if test "${with_yaml_libs}" != ""; then
    opt_ok="yes"
    for v in ${with_yaml_libs}; do
      if test "`echo "${v}" | grep '^-[[LloW]]'`" = ""; then
        opt_ok="no"
        break
      fi
    done
    if test "${opt_ok}" = "no"; then
      AC_MSG_WARN([possible invalid library statement in with_yaml_libs: ${v}])
    fi
  fi

])
m4trace:config/m4/auto-options.m4:2491: -1- AC_DEFUN([ABI_OPTIONS_TRIGGERS], [
  AC_MSG_NOTICE([setting triggers associated to command-line options])


  dnl Triggers for enable_avx_safe_mode
  AC_MSG_CHECKING([whether to disable vectorization in problematic procedures])
  AC_MSG_RESULT([${enable_avx_safe_mode}])

  if test "${enable_avx_safe_mode}" = "yes"; then
    AC_MSG_NOTICE([defining the 'HAVE_AVX_SAFE_MODE' preprocessing macro])
    AC_DEFINE([HAVE_AVX_SAFE_MODE],1,
      [Define to 1 if you want to disable vectorization in problematic procedures.])
  fi

  dnl Triggers for enable_bse_unpacked
  AC_MSG_CHECKING([whether to activate Bethe-Salpeter unpacking (EXPERIMENTAL)])
  AC_MSG_RESULT([${enable_bse_unpacked}])

  if test "${enable_bse_unpacked}" = "yes"; then
    AC_MSG_NOTICE([defining the 'HAVE_BSE_UNPACKED' preprocessing macro])
    AC_DEFINE([HAVE_BSE_UNPACKED],1,
      [Define to 1 if you want to activate Bethe-Salpeter unpacking (EXPERIMENTAL).])
  fi

  dnl Triggers for enable_exports
  AC_MSG_CHECKING([whether to activate build of exported libraries (EXPERIMENTAL)])
  AC_MSG_RESULT([${enable_exports}])

  if test "${enable_exports}" = "yes"; then
    AC_MSG_NOTICE([triggering the 'DO_BUILD_EXPORTS' conditional])
  fi
  AM_CONDITIONAL([DO_BUILD_EXPORTS],[test "${enable_exports}" = "yes"])

  dnl Triggers for enable_gw_dpc
  AC_MSG_CHECKING([whether to activate double-precision GW calculations (EXPERIMENTAL)])
  AC_MSG_RESULT([${enable_gw_dpc}])

  if test "${enable_gw_dpc}" = "yes"; then
    AC_MSG_NOTICE([defining the 'HAVE_GW_DPC' preprocessing macro])
    AC_DEFINE([HAVE_GW_DPC],1,
      [Define to 1 if you want to activate double-precision GW calculations (EXPERIMENTAL).])
  fi

  dnl Triggers for enable_libpaw
  AC_MSG_CHECKING([whether to activate internal support for libPAW in ABINIT])
  AC_MSG_RESULT([${enable_libpaw}])

  if test "${enable_libpaw}" = "yes"; then
    AC_MSG_NOTICE([defining the 'HAVE_LIBPAW_ABINIT' preprocessing macro])
    AC_DEFINE([HAVE_LIBPAW_ABINIT],1,
      [Define to 1 if you want to activate internal support for libPAW in ABINIT.])
  fi

  dnl Triggers for enable_libtetra
  AC_MSG_CHECKING([whether to activate internal support for libtetra(hedron) in ABINIT])
  AC_MSG_RESULT([${enable_libtetra}])

  if test "${enable_libtetra}" = "yes"; then
    AC_MSG_NOTICE([defining the 'HAVE_LIBTETRA_ABINIT' preprocessing macro])
    AC_DEFINE([HAVE_LIBTETRA_ABINIT],1,
      [Define to 1 if you want to activate internal support for libtetra(hedron) in ABINIT.])
  fi

  dnl Triggers for enable_lotf
  AC_MSG_CHECKING([whether to activate LOTF functionality (EXPERIMENTAL)])
  AC_MSG_RESULT([${enable_lotf}])

  if test "${enable_lotf}" = "yes"; then
    AC_MSG_NOTICE([triggering the 'DO_BUILD_65_LOTF_BASE' conditional])
  fi
  AM_CONDITIONAL([DO_BUILD_65_LOTF_BASE],[test "${enable_lotf}" = "yes"])
  if test "${enable_lotf}" = "yes"; then
    AC_MSG_NOTICE([triggering the 'DO_BUILD_68_LOTF' conditional])
  fi
  AM_CONDITIONAL([DO_BUILD_68_LOTF],[test "${enable_lotf}" = "yes"])
  if test "${enable_lotf}" = "yes"; then
    AC_MSG_NOTICE([defining the 'HAVE_LOTF' preprocessing macro])
    AC_DEFINE([HAVE_LOTF],1,
      [Define to 1 if you want to activate LOTF functionality (EXPERIMENTAL).])
  fi

  dnl Triggers for enable_macroave
  AC_MSG_CHECKING([whether to enable build of macroave (EXPERIMENTAL)])
  AC_MSG_RESULT([${enable_macroave}])

  if test "${enable_macroave}" = "yes"; then
    AC_MSG_NOTICE([triggering the 'DO_BUILD_01_MACROAVNEW_EXT' conditional])
  fi
  AM_CONDITIONAL([DO_BUILD_01_MACROAVNEW_EXT],[test "${enable_macroave}" = "yes"])
  if test "${enable_macroave}" = "yes"; then
    AC_MSG_NOTICE([triggering the 'DO_BUILD_MACROAVE' conditional])
  fi
  AM_CONDITIONAL([DO_BUILD_MACROAVE],[test "${enable_macroave}" = "yes"])
  if test "${enable_macroave}" = "yes"; then
    AC_MSG_NOTICE([defining the 'USE_MACROAVE' preprocessing macro])
    AC_DEFINE([USE_MACROAVE],1,
      [Define to 1 if you want to enable build of macroave (EXPERIMENTAL).])
  fi

  dnl Triggers for enable_memory_profiling
  AC_MSG_CHECKING([whether to enable memory profiling])
  AC_MSG_RESULT([${enable_memory_profiling}])

  if test "${enable_memory_profiling}" = "yes"; then
    AC_MSG_NOTICE([defining the 'HAVE_MEM_PROFILING' preprocessing macro])
    AC_DEFINE([HAVE_MEM_PROFILING],1,
      [Define to 1 if you want to enable memory profiling.])
  fi

  dnl Triggers for enable_mpi_inplace
  AC_MSG_CHECKING([whether to activate support for MPI_IN_PLACE])
  AC_MSG_RESULT([${enable_mpi_inplace}])

  if test "${enable_mpi_inplace}" = "yes"; then
    AC_MSG_NOTICE([defining the 'HAVE_MPI2_INPLACE' preprocessing macro])
    AC_DEFINE([HAVE_MPI2_INPLACE],1,
      [Define to 1 if you want to activate support for MPI_IN_PLACE.])
  fi

  dnl Triggers for enable_mpi_io_default
  AC_MSG_CHECKING([whether to use MPI-IO as default IO library (change the default value of iomode) (EXPERIMENTAL)])
  AC_MSG_RESULT([${enable_mpi_io_default}])

  if test "${enable_mpi_io_default}" = "yes"; then
    AC_MSG_NOTICE([defining the 'HAVE_MPI_IO_DEFAULT' preprocessing macro])
    AC_DEFINE([HAVE_MPI_IO_DEFAULT],1,
      [Define to 1 if you want to use MPI-IO as default IO library (change the default value of iomode) (EXPERIMENTAL).])
  fi

  dnl Triggers for enable_netcdf_default
  AC_MSG_CHECKING([whether to use NetCDF as default IO library (change the default value of iomode)])
  AC_MSG_RESULT([${enable_netcdf_default}])

  if test "${enable_netcdf_default}" = "yes"; then
    AC_MSG_NOTICE([defining the 'HAVE_NETCDF_DEFAULT' preprocessing macro])
    AC_DEFINE([HAVE_NETCDF_DEFAULT],1,
      [Define to 1 if you want to use NetCDF as default IO library (change the default value of iomode).])
  fi

  dnl Triggers for enable_openmp
  AC_MSG_CHECKING([whether to activate support for OpenMP (EXPERIMENTAL)])
  AC_MSG_RESULT([${enable_openmp}])

  if test "${enable_openmp}" = "yes"; then
    AC_MSG_NOTICE([defining the 'HAVE_OPENMP' preprocessing macro])
    AC_DEFINE([HAVE_OPENMP],1,
      [Define to 1 if you want to activate support for OpenMP (EXPERIMENTAL).])
  fi

  dnl Triggers for enable_stdin
  AC_MSG_CHECKING([whether to tell Abinit to read file lists from standard input])
  AC_MSG_RESULT([${enable_stdin}])

  if test "${enable_stdin}" = "no"; then
    AC_MSG_NOTICE([defining the 'READ_FROM_FILE' preprocessing macro])
    AC_DEFINE([READ_FROM_FILE],1,
      [Define to 1 if you want to tell Abinit to read file lists from standard input.])
  fi

  dnl Triggers for enable_triqs_v1_4
  AC_MSG_CHECKING([whether to activate internal support for TRIQS 1.4])
  AC_MSG_RESULT([${enable_triqs_v1_4}])

  if test "${enable_triqs_v1_4}" = "yes"; then
    AC_MSG_NOTICE([defining the 'HAVE_TRIQS_v1_4' preprocessing macro])
    AC_DEFINE([HAVE_TRIQS_v1_4],1,
      [Define to 1 if you want to activate internal support for TRIQS 1.4.])
  fi

  dnl Triggers for enable_triqs_v2_0
  AC_MSG_CHECKING([whether to activate internal support for TRIQS 2.0 (This option is dominant over the others versions)])
  AC_MSG_RESULT([${enable_triqs_v2_0}])

  if test "${enable_triqs_v2_0}" = "yes"; then
    AC_MSG_NOTICE([defining the 'HAVE_TRIQS_v2_0' preprocessing macro])
    AC_DEFINE([HAVE_TRIQS_v2_0],1,
      [Define to 1 if you want to activate internal support for TRIQS 2.0 (This option is dominant over the others versions).])
  fi

  dnl Triggers for enable_wannier90_v1
  AC_MSG_CHECKING([whether to activate support for Wannier90 v1.x (default is v2.x)])
  AC_MSG_RESULT([${enable_wannier90_v1}])

  if test "${enable_wannier90_v1}" = "yes"; then
    AC_MSG_NOTICE([defining the 'HAVE_WANNIER90_V1' preprocessing macro])
    AC_DEFINE([HAVE_WANNIER90_V1],1,
      [Define to 1 if you want to activate support for Wannier90 v1.x (default is v2.x).])
  fi

  dnl Triggers for enable_xml
  AC_MSG_CHECKING([whether to enable support for XML])
  AC_MSG_RESULT([${enable_xml}])

  if test "${enable_xml}" = "yes"; then
    AC_MSG_NOTICE([defining the 'HAVE_LIBXML' preprocessing macro])
    AC_DEFINE([HAVE_LIBXML],1,
      [Define to 1 if you want to enable support for XML.])
  fi

  dnl Triggers for enable_zdot_bugfix
  AC_MSG_CHECKING([whether to activate workaround for bugged ZDOTC and ZDOTU])
  AC_MSG_RESULT([${enable_zdot_bugfix}])

  if test "${enable_zdot_bugfix}" = "yes"; then
    AC_MSG_NOTICE([defining the 'HAVE_LINALG_ZDOTC_BUG' preprocessing macro])
    AC_DEFINE([HAVE_LINALG_ZDOTC_BUG],1,
      [Define to 1 if you want to activate workaround for bugged ZDOTC and ZDOTU.])
  fi
  if test "${enable_zdot_bugfix}" = "yes"; then
    AC_MSG_NOTICE([defining the 'HAVE_LINALG_ZDOTU_BUG' preprocessing macro])
    AC_DEFINE([HAVE_LINALG_ZDOTU_BUG],1,
      [Define to 1 if you want to activate workaround for bugged ZDOTC and ZDOTU.])
  fi
])
m4trace:config/m4/auto-output.m4:31: -1- AC_DEFUN([ABI_OUTPUT], [
  dnl Config files
  AC_CONFIG_FILES([
    config.dump
    config.pc
    config.sh
    bindings/config.sh
    config/wrappers/wrap-fc
    fallbacks/config.mk
    abichecks/Makefile
    abichecks/abichecks.env
    src/incs/Makefile
    src/mods/Makefile
    src/10_dumpinfo/m_build_info.F90
    Makefile
    src/Makefile
    src/01_gsl_ext/Makefile
    src/02_clib/Makefile
    src/10_defs/Makefile
    src/10_dumpinfo/Makefile
    src/11_memory_mpi/Makefile
    src/12_hide_mpi/Makefile
    src/14_hidewrite/Makefile
    src/15_gpu_toolbox/Makefile
    src/16_hideleave/Makefile
    src/17_libtetra_ext/Makefile
    src/18_timing/Makefile
    src/21_hashfuncs/Makefile
    src/27_toolbox_oop/Makefile
    src/28_numeric_noabirule/Makefile
    src/29_kpoints/Makefile
    src/32_util/Makefile
    src/41_geometry/Makefile
    src/41_xc_lowlevel/Makefile
    src/42_libpaw/Makefile
    src/42_nlstrain/Makefile
    src/42_parser/Makefile
    src/43_ptgroups/Makefile
    src/43_wvl_wrappers/Makefile
    src/44_abitools/Makefile
    src/44_abitypes_defs/Makefile
    src/45_geomoptim/Makefile
    src/45_xgTools/Makefile
    src/46_diago/Makefile
    src/49_gw_toolbox_oop/Makefile
    src/51_manage_mpi/Makefile
    src/52_fft_mpi_noabirule/Makefile
    src/52_manage_cuda/Makefile
    src/53_ffts/Makefile
    src/54_spacepar/Makefile
    src/55_abiutil/Makefile
    src/56_io_mpi/Makefile
    src/56_mixing/Makefile
    src/56_recipspace/Makefile
    src/56_xc/Makefile
    src/57_iopsp_parser/Makefile
    src/57_iovars/Makefile
    src/59_ionetcdf/Makefile
    src/61_occeig/Makefile
    src/62_cg_noabirule/Makefile
    src/62_ctqmc/Makefile
    src/62_iowfdenpot/Makefile
    src/62_poisson/Makefile
    src/62_wvl_wfs/Makefile
    src/63_bader/Makefile
    src/64_psp/Makefile
    src/65_lotf_base/Makefile
    src/65_paw/Makefile
    src/66_nonlocal/Makefile
    src/66_vdwxc/Makefile
    src/66_wfs/Makefile
    src/67_common/Makefile
    src/67_triqs_ext/Makefile
    src/68_dmft/Makefile
    src/68_lotf/Makefile
    src/68_recursion/Makefile
    src/68_rsprc/Makefile
    src/69_wfdesc/Makefile
    src/70_gw/Makefile
    src/71_bse/Makefile
    src/71_wannier/Makefile
    src/72_response/Makefile
    src/77_ddb/Makefile
    src/77_suscep/Makefile
    src/78_effpot/Makefile
    src/78_eph/Makefile
    src/79_seqpar_mpi/Makefile
    src/80_tdep/Makefile
    src/83_cut3d/Makefile
    src/84_fold2Bloch/Makefile
    src/94_scfcv/Makefile
    src/95_drive/Makefile
    src/98_main/Makefile
    src/libs/Makefile
 ])

  dnl Commands
  AC_CONFIG_COMMANDS([dump-optim],[/bin/sh ${abinit_srcdir}/config/scripts/make-optim-dumper])
  AC_CONFIG_COMMANDS([script-perms],[chmod u+x config/wrappers/wrap-fc])
  AC_CONFIG_COMMANDS([long-lines],[/bin/sh ${abinit_srcdir}/config/scripts/shrink-src-files ${abinit_srcdir} ${abinit_builddir}])

  dnl Output everything
  AC_OUTPUT
])
m4trace:config/m4/auto-subsystems.m4:22: -1- AC_DEFUN([ABI_SUBSYSTEMS_INIT], [
  dnl List subsystems
  AC_MSG_NOTICE([setting-up bindings (type: subsystem, mode: detached)])
  AC_MSG_NOTICE([setting-up doc (type: subsystem, mode: detached)])
  AC_MSG_NOTICE([setting-up fallbacks (type: subsystem, mode: attached)])
  AC_MSG_NOTICE([setting-up tests (type: subsystem, mode: attached)])

  dnl Configure subdirs
  AC_CONFIG_SUBDIRS([fallbacks tests])

])
m4trace:config/m4/bind-fortran.m4:19: -1- AC_DEFUN([ABI_FC_MODULE_MANGLING], [
  dnl Init
  abi_fc_module_ok="no"

  dnl Preserve environment
  ABI_ENV_BACKUP
  abi_saved_LIBS="${LIBS}"
  AC_LANG_PUSH([Fortran])

  dnl Compile a simple module
  AC_COMPILE_IFELSE(dnl
    [[
      module conftest
      contains
      subroutine foobar()
      return
      end subroutine foobar
      end module conftest
    ]],
    [abi_fc_module_ok="yes"; mv conftest.${ac_objext} cfortran_test.${ac_objext}])

  dnl Check that we got the information we need
  if test "${abi_fc_module_ok}" = "no"; then
    AC_MSG_FAILURE([cannot compile a simple Fortran program])
  fi

  dnl Extract information from the object file
  LIBS="cfortran_test.${ac_objext} ${LIBS} $[]_AC_LANG_PREFIX[]LIBS"

  dnl Look at the output of AC_FC_FUNC
  tmp_success="no"
  AC_LANG_PUSH([C])
  AC_FC_FUNC([foobar])
  for tmp_mod in "conftest" "CONFTEST" "foobar" "FOOBAR" "${foobar}" ; do
    for tmp_sub in "foobar" "FOOBAR" "${foobar}" "conftest" "CONFTEST" ; do
      for tmp_begin in "__" "" ; do
        for tmp_middle in "__" "_MOD_" "_MP_" "_mp_" ".in." "." "_" ; do
          tmp_func="${tmp_begin}${tmp_mod}${tmp_middle}${tmp_sub}"
          AC_LINK_IFELSE([AC_LANG_CALL([], [${tmp_func}])],
	    	         [tmp_success="yes"; break 4])
        done
      done
    done
  done
  AC_LANG_POP([C])

  dnl Define first concatenation symbol only if tmp_begin is not empty
  if test "${tmp_begin}" = ""; then
    tmp_bc=""
  else
    tmp_bc="##"
  fi

  dnl Define macro in config.h
  if test "${tmp_success}" = "yes"; then
    AH_TEMPLATE(ABI_FC_MOD,[Fortran module name mangling macro.])
    case "${tmp_mod}x${tmp_sub}" in
      conftestxfoobar)
        AC_DEFINE_UNQUOTED(ABI_FC_MOD(mod,MOD,sub,SUB), [${tmp_begin} ${tmp_bc} mod ## ${tmp_middle} ## sub])
        ;;
      conftestxFOOBAR)
        AC_DEFINE_UNQUOTED(ABI_FC_MOD(mod,MOD,sub,SUB), [${tmp_begin} ${tmp_bc} mod ## ${tmp_middle} ## SUB])
        ;;
      conftestx${foobar})
        AC_DEFINE_UNQUOTED(ABI_FC_MOD(mod,MOD,sub,SUB), [${tmp_begin} ${tmp_bc} mod ## ${tmp_middle} ## FC_FUNC(sub,SUB)])
        ;;
      CONFTESTxfoobar)
        AC_DEFINE_UNQUOTED(ABI_FC_MOD(mod,MOD,sub,SUB), [${tmp_begin} ${tmp_bc} MOD ## ${tmp_middle} ## sub])
        ;;
      CONFTESTxFOOBAR)
        AC_DEFINE_UNQUOTED(ABI_FC_MOD(mod,MOD,sub,SUB), [${tmp_begin} ${tmp_bc} MOD ## ${tmp_middle} ## SUB])
        ;;
      CONFTESTx${foobar})
        AC_DEFINE_UNQUOTED(ABI_FC_MOD(mod,MOD,sub,SUB), [${tmp_begin} ${tmp_bc} MOD ## ${tmp_middle} ## FC_FUNC(sub,SUB)])
        ;;
      foobarxconftest)
        AC_DEFINE_UNQUOTED(ABI_FC_MOD(mod,MOD,sub,SUB), [${tmp_begin} ${tmp_bc} sub ## ${tmp_middle} ## mod])
        ;;
      foobarxCONFTEST)
        AC_DEFINE_UNQUOTED(ABI_FC_MOD(mod,MOD,sub,SUB), [${tmp_begin} ${tmp_bc} sub ## ${tmp_middle} ## MOD])
        ;;
      ${foobar}xconftest)
        AC_DEFINE_UNQUOTED(ABI_FC_MOD(mod,MOD,sub,SUB), [${tmp_begin} ${tmp_bc} FC_FUNC(sub,SUB) ## ${tmp_middle} ## mod])
        ;;
      ${foobar}xCONFTEST)
        AC_DEFINE_UNQUOTED(ABI_FC_MOD(mod,MOD,sub,SUB), [${tmp_begin} ${tmp_bc} FC_FUNC(sub,SUB) ## ${tmp_middle} ## MOD])
        ;;
      FOOBARxconftest)
        AC_DEFINE_UNQUOTED(ABI_FC_MOD(mod,MOD,sub,SUB), [${tmp_begin} ${tmp_bc} SUB ## ${tmp_middle} ## mod])
        ;;
      FOOBARxCONFTEST)
        AC_DEFINE_UNQUOTED(ABI_FC_MOD(mod,MOD,sub,SUB), [${tmp_begin} ${tmp_bc} SUB ## ${tmp_middle} ## MOD])
        ;;
     esac
     abi_fc_mod_name="${tmp_begin}module${tmp_middle}subroutine"
  else
     abi_fc_mod_name="unknown"
  fi

  dnl Display final result
  AC_MSG_CHECKING([for the Fortran module name-mangling scheme])
  AC_MSG_RESULT([${abi_fc_mod_name}])

  dnl Restore environment
  AC_LANG_POP([Fortran])
  ABI_ENV_RESTORE
  LIBS="${abi_saved_LIBS}"
  rm -f cfortran_test* conftest*
])
m4trace:config/m4/conf-debug.m4:21: -1- AC_DEFUN([ABI_DEBUG_INIT], [
  dnl Init
  abi_debug_mode="$1"
  abi_optim_mode="$2"

  dnl Display debugging status
  AC_MSG_CHECKING([debugging status])
  case "${abi_debug_mode}" in
    no)
      AC_MSG_RESULT([disabled])
      CPPFLAGS_DEBUG=""
      CFLAGS_DEBUG=""
      CC_LDFLAGS_DEBUG=""
      CC_LIBS_DEBUG=""
      CXXFLAGS_DEBUG=""
      CXX_LDFLAGS_DEBUG=""
      CXX_LIBS_DEBUG=""
      FCFLAGS_DEBUG=""
      FC_LDFLAGS_DEBUG=""
      FC_LIBS_DEBUG=""
      ARFLAGS_DEBUG=""
      ;;
    yes)
      AC_MSG_RESULT([enabled (using user-specified debug flags)])
      ;;
    *)
      AC_MSG_RESULT([enabled (profile mode: ${abi_debug_mode})])
      CPPFLAGS_DEBUG=""
      CFLAGS_DEBUG=""
      CC_LDFLAGS_DEBUG=""
      CC_LIBS_DEBUG=""
      CXXFLAGS_DEBUG=""
      CXX_LDFLAGS_DEBUG=""
      CXX_LIBS_DEBUG=""
      FCFLAGS_DEBUG=""
      FC_LDFLAGS_DEBUG=""
      FC_LIBS_DEBUG=""
      ARFLAGS_DEBUG=""
      ;;
  esac

  dnl Init debug flags
  if test "${abi_debug_mode}" != "no" -a "${abi_debug_mode}" != "yes"; then

    dnl Init debug flags for the C compiler
    if test "${CFLAGS}" = ""; then
      if test "${ac_cv_prog_cc_g}" = "yes"; then
        CFLAGS_DEBUG="-g"
        AC_MSG_NOTICE([setting C debug flags to '-g'])
      fi
    fi

    dnl Init debug flags for the C++ compiler
    if test "${CXXFLAGS}" = ""; then
      if test "${ac_cv_prog_cxx_g}" = "yes"; then
        CXXFLAGS_DEBUG="-g"
        AC_MSG_NOTICE([setting C++ debug flags to '-g'])
      fi
    fi

    dnl Init debug flags for the Fortran compiler
    if test "${FCFLAGS}" = ""; then
      if test "${ac_cv_prog_fc_g}" = "yes"; then
        FCFLAGS_DEBUG="-g"
        AC_MSG_NOTICE([setting Fortran debug flags to '-g'])
      fi
    fi
  fi

  dnl Define DEBUG_MODE preprocessing option
  AC_MSG_CHECKING([whether to activate debug mode in source files])
  src_debug_mode="no"
  if test \( "${abi_debug_mode}" != "no" -a "${abi_debug_mode}" != "yes" -a \
             "${abi_debug_mode}" != "basic" -a \
             "${abi_debug_mode}" != "verbose" \) \
       -o \( "${abi_debug_mode}" = "yes" -a "${abi_optim_mode}" = "no" \); then
    AC_DEFINE([DEBUG_MODE],1,[Define to 1 to turn on debug mode.])
    src_debug_mode="yes"
  fi
  AC_MSG_RESULT([${src_debug_mode}])

  dnl Define DEBUG_VERBOSE preprocessing option
  AC_MSG_CHECKING([whether to activate debug verbosity in source files])
  src_debug_verbose="no"
  if test "${src_debug_mode}" = "yes" -o \
          "${abi_debug_mode}" = "verbose"; then
    AC_DEFINE([DEBUG_VERBOSE],1,[Define to 1 to turn on verbose debug messages.])
    src_debug_verbose="yes"
  fi
  AC_MSG_RESULT([${src_debug_verbose}])
])
m4trace:config/m4/conf-files.m4:37: -1- AC_DEFUN([ABI_LOAD_OPTIONS], [
  dnl Setup file names
  abi_hostname=`hostname | sed -e 's/\..*//'`
  abi_sys_options="/etc/abinit/build/${abi_hostname}.ac"
  abi_per_options="${HOME}/.abinit/build/${abi_hostname}.ac"
  abi_src_options="${abinit_srcdir}/${abi_hostname}.ac"
  abi_loc_options="./${abi_hostname}.ac"
  abi_cmd_options=`eval echo "${with_config_file}"`
  abi_cfg_options=""
  abi_ac_distcheck=""

  dnl Some architectures require "./" for files in current directory
  if test "${abi_cmd_options}" != ""; then
    abi_cmd_has_path=`echo "${abi_cmd_options}" | grep '/'`
    if test "${abi_cmd_has_path}" = ""; then
      abi_cmd_options="./${abi_cmd_options}"
    fi
    unset abi_cmd_has_path
  fi

  dnl Select and read config file
  if test "${enable_config_file}" = "yes"; then
    if test "${with_config_file}" != "" -a \
            ! -e "${with_config_file}"; then
      AC_MSG_ERROR([config file ${with_config_file} not found])
    fi

    for abi_options in "${abi_sys_options}" "${abi_per_options}" \
                       "${abi_src_options}" "${abi_loc_options}" \
                       "${abi_cmd_options}"; do
      if test -s "${abi_options}"; then
        abi_cfg_options="${abi_options}"
      fi
    done

    dnl Prevent infinite loops
    if grep "From configure.ac Autotools support for ABINIT" \
      "${abi_cfg_options}" >/dev/null 2>&1; then
      AC_MSG_ERROR([infinite loop detected - aborting!])
    fi

    dnl Source the file
    if test "${abi_cfg_options}" != ""; then
      AC_MSG_NOTICE([reading options from ${abi_cfg_options}])
      . "${abi_cfg_options}"
    else
      AC_MSG_NOTICE([not loading options (no config file available)])
    fi
  else
    AC_MSG_NOTICE([not loading options (disabled from command line)])
  fi

  dnl Propagate information to "make distcheck"
  abi_ac_distcheck=`${REALPATH} -f "${abi_cfg_options}"`
  if test "${abi_ac_distcheck}" != ""; then
    abi_ac_distcheck="--with-config-file=\"${abi_ac_distcheck}\""
  fi

  AC_SUBST(abi_ac_distcheck)
])
m4trace:config/m4/conf-files.m4:107: -1- AC_DEFUN([ABI_LOAD_DBGFLAGS], [
  dnl Do some sanity checking of the arguments
  m4_if([$1], , [AC_FATAL([$0: missing argument 1])])dnl
  m4_if([$2], , [AC_FATAL([$0: missing argument 2])])dnl
  m4_if([$3], , [AC_FATAL([$0: missing argument 3])])dnl
  m4_if([$4], , [AC_FATAL([$0: missing argument 3])])dnl

  dnl Init
  abi_result=""
  abi_dbgflags_file=""

  dnl Explore all the possibilities
  for tmp_dbgflags_file in \
    "${ac_top_srcdir}/config/compilers/$2_$1/all/all.dbg" \
    "${ac_top_srcdir}/config/compilers/$2_$1/all/$4.dbg" \
    "${ac_top_srcdir}/config/compilers/$2_$1/$3/all.dbg" \
    "${ac_top_srcdir}/config/compilers/$2_$1/$3/$4.dbg"; do

    if test -s "${tmp_dbgflags_file}"; then
      abi_dbgflags_file="${tmp_dbgflags_file}"
      abi_result=`echo "${abi_dbgflags_file}" | \
        sed -e 's,.*compilers/,,; s,\.dbg$,,; s,^\([[^_]]*\)_\([[^/]]*\),\2: \1,'`
    fi
  done

  dnl Source the file
  #AC_MSG_NOTICE([checking ${abi_dbgflags_file}])
  if test "${abi_dbgflags_file}" != ""; then
    AC_MSG_NOTICE([loading debug flags for ${abi_result}])
    . "${abi_dbgflags_file}"
  fi
])
m4trace:config/m4/conf-files.m4:149: -1- AC_DEFUN([ABI_LOAD_DIRFLAGS], [
  dnl Do some sanity checking of the arguments
  m4_if([$1], , [AC_FATAL([$0: missing argument 1])])dnl
  m4_if([$2], , [AC_FATAL([$0: missing argument 2])])dnl
  m4_if([$3], , [AC_FATAL([$0: missing argument 3])])dnl
  m4_if([$4], , [AC_FATAL([$0: missing argument 3])])dnl

  dnl Init
  abi_result=""
  abi_dirflags_file=""

  dnl Explore all the possibilities
  for tmp_dirflags_file in \
    "${ac_top_srcdir}/config/compilers/$2_$1/all/all.dir" \
    "${ac_top_srcdir}/config/compilers/$2_$1/all/$4.dir" \
    "${ac_top_srcdir}/config/compilers/$2_$1/$3/all.dir" \
    "${ac_top_srcdir}/config/compilers/$2_$1/$3/$4.dir"; do

    if test -s "${tmp_dirflags_file}"; then
      abi_dirflags_file="${tmp_dirflags_file}"
      abi_result=`echo "${abi_dirflags_file}" | \
        sed -e 's,.*compilers/,,; s,\.dir$,,; s,^\([[^_]]*\)_\([[^/]]*\),\2: \1,'`
    fi
  done

  dnl Source the file
  #AC_MSG_NOTICE([checking ${abi_dirflags_file}])
  if test "${abi_dirflags_file}" != ""; then
    AC_MSG_NOTICE([loading customizations for ${abi_result}])
    . "${abi_dirflags_file}"
  fi
])
m4trace:config/m4/conf-files.m4:191: -1- AC_DEFUN([ABI_LOAD_OPTFLAGS], [
  dnl Do some sanity checking of the arguments
  m4_if([$1], , [AC_FATAL([$0: missing argument 1])])dnl
  m4_if([$2], , [AC_FATAL([$0: missing argument 2])])dnl
  m4_if([$3], , [AC_FATAL([$0: missing argument 3])])dnl
  m4_if([$4], , [AC_FATAL([$0: missing argument 3])])dnl

  dnl Init
  abi_result=""
  abi_optflags_file=""

  dnl Explore all the possibilities
  for tmp_optflags_file in \
    "${ac_top_srcdir}/config/compilers/generic_$1/all/all.opt" \
    "${ac_top_srcdir}/config/compilers/$2_$1/all/all.opt" \
    "${ac_top_srcdir}/config/compilers/$2_$1/all/$4.opt" \
    "${ac_top_srcdir}/config/compilers/$2_$1/$3/all.opt" \
    "${ac_top_srcdir}/config/compilers/$2_$1/$3/$4.opt"; do

    if test -s "${tmp_optflags_file}"; then
      abi_optflags_file="${tmp_optflags_file}"
      abi_result=`echo "${abi_optflags_file}" | \
        sed -e 's,.*compilers/,,; s,\.opt$,,; s,^\([[^_]]*\)_\([[^/]]*\),\2: \1,'`
    fi
  done

  dnl Source the file
  #AC_MSG_NOTICE([checking ${abi_optflags_file}])
  if test "${abi_optflags_file}" != ""; then
    AC_MSG_NOTICE([loading optimizations for ${abi_result}])
    . "${abi_optflags_file}"
  else
    AC_MSG_WARN([could not find suitable optimizations])
  fi
])
m4trace:config/m4/conf-files.m4:234: -1- AC_DEFUN([ABI_PROG_MKDIR_P], [
  AC_PROG_MKDIR_P
  abi_tmp_mkdir_p=`echo "${MKDIR_P}" | awk '{print [$]1}'`
  if test "${abi_tmp_mkdir_p}" = "config/gnu/install-sh"; then
    AC_MSG_NOTICE([fixing wrong path to mkdir replacement])
    MKDIR_P="${abinit_srcdir}/${MKDIR_P}"
  fi
  unset abi_tmp_mkdir_p
])
m4trace:config/m4/conf-init.m4:21: -1- AC_DEFUN([ABI_INIT_ARCH], [
  dnl Shared object extensions
  case "${target}" in
    *apple*)
      abi_so_ext="dylib"
      ;;
    *)
      abi_so_ext="so"
      ;;
  esac
])
m4trace:config/m4/conf-init.m4:47: -1- AC_DEFUN([ABI_INIT_CPU_INFO], [
  abi_cpu_platform=`echo "${target}" | cut -d- -f2`
  abi_cpu_vendor=""
  abi_cpu_model=""
  abi_cpu_spec=""
  abi_cpu_bits=""
  abi_cpu_64bits=""

  case "${target}" in

    alpha*)
      abi_cpu_vendor="dec"
      abi_cpu_model="${target_cpu}"
      abi_cpu_64bits=`echo "${abi_cpu_model}" | grep '64$'`
      if test "${abi_cpu_64bits}" = ""; then
        abi_cpu_64bits="no"
        abi_cpu_bits="32"
      else
        abi_cpu_64bits="yes"
        abi_cpu_bits="64"
      fi
      ;;

    powerpc*)
      abi_cpu_vendor="ibm"
      abi_cpu_model="${target_cpu}"
      abi_cpu_64bits=`echo "${abi_cpu_model}" | grep '64$'`
      if test "${abi_cpu_64bits}" = ""; then
        abi_cpu_64bits="no"
        abi_cpu_bits="32"
      else
        abi_cpu_64bits="yes"
        abi_cpu_bits="64"
      fi
      ;;

    i686-*linux*)
      dnl Athlon ?
      if test "${abi_cpu_model}" = ""; then
        abi_cpu_model=`cat /proc/cpuinfo | grep 'Athlon'`
        if test "${abi_cpu_model}" != ""; then
          abi_cpu_vendor="amd"
          abi_cpu_model="athlon"
          abi_cpu_64bits="no"
          abi_cpu_bits="32"
        fi
      fi
      dnl Pentium 3 ?
      if test "${abi_cpu_model}" = ""; then
        abi_cpu_model=`cat /proc/cpuinfo | grep 'Pentium III'`
        if test "${abi_cpu_model}" != ""; then
          abi_cpu_vendor="intel"
          abi_cpu_model="pentium3"
          abi_cpu_64bits="no"
          abi_cpu_bits="32"
        fi
      fi
      dnl Pentium 4 ?
      if test "${abi_cpu_model}" = ""; then
        abi_cpu_model=`cat /proc/cpuinfo | grep 'Intel(R) Pentium(R) 4'`
        if test "${abi_cpu_model}" != ""; then
          abi_cpu_vendor="intel"
          abi_cpu_model="pentium4"
          abi_cpu_64bits="no"
          abi_cpu_bits="32"
        fi
      fi
      dnl Pentium 4M ?
      if test "${abi_cpu_model}" = ""; then
        abi_cpu_model=`cat /proc/cpuinfo | grep 'Intel(R) Pentium(R) M'`
        if test "${abi_cpu_model}" != ""; then
          abi_cpu_vendor="intel"
          abi_cpu_model="pentium4"
          abi_cpu_64bits="no"
          abi_cpu_bits="32"
        fi
      fi
      dnl Centrino ?
      if test "${abi_cpu_model}" = ""; then
        abi_cpu_model=`cat /proc/cpuinfo | grep 'Intel(R) CPU           T2400'`
        if test "${abi_cpu_model}" != ""; then
          abi_cpu_vendor="intel"
          abi_cpu_model="centrino"
          abi_cpu_64bits="no"
          abi_cpu_bits="32"
        fi
      fi
      dnl Pentium CoreDuo ?
      if test "${abi_cpu_model}" = ""; then
        abi_cpu_model=`cat /proc/cpuinfo | grep 'Intel(R) CPU           T2050'`
        if test "${abi_cpu_model}" != ""; then
          abi_cpu_vendor="intel"
          abi_cpu_model="coreduo"
          abi_cpu_64bits="no"
          abi_cpu_bits="32"
        fi
      fi
      dnl Pentium Core2 ?
      if test "${abi_cpu_model}" = ""; then
        abi_cpu_model=`cat /proc/cpuinfo | grep 'Intel(R) Core(TM)2 CPU'`
        if test "${abi_cpu_model}" != ""; then
          abi_cpu_vendor="intel"
          abi_cpu_model="core2"
          abi_cpu_64bits="no"
          abi_cpu_bits="32"
        fi
      fi
      dnl Pentium Core2 Quad ?
      if test "${abi_cpu_model}" = ""; then
        abi_cpu_model=`cat /proc/cpuinfo | grep 'Intel(R) Core(TM)2 Quad CPU'`
        if test "${abi_cpu_model}" != ""; then
          abi_cpu_vendor="intel"
          abi_cpu_model="core2"
          abi_cpu_64bits="no"
          abi_cpu_bits="32"
        fi
      fi
      dnl Unknown
      if test "${abi_cpu_model}" = ""; then
        abi_cpu_vendor="unknown"
        abi_cpu_model="unknown"
        abi_cpu_64bits="unknown"
        abi_cpu_bits="32"
      fi
      ;;

    ia64-*linux*)
      dnl Itanium 1 ?
      if test "${abi_cpu_model}" = ""; then
        abi_cpu_model=`cat /proc/cpuinfo | grep 'Itanium' | grep -v 'Itanium 2'`
        if test "${abi_cpu_model}" != ""; then
          abi_cpu_vendor="intel"
          abi_cpu_model="itanium1"
        fi
      fi
      dnl Itanium 2 ?
      if test "${abi_cpu_model}" = ""; then
        abi_cpu_model=`cat /proc/cpuinfo | grep 'Itanium 2'`
        if test "${abi_cpu_model}" != ""; then
          abi_cpu_vendor="intel"
          abi_cpu_model="itanium2"
        fi
      fi
      dnl Madison ?
      if test "${abi_cpu_model}" = ""; then
        abi_cpu_model=`cat /proc/cpuinfo | grep 'Madison'`
        if test "${abi_cpu_model}" != ""; then
          abi_cpu_vendor="intel"
          abi_cpu_model="itanium2"
        fi
      fi
      dnl Unknown
      if test "${abi_cpu_model}" = ""; then
        abi_cpu_vendor="unknown"
        abi_cpu_model="unknown"
      fi
      dnl The processor is anyway 64-bit
      abi_cpu_64bits="yes"
      abi_cpu_bits="64"
      ;;

    mips*irix*)
      # Get processor type
      abi_cpu_vendor="mips"
      abi_cpu_model=`hinv 2> /dev/null | grep '^CPU: MIPS '`
      if test "${abi_cpu_model}" != ""; then
        abi_cpu_model=`echo "${abi_cpu_model}" | awk '{print tolower($3)}'`
      fi
      abi_cpu_64bits="yes"
      abi_cpu_bits="64"
      ;;

    x86_64-*linux*|x86_64*apple*)
      case "${target}" in
      x86_64-*linux*)
         cp /proc/cpuinfo cpuinfo
         ;;
      x86_64-*apple*)
         sysctl -A | grep 'machdep.cpu.brand_string' > cpuinfo
         ;;
      esac
      dnl Athlon64 ?
      if test "${abi_cpu_model}" = ""; then
        abi_cpu_model=`cat cpuinfo | grep 'Athlon'`
        if test "${abi_cpu_model}" != ""; then
          abi_cpu_vendor="amd"
          abi_cpu_model="athlon64"
        fi
      fi
      dnl Opteron ?
      if test "${abi_cpu_model}" = ""; then
        abi_cpu_model=`cat cpuinfo | grep 'Opteron'`
        if test "${abi_cpu_model}" != ""; then
          abi_cpu_vendor="amd"
          abi_cpu_model="opteron"
        fi
      fi
      dnl Sempron ?
      if test "${abi_cpu_model}" = ""; then
        abi_cpu_model=`cat cpuinfo | grep 'Sempron'`
        if test "${abi_cpu_model}" != ""; then
          abi_cpu_vendor="amd"
          abi_cpu_model="athlon64"
        fi
      fi
      dnl Pentium Core2 ?
      if test "${abi_cpu_model}" = ""; then
        abi_cpu_model=`cat cpuinfo | grep 'Intel(R) Core(TM)2'`
        if test "${abi_cpu_model}" != ""; then
          abi_cpu_vendor="intel"
          abi_cpu_model="core2"
        fi
      fi
      dnl Pentium Core2 Quad ?
      if test "${abi_cpu_model}" = ""; then
        abi_cpu_model=`cat cpuinfo | grep 'Intel(R) Core(TM)2 Quad'`
        if test "${abi_cpu_model}" != ""; then
          abi_cpu_vendor="intel"
          abi_cpu_model="core2"
        fi
      fi
      dnl Pentium Core i3 ?
      if test "${abi_cpu_model}" = ""; then
        abi_cpu_model=`cat cpuinfo | grep 'Intel(R) Core(TM) i3'`
        if test "${abi_cpu_model}" != ""; then
          abi_cpu_vendor="intel"
          abi_cpu_model="core_i3"
        fi
      fi
      dnl Xeon ?
      if test "${abi_cpu_model}" = ""; then
        abi_cpu_model=`cat cpuinfo | grep 'Intel(R) XEON(TM)'`
        if test "${abi_cpu_model}" != ""; then
          abi_cpu_vendor="intel"
          abi_cpu_model="xeon"
        fi
      fi
      if test "${abi_cpu_model}" = ""; then
        abi_cpu_model=`cat cpuinfo | grep 'Intel(R) Xeon(R)'`
        if test "${abi_cpu_model}" != ""; then
          abi_cpu_vendor="intel"
          abi_cpu_model="xeon"
        fi
      fi
      dnl Unknown
      if test "${abi_cpu_model}" = ""; then
        abi_cpu_vendor="unknown"
        abi_cpu_model="unknown"
      fi
      dnl The processor is anyway 64-bit
      abi_cpu_64bits="yes"
      abi_cpu_bits="64"
      rm -rf cpuinfo
      ;;

  esac

  dnl Generate CPU identifier
  abi_cpu_spec="${abi_cpu_vendor}_${abi_cpu_model}"

  dnl General system identifier
  abi_sys_spec=`echo "${target_os}" | cut -d- -f1 | sed -e 's/[[0-9]].*//'`
  abi_sys_spec="${abi_sys_spec}-${target_cpu}"

  AC_SUBST(abi_cpu_platform)
  AC_SUBST(abi_cpu_vendor)
  AC_SUBST(abi_cpu_model)
  AC_SUBST(abi_cpu_spec)
  AC_SUBST(abi_cpu_64bits)
  AC_SUBST(abi_cpu_bits)
  AC_SUBST(abi_sys_spec)
])
m4trace:config/m4/conf-init.m4:328: -1- AC_DEFUN([ABI_INIT_OS_INFO], [
  case "${target_os}" in

    *linux*)
      AC_DEFINE([HAVE_OS_LINUX],1,[Define to 1 if you are using Linux.])
      ;;

    *apple*)
      AC_DEFINE([HAVE_OS_MACOSX],1,[Define to 1 if you are using MacOS X.])
      ;;

    *cygwin*|*mingw*)
      AC_DEFINE([HAVE_OS_WINDOWS],1,[Define to 1 if you are using Windows.])
      ;;

  esac
])
m4trace:config/m4/conf-init.m4:353: -1- AC_DEFUN([ABI_INIT_HEADER], [
  dnl Set top of file ...
  AH_TOP([/*
 * Copyright (C) 2005-2018 ABINIT Group (Yann Pouillon)
 *
 * This file is part of the Abinit software package. For license information,
 * please see the COPYING file in the top-level directory of the Abinit source
 * distribution.
 *
 */

/* Abinit configuration */

#ifndef _ABINIT_CONFIG_H
#define _ABINIT_CONFIG_H

#ifdef __INTEL_COMPILER
#define FC_INTEL 1
#endif

])

  dnl ... as well as bottom
  AH_BOTTOM([/* *** BEGIN sanity checks *** */

/* MPI options */
#if defined HAVE_MPI 

/* Check that one MPI level is actually defined */
#if ! defined HAVE_MPI1 && ! defined HAVE_MPI2
#error "HAVE_MPI1 and HAVE_MPI2 are both undefined"
#endif

/* Check that only one MPI level has been defined */
#if defined HAVE_MPI1 && defined HAVE_MPI2
#error "HAVE_MPI1 and HAVE_MPI2 are both defined"
#endif

#else /* HAVE_MPI */

/* Check that no MPI level is defined */
#if defined HAVE_MPI1 || defined HAVE_MPI2
#error "HAVE_MPI1 and HAVE_MPI2 must be undefined"
#endif

/* Check that MPI-IO is undefined */
#if defined HAVE_MPI_IO
#error "HAVE_MPI_IO must be undefined"
#endif

#endif /* HAVE_MPI */

/* ETSF_IO support */
#if defined HAVE_ETSF_IO

/* Check that NetCDF is defined */
#if ! defined HAVE_NETCDF
#error "HAVE_NETCDF must but defined for ETSF_IO to work"
#endif

#endif /* HAVE_ETSF_IO */

/* *** END sanity checks *** */

#endif /* _ABINIT_CONFIG_H */])
])
m4trace:config/m4/conf-init.m4:427: -1- AC_DEFUN([ABI_INIT_INSTALL_DIRS], [
  dnl Set-up prefix
  if test "${prefix}" = "NONE"; then
    abinit_prefix="${ac_default_prefix}"
  else
    abinit_prefix="${prefix}"
  fi

  dnl Set-up all directory names
  abinit_bindir="${abinit_prefix}/bin"
  abinit_chkdir="${abinit_prefix}/share/abinit/tests"
  abinit_datdir="${abinit_prefix}/share/abinit"
  abinit_docdir="${abinit_prefix}/doc/abinit"
  abinit_incdir="${abinit_prefix}/include"
  abinit_libdir="${abinit_prefix}/lib"
  abinit_mandir="${abinit_prefix}/share/man"

  dnl Substitute all variables
  AC_SUBST(abinit_prefix)
  AC_SUBST(abinit_bindir)
  AC_SUBST(abinit_chkdir)
  AC_SUBST(abinit_datdir)
  AC_SUBST(abinit_docdir)
  AC_SUBST(abinit_incdir)
  AC_SUBST(abinit_libdir)
  AC_SUBST(abinit_mandir)
])
m4trace:config/m4/conf-init.m4:464: -1- AC_DEFUN([ABI_INIT_TARGET], [
  dnl Clean-up operating system name
  [abi_target_os=`echo ${target_os} | sed -e 's/-.*//'`]
  
  ABINIT_TARGET="${target_cpu}_${abi_target_os}_${abi_fc_vendor}${abi_fc_version}"
  AC_DEFINE_UNQUOTED(ABINIT_TARGET,"${ABINIT_TARGET}",
    [Abinit target description.])
  AC_SUBST(ABINIT_TARGET)
])
m4trace:config/m4/conf-init.m4:481: -1- AC_DEFUN([ABI_INIT_VERSION], [
  dnl Get version from Autoconf
  ABINIT_VERSION="${PACKAGE_VERSION}"
  ABINIT_VERSION_MAJOR=`echo "${ABINIT_VERSION}" | cut -d. -s -f1`
  ABINIT_VERSION_MINOR=`echo "${ABINIT_VERSION}" | cut -d. -s -f2`
  ABINIT_VERSION_MICRO=`echo "${ABINIT_VERSION}" | cut -d. -s -f3`
  ABINIT_VERSION_MINOR=`echo "${ABINIT_VERSION_MINOR}" | sed -e 's/[a-z]//g'`
  if test "${ABINIT_VERSION_MICRO}" = ""; then
    ABINIT_VERSION_MICRO=`echo "${ABINIT_VERSION}" | cut -b4-`
  fi
  if test "${ABINIT_VERSION_MICRO}" = ""; then
    ABINIT_VERSION_MICRO="dev"
  fi
  ABINIT_VERSION_BUILD=`date '+%Y%m%d'`

  ABINIT_VERSION_BASE="${ABINIT_VERSION_MAJOR}.${ABINIT_VERSION_MINOR}"

  dnl Make numbers available to source files
  AC_DEFINE_UNQUOTED(ABINIT_VERSION,"${ABINIT_VERSION}",
    [Abinit whole version number.])
  AC_DEFINE_UNQUOTED(ABINIT_VERSION_MAJOR,"${ABINIT_VERSION_MAJOR}",
    [Abinit major version number.])
  AC_DEFINE_UNQUOTED(ABINIT_VERSION_MINOR,"${ABINIT_VERSION_MINOR}",
    [Abinit minor version number.])
  AC_DEFINE_UNQUOTED(ABINIT_VERSION_MICRO,"${ABINIT_VERSION_MICRO}",
    [Abinit micro version number (patch level).])
  AC_DEFINE_UNQUOTED(ABINIT_VERSION_BUILD,"${ABINIT_VERSION_BUILD}",
    [Abinit build date.])
  AC_DEFINE_UNQUOTED(ABINIT_VERSION_BASE,"${ABINIT_VERSION_BASE}",
    [Abinit base version number.])
  AC_SUBST(ABINIT_VERSION)
  AC_SUBST(ABINIT_VERSION_MAJOR)
  AC_SUBST(ABINIT_VERSION_MINOR)
  AC_SUBST(ABINIT_VERSION_MICRO)
  AC_SUBST(ABINIT_VERSION_BUILD)
  AC_SUBST(ABINIT_VERSION_BASE)
])
m4trace:config/m4/conf-openmp.m4:21: -1- AC_DEFUN([ABI_OMP_CHECK_COLLAPSE], [
  dnl Init
  abi_omp_has_collapse="unknown"

  dnl Check whether OpenMP's COLLAPSE is working
  AC_LANG_PUSH([Fortran])
  AC_MSG_CHECKING([whether OpenMP's COLLAPSE works])
  AC_RUN_IFELSE([AC_LANG_PROGRAM([],
    [[
      integer :: alfa,i,levels
      levels = 1
      open(unit=10,file="conftest.collapse")
!$OMP PARALLEL DO COLLAPSE(2) PRIVATE(alfa,i) DEFAULT(shared)
       do alfa=1,1
         do i=1,levels
           write(10,'(I1)') i*alfa
         end do
       end do
!$OMP END PARALLEL DO
       close(unit=10)
    ]])], [abi_omp_has_collapse="yes"; abi_omp_collapse_result=`cat conftest.collapse 2>/dev/null`; rm -f conftest.collapse], [abi_omp_has_collapse="no"; rm -f conftest.collapse])
  test "${abi_omp_collapse_result}" = "1" || abi_omp_has_collapse="no"
  AC_MSG_RESULT([${abi_omp_has_collapse}])
  AC_LANG_POP([Fortran])

  dnl Propagate result
  if test "${abi_omp_has_collapse}" = "yes"; then
    AC_DEFINE([HAVE_OMP_COLLAPSE],1,[Set to 1 if OpenMP has a working implementation of COLLAPSE.])
  fi
])
m4trace:config/m4/conf-optim.m4:21: -1- AC_DEFUN([ABI_OPTIM_INIT], [
  dnl Init
  abi_optim_mode="$1"

  dnl Display optimization status
  AC_MSG_CHECKING([optimization status])
  case "${abi_optim_mode}" in
    no)
      AC_MSG_RESULT([disabled])
      CPPFLAGS_OPTIM=""
      CFLAGS_OPTIM="-O0"
      CC_LDFLAGS_OPTIM=""
      CC_LIBS_OPTIM=""
      CXXFLAGS_OPTIM="-O0"
      CXX_LDFLAGS_OPTIM=""
      CXX_LIBS_OPTIM=""
      FCFLAGS_OPTIM="-O0"
      FC_LDFLAGS_OPTIM=""
      FC_LIBS_OPTIM=""
      ARFLAGS_OPTIM=""
      ;;
    yes)
      AC_MSG_RESULT([enabled (using user-specified flags)])
      ;;
    *)
      AC_MSG_RESULT([enabled (profile mode: ${abi_optim_mode})])
      CPPFLAGS_OPTIM=""
      CFLAGS_OPTIM=""
      CC_LDFLAGS_OPTIM=""
      CC_LIBS_OPTIM=""
      CXXFLAGS_OPTIM=""
      CXX_LDFLAGS_OPTIM=""
      CXX_LIBS_OPTIM=""
      FCFLAGS_OPTIM=""
      FC_LDFLAGS_OPTIM=""
      FC_LIBS_OPTIM=""
      ARFLAGS_OPTIM=""
      ;;
  esac
])
m4trace:config/m4/conn-algo.m4:21: -1- AC_DEFUN([_ABI_ALGO_CHECK_LEVMAR], [
  dnl Init
  abi_algo_levmar_has_incs="no"
  abi_algo_levmar_has_libs="no"
  abi_algo_levmar_serial="no"
  abi_algo_levmar_mpi="no"
  abi_algo_levmar_fcflags=""
  abi_algo_levmar_ldflags=""
  abi_algo_levmar_incs="${with_algo_incs}"
  abi_algo_levmar_libs="${with_algo_libs}"

  dnl Need to switch to C
  AC_LANG_PUSH([C])

  dnl Look for includes
  AC_CHECK_HEADERS([levmar.h],[abi_algo_levmar_has_incs="yes"],[abi_algo_levmar_has_incs="no"])

  dnl Look for libraries and routines
  if test "${abi_algo_levmar_libs}" = ""; then
    AC_CHECK_LIB([levmar],[dlevmar_dif],[abi_algo_levmar_has_libs="yes"],[abi_algo_levmar_has_libs="no"])
    if test "${abi_algo_levmar_has_libs}" = "yes"; then
      abi_algo_levmar_libs="-llevmar"
    fi
  else
    AC_MSG_CHECKING([whether the specified LEVMAR library works])
    AC_LINK_IFELSE([AC_LANG_PROGRAM(
      [[
#include <stdlib.h>
#include <levmar.h>

        void dfit_function(double *p, double *y, int m, int n, void *adata)
        {
          p = 0;
        }
      ]],
      [[
        int ret;
        int c_npoles = 1;
        int c_nvals  = 1;
        int nparam   = 1;

        double adata[1];
        double p[1];
        double yvals[1];

        double opts[LM_OPTS_SZ], info[LM_INFO_SZ];

        ret=dlevmar_dif(dfit_function, p, yvals, nparam, c_nvals, 5000, \
          opts, info, NULL, NULL, (void *)&adata);
      ]])], [abi_algo_levmar_has_libs="yes"], [abi_algo_levmar_has_libs="no"])
    AC_MSG_RESULT([${abi_algo_levmar_has_libs}])
  fi

  dnl Take final decision
  if test "${abi_algo_levmar_has_incs}" = "yes" -a \
          "${abi_algo_levmar_has_libs}" = "yes"; then
    abi_algo_levmar_serial="yes"
  fi

  dnl Restore previous language
  AC_LANG_POP([C])
])
m4trace:config/m4/conn-algo.m4:91: -1- AC_DEFUN([ABI_CONNECT_ALGO], [
  dnl Initial setup
  lib_algo_flavor="${with_algo_flavor}"
  lib_algo_fcflags=""
  lib_algo_ldflags=""
  lib_algo_incs=""
  lib_algo_libs=""
  abi_algo_serial="no"
  abi_algo_mpi="no"

  dnl Prepare environment
  ABI_ENV_BACKUP
  abi_saved_LIBS="${LIBS}"
  CPPFLAGS="${with_algo_incs} ${CPPFLAGS}"
  LDFLAGS="${FC_LDFLAGS}"
  LIBS="${with_algo_libs} ${LIBS}"
  AC_LANG_PUSH([Fortran])

  dnl Display requested flavor
  AC_MSG_CHECKING([for the requested algorithmic support])
  AC_MSG_RESULT([${with_algo_flavor}])

  dnl Look for external algorithmic libraries
  if test "${with_algo_flavor}" != "none"; then

    case "${with_algo_flavor}" in

      custom)
        if test "${with_algo_incs}" == ""; then
          AC_MSG_ERROR([you must specify custom algorithmic includes (--with-algo-incs)])
        fi
        if test "${with_algo_libs}" == ""; then
          AC_MSG_ERROR([you must specify custom algorithmic libraries (--with-algo-libs)])
        fi
        abi_algo_serial="yes"
        abi_algo_mpi="yes"
        lib_algo_incs="${with_algo_incs}"
        lib_algo_libs="${with_algo_libs}"
        ;;

      levmar)
        if test "${abi_linalg_serial}" == "no"; then
          AC_MSG_ERROR([levmar support only works with external linear algebra libraries])
        fi
        LIBS="${lib_linalg_libs} ${LIBS}"
        _ABI_ALGO_CHECK_LEVMAR
        abi_algo_serial="${abi_algo_levmar_serial}"
        abi_algo_mpi="${abi_algo_levmar_mpi}"
        if test "${abi_algo_serial}" = "yes"; then
          AC_DEFINE([HAVE_LEVMAR],1,[Define to 1 if you have the Levenberg-Marquardt algorithmic library.])
          lib_algo_fcflags="${abi_algo_levmar_fcflags}"
          lib_algo_ldflags="${abi_algo_levmar_ldflags}"
          lib_algo_incs="${abi_algo_levmar_incs}"
          lib_algo_libs="${abi_algo_levmar_libs}"
        fi
        ;;

      *)
        AC_MSG_ERROR([unknown algorithmic flavor '${with_algo_flavor}'])
        ;;

    esac

  fi

  dnl Restore build environment
  AC_LANG_POP([Fortran])
  LIBS="${abi_saved_LIBS}"
  ABI_ENV_RESTORE

  dnl Output final flavor
  AC_MSG_CHECKING([for the actual algorithmic support])
  AC_MSG_RESULT([${lib_algo_flavor}])
  if test "${lib_algo_flavor}" = "broken"; then
    ABI_MSG_NOTICE([connectors-failure],[Connector detection failure])
    if test "${with_algo_libs}" = ""; then
      AC_MSG_ERROR([the requested ${with_algo_flavor} algorithmic flavor is not available])
    else
      AC_MSG_ERROR([the specified algorithmic libraries do not work])
    fi
  fi

  dnl Substitute variables needed for the use of the library
  AC_SUBST(lib_algo_flavor)
  AC_SUBST(lib_algo_fcflags)
  AC_SUBST(lib_algo_ldflags)
  AC_SUBST(lib_algo_incs)
  AC_SUBST(lib_algo_libs)
])
m4trace:config/m4/conn-dft.m4:21: -1- AC_DEFUN([_ABI_DFT_CHECK_ATOMPAW], [
  dnl Init
  abi_dft_atompaw_has_bins="no"
  abi_dft_atompaw_has_incs="no"
  abi_dft_atompaw_has_libs="no"
  abi_dft_atompaw_serial="no"
  abi_dft_atompaw_mpi="no"
  abi_dft_atompaw_fcflags=""
  abi_dft_atompaw_ldflags=""
  abi_dft_atompaw_bins="${with_atompaw_bins}"
  abi_dft_atompaw_incs="${with_atompaw_incs}"
  abi_dft_atompaw_libs="${with_atompaw_libs}"

  dnl Look for binaries
  if test "${abi_dft_atompaw_bins}" = ""; then
    AC_CHECK_PROGS([ATOMPAW_BIN],[atompaw])
    AC_CHECK_PROGS([GRAPHATOM_BIN],[graphatom])
    if test "${ATOMPAW_BIN}" != "" -a "${GRAPHATOM_BIN}" != ""; then
      abi_dft_atompaw_has_bins="yes"
    fi
  else
    ATOMPAW_BIN="${abi_dft_atompaw_bins}/atompaw"
    GRAPHATOM_BIN="${abi_dft_atompaw_bins}/graphatom"
    if test -x "${ATOMPAW_BIN}" -a -x "${GRAPHATOM_BIN}"; then
      abi_dft_atompaw_has_bins="yes"
    fi
  fi

  dnl Take final decision for the serial case
  if test "${abi_dft_atompaw_has_bins}" = "yes"; then
    abi_dft_atompaw_serial="yes"
  fi

  dnl Check for MPI support
  if test "${enable_mpi}" = "yes"; then
    if test "${abi_dft_atompaw_serial}" = "yes"; then
      abi_dft_atompaw_mpi="yes"
    fi
  fi
])
m4trace:config/m4/conn-dft.m4:69: -1- AC_DEFUN([_ABI_DFT_CHECK_BIGDFT], [
  dnl Init
  abi_dft_bigdft_default_libs="-lbigdft-1 -labinit -lyaml"
  abi_dft_bigdft_has_incs="no"
  abi_dft_bigdft_has_libs="no"
  abi_dft_bigdft_serial="no"
  abi_dft_bigdft_mpi="no"
  abi_dft_bigdft_fcflags=""
  abi_dft_bigdft_ldflags=""
  abi_dft_bigdft_incs="${with_bigdft_incs}"
  abi_dft_bigdft_libs="${with_bigdft_libs}"

  dnl Prepare environment
  tmp_saved_FCFLAGS="${FCFLAGS}"
  tmp_saved_LIBS="${LIBS}"
  FCFLAGS="${FCFLAGS} ${abi_linalg_incs} ${abi_trio_netcdf_incs} ${abi_trio_etsf_io_incs} ${abi_dft_libxc_incs} ${abi_dft_bigdft_incs}"
  LIBS="${lib_libxc_libs} ${lib_etsf_io_libs} ${lib_netcdf_libs} ${lib_linalg_libs} ${LIBS}"
  if test "${with_bigdft_libs}" = ""; then
    AC_MSG_CHECKING([for BigDFT libraries to try])
    LIBS="${abi_dft_bigdft_default_libs} ${LIBS}"
    AC_MSG_RESULT([${abi_dft_bigdft_default_libs}])
  else
    LIBS="${abi_dft_bigdft_libs} ${LIBS}"
  fi

  dnl Look for includes
  ABI_FC_MOD_INCS([bigdft_api])
  FCFLAGS="${FCFLAGS} ${fc_mod_incs}"
  if test "${abi_fc_mod_incs_ok}" != "unknown"; then
    abi_dft_bigdft_has_incs="yes"
  fi

  dnl Look for libraries and routines
  AC_MSG_CHECKING([whether BigDFT libraries work])
  AC_LINK_IFELSE([AC_LANG_PROGRAM([],
    [[
      use bigdft_api
      implicit none
      integer iproc
      type(input_variables) :: inputs
      type(atoms_data) :: atoms
      type(restart_objects) :: rst
      call init_restart_objects(iproc,inputs,atoms,rst)
    ]])], [abi_dft_bigdft_has_libs="yes"], [abi_dft_bigdft_has_libs="no"])
  AC_MSG_RESULT([${abi_dft_bigdft_has_libs}])

  dnl Take final decision for the serial case
  if test "${abi_dft_bigdft_has_incs}" = "yes" -a \
          "${abi_dft_bigdft_has_libs}" = "yes"; then
    abi_dft_bigdft_serial="yes"
    if test "${with_bigdft_libs}" = ""; then
      abi_dft_bigdft_libs="${abi_dft_bigdft_default_libs}"
    fi
  fi

  dnl Check for MPI support
  if test "${enable_mpi}" = "yes"; then
    if test "${abi_dft_bigdft_serial}" = "yes"; then
      abi_dft_bigdft_mpi="yes"
    fi
  fi

  dnl Restore environment
  FCFLAGS="${tmp_saved_FCFLAGS}"
  LIBS="${tmp_saved_LIBS}"
])
m4trace:config/m4/conn-dft.m4:143: -1- AC_DEFUN([_ABI_DFT_CHECK_LIBXC], [
  dnl Init
  abi_dft_libxc_has_incs="no"
  abi_dft_libxc_has_libs="no"
  abi_dft_libxc_version="no"
  abi_dft_libxc_serial="no"
  abi_dft_libxc_mpi="no"
  abi_dft_libxc_fcflags=""
  abi_dft_libxc_ldflags=""
  abi_dft_libxc_incs="${with_libxc_incs}"
  abi_dft_libxc_libs="${with_libxc_libs}"

  dnl Prepare environment
  tmp_saved_CPPFLAGS="${CPPFLAGS}"
  tmp_saved_FCFLAGS="${FCFLAGS}"
  tmp_saved_LIBS="${LIBS}"
  CPPFLAGS="${CPPFLAGS} ${abi_dft_libxc_incs}"
  FCFLAGS="${FCFLAGS} ${abi_dft_libxc_incs}"

  dnl Look for C includes
  AC_LANG_PUSH([C])
  AC_CHECK_HEADERS([xc.h xc_funcs.h],[abi_dft_libxc_has_incs="yes"],[abi_dft_libxc_has_incs="no"])
  AC_LANG_POP([C])

  dnl Look for libraries and routines
  if test "${with_libxc_libs}" = ""; then
    AC_LANG_PUSH([C])
    AC_SEARCH_LIBS([xc_func_init],[xc dft_xc],[abi_dft_libxc_has_libs="yes"])
    if test "${abi_dft_libxc_has_libs}" = "yes"; then
      if test "${ac_cv_search_xc_func_init}" != "none required"; then
        abi_dft_libxc_libs="${ac_cv_search_xc_func_init}"
      fi
    fi
    AC_LANG_POP([C])
  fi
  LIBS="${abi_dft_libxc_libs} ${LIBS}"

  dnl Look for Fortran includes
  ABI_FC_MOD_INCS([xc_f90_lib_m])
  FCFLAGS="${FCFLAGS} ${fc_mod_incs}"
  if test "${abi_fc_mod_incs_ok}" = "unknown"; then
    abi_dft_libxc_has_incs="no"
  fi

  dnl Check whether the Fortran wrappers work
  if test "${abi_dft_libxc_has_incs}" = "yes"; then
    AC_MSG_CHECKING([whether LibXC has Fortran support])
    AC_LANG_PUSH([Fortran])
    AC_LINK_IFELSE([AC_LANG_PROGRAM([],
      [[
        use xc_f90_lib_m
        integer :: i
        type(xc_f90_pointer_t) :: info
        i = xc_f90_info_number(info)
      ]])], [abi_dft_libxc_has_libs="yes"], [abi_dft_libxc_has_libs="no"])
    AC_LANG_POP([Fortran])
    AC_MSG_RESULT([${abi_dft_libxc_has_libs}])
  fi

  dnl Check that we have the correct LibXC version
  if test "${abi_dft_libxc_has_incs}" = "yes" -a \
          "${abi_dft_libxc_has_libs}" = "yes"; then
    AC_MSG_CHECKING([whether this is LibXC version $1.$2->$3.$4])
    AC_LANG_PUSH([C])
    AC_RUN_IFELSE([AC_LANG_PROGRAM(
      [[#include "xc.h"]],
      [[int ver=100*XC_MAJOR_VERSION+XC_MINOR_VERSION;
        int ver_min=100*$1+$2,ver_max=100*$3+$4;
        if ( (ver<ver_min) || (ver>ver_max)) {return 1;}
      ]])], [abi_dft_libxc_version="yes"], [abi_dft_libxc_version="no"])
    AC_LANG_POP([C])
    AC_MSG_RESULT([${abi_dft_libxc_version}])
  fi

  dnl Take final decision for the serial case
  if test "${abi_dft_libxc_has_incs}" = "yes" -a \
          "${abi_dft_libxc_has_libs}" = "yes" -a \
          "${abi_dft_libxc_version}" = "yes"; then
    abi_dft_libxc_serial="yes"
  fi

  dnl Check for MPI support
  if test "${enable_mpi}" = "yes"; then
    if test "${abi_dft_libxc_serial}" = "yes"; then
      abi_dft_libxc_mpi="yes"
    fi
  fi

  dnl Restore environment
  CPPFLAGS="${tmp_saved_CPPFLAGS}"
  FCFLAGS="${tmp_saved_FCFLAGS}"
  LIBS="${tmp_saved_LIBS}"

  dnl Make sure LIBS are properly set for the other packages
  if test "${abi_dft_libxc_serial}" = "yes"; then
    FCFLAGS="${FCFLAGS} ${abi_dft_libxc_incs}"
    LIBS="${abi_dft_libxc_libs} ${LIBS}"
  fi
])
m4trace:config/m4/conn-dft.m4:250: -1- AC_DEFUN([_ABI_DFT_CHECK_WANNIER90], [
  dnl Init
  abi_dft_wannier90_has_bins="no"
  abi_dft_wannier90_has_incs="no"
  abi_dft_wannier90_has_libs="no"
  abi_dft_wannier90_serial="no"
  abi_dft_wannier90_mpi="no"
  abi_dft_wannier90_v1="no"
  abi_dft_wannier90_fcflags=""
  abi_dft_wannier90_ldflags=""
  abi_dft_wannier90_bins="${with_wannier90_bins}"
  abi_dft_wannier90_incs="${with_wannier90_incs}"
  abi_dft_wannier90_libs="${with_wannier90_libs}"

  dnl Prepare environment
  tmp_saved_LIBS="${LIBS}"
  LIBS="${abi_dft_wannier90_libs} ${lib_linalg_libs} ${LIBS}"

  dnl Look for binaries
  if test "${abi_dft_wannier90_bins}" = ""; then
    AC_CHECK_PROGS([WANNIER90_X_BIN],[wannier.x wannier90.x])
    if test "${WANNIER90_X_BIN}" != ""; then
      abi_dft_wannier90_has_bins="yes"
    fi
    AC_CHECK_PROGS([W90CHK2CHK_X_BIN],[w90chk2chk.x])
    if test "${W90CHK2CHK_X_BIN}" = ""; then
      abi_dft_wannier90_v1="yes"
    fi
  else
    AC_MSG_CHECKING([for wannier.x])
    WANNIER90_X_BIN="${abi_dft_wannier90_bins}/wannier.x"
    if test -x "${WANNIER90_X_BIN}"; then
      abi_dft_wannier90_has_bins="yes"
    fi
    AC_MSG_RESULT([${abi_dft_wannier90_has_bins}])
    if test "${abi_dft_wannier90_has_bins}" != "yes"; then
      AC_MSG_CHECKING([for wannier90.x])
      WANNIER90_X_BIN="${abi_dft_wannier90_bins}/wannier90.x"
      if test -x "${WANNIER90_X_BIN}"; then
        abi_dft_wannier90_has_bins="yes"
      fi
      AC_MSG_RESULT([${abi_dft_wannier90_has_bins}])
    fi
    AC_MSG_CHECKING([for wannier90 v1.x (absence of w90chk2chk.x)])
    W90CHK2CHK_X_BIN="${abi_dft_wannier90_bins}/w90chk2chk.x"
    if test ! -x "${W90CHK2CHK_X_BIN}"; then
      abi_dft_wannier90_v1="yes"
    fi
    AC_MSG_RESULT([${abi_dft_wannier90_v1}])
  fi

  dnl Look for libraries and routines
  if test "${abi_dft_wannier90_libs}" = ""; then
    AC_SEARCH_LIBS([wannier_run],[wannier wannier90],
      [abi_dft_wannier90_has_incs="yes"; abi_dft_wannier90_has_libs="yes"],
      [abi_dft_wannier90_has_libs="no"])
    if test "${abi_dft_wannier90_has_libs}" = "yes"; then
      if test "${ac_cv_search_wannier_run}" != "none required"; then
        abi_dft_wannier90_libs="${ac_cv_search_wannier_run}"
      fi
    fi
  else
    AC_MSG_CHECKING([whether the specified Wannier90 library works])
    AC_LINK_IFELSE([AC_LANG_PROGRAM([],
      [[
        call wannier_run
      ]])],
      [abi_dft_wannier90_has_incs="yes"; abi_dft_wannier90_has_libs="yes"],
      [abi_dft_wannier90_has_libs="no"])
    AC_MSG_RESULT([${abi_dft_wannier90_has_libs}])
  fi

  dnl Take final decision for the serial case
  if test "${abi_dft_wannier90_has_bins}" = "yes" -a \
          "${abi_dft_wannier90_has_incs}" = "yes" -a \
          "${abi_dft_wannier90_has_libs}" = "yes"; then
    abi_dft_wannier90_serial="yes"
  fi

  dnl Check for MPI support
  if test "${enable_mpi}" = "yes"; then
    if test "${abi_dft_wannier_serial}" = "yes"; then
      abi_dft_wannier_mpi="yes"
    fi
  fi

  dnl Restore environment
  LIBS="${tmp_saved_LIBS}"
])
m4trace:config/m4/conn-dft.m4:352: -1- AC_DEFUN([ABI_CONNECT_DFT], [
  dnl Initial setup
  abi_test_atompaw="no"
  abi_test_bigdft="no"
  abi_test_libxc="no"
  abi_test_wannier90="no"
  lib_dft_flavor="${with_dft_flavor}"
  tmp_dft_flavor=""

  dnl Prepare environment
  ABI_ENV_BACKUP
  abi_saved_LIBS="${LIBS}"
  LDFLAGS="${FC_LDFLAGS}"
  AC_LANG_PUSH([Fortran])

  dnl Display requested flavor
  AC_MSG_CHECKING([for the requested DFT support])
  AC_MSG_RESULT([${with_dft_flavor}])

  dnl Look for external DFT libraries
  if test "${with_dft_flavor}" != "none"; then

    dnl Make sure LibXC is looked for before the others
    abi_dft_iter=`echo "${lib_dft_flavor}" | tr '+' '\n' | sort -u | awk '{printf " %s",[$]1}'`
    abi_dft_tmp="${abi_dft_iter}"
    for abi_dft_flavor in ${abi_dft_iter}; do
      if test "${abi_dft_flavor}" = "libxc"; then
        abi_dft_tmp=`echo "${abi_dft_iter}" | sed -e 's/libxc//'`
        abi_dft_tmp="libxc ${abi_dft_tmp}"
      fi
      if test "${abi_dft_flavor}" = "libxc-fallback"; then
        abi_dft_tmp=`echo "${abi_dft_iter}" | sed -e 's/libxc-fallback//'`
        abi_dft_tmp="libxc-fallback ${abi_dft_tmp}"
      fi
    done
    abi_dft_iter="${abi_dft_tmp}"

    for abi_dft_flavor in ${abi_dft_iter}; do

      dnl Check if the user has requested a fallback
      tmp_dft_base_flavor=`echo "${abi_dft_flavor}" | cut -d- -f1`
      AC_MSG_CHECKING([whether to select a fallback for ${tmp_dft_base_flavor}])
      tmp_dft_fallback=`echo "${abi_dft_flavor}" | cut -s -d- -f2`
      if test "${tmp_dft_fallback}" = "fallback"; then
        tmp_dft_fallback="yes"
      else
        tmp_dft_fallback="no"
      fi
      AC_MSG_RESULT([${tmp_dft_fallback}])
      if test "${tmp_dft_fallback}" = "yes" -a \
              "${enable_fallbacks}" = "no"; then
        AC_MSG_ERROR([fallback requested while fallbacks have been globally disabled])
      fi

      dnl Look for DFT libraries
      case "${abi_dft_flavor}" in

        atompaw)
          if test "${abi_linalg_serial}" = "yes" -a \
                  "${abi_dft_libxc_serial}" = "yes"; then
            abi_dft_atompaw_prereqs="yes"
            _ABI_DFT_CHECK_ATOMPAW
          else
            if test "${abi_linalg_serial}" != "yes"; then
              AC_MSG_WARN([AtomPAW requires missing linear algebra support])
            fi
            if test "${abi_dft_libxc_serial}" != "yes"; then
              AC_MSG_WARN([AtomPAW requires missing LibXC support])
            fi
            if test \( "${abi_dft_libxc_serial}" = "no" -a \
                       "${abi_dft_libxc_fallback}" != "yes" \) -o \
                    \( "${abi_linalg_serial}" = "no" -a \
                       "${abi_dft_linalg_fallback}" != "yes" \); then
              abi_dft_atompaw_prereqs="no"
            fi
            abi_dft_atompaw_serial="no"
            abi_dft_atompaw_mpi="no"
          fi
          if test "${abi_dft_atompaw_serial}" = "yes" -o \
                  "${enable_fallbacks}" = "yes"; then
            AC_DEFINE([HAVE_ATOMPAW],1,
              [Define to 1 if you have the AtomPAW library.])
            abi_test_atompaw="yes"
          fi
          if test "${abi_dft_atompaw_serial}" = "yes"; then
            lib_atompaw_bins="${abi_dft_atompaw_bins}"
            lib_atompaw_incs="${abi_dft_atompaw_incs}"
            lib_atompaw_libs="${abi_dft_atompaw_libs}"
          fi
          ;;

        atompaw-fallback)
          if test "${abi_linalg_serial}" != "yes" -a \
                  "${abi_linalg_fallback}" != "yes"; then
            AC_MSG_WARN([AtomPAW requires missing linear algebra support])
            abi_dft_atompaw_prereqs="no"
            abi_dft_atompaw_serial="no"
            abi_dft_atompaw_mpi="no"
          fi
          if test "${abi_dft_libxc_serial}" != "yes" -a \
                  "${abi_dft_libxc_fallback}" != "yes"; then
            AC_MSG_WARN([AtomPAW requires missing LibXC support])
            abi_dft_atompaw_prereqs="no"
            abi_dft_atompaw_serial="no"
            abi_dft_atompaw_mpi="no"
          fi
          ;;

        bigdft)
          if test "${abi_dft_libxc_serial}" = "yes" -a \
                  "${abi_linalg_serial}" = "yes"; then
            abi_dft_bigdft_prereqs="yes"
            _ABI_DFT_CHECK_BIGDFT
          else
            if test "${abi_linalg_serial}" != "yes"; then
              AC_MSG_WARN([BigDFT requires missing linear algebra support])
            fi
            if test "${abi_dft_libxc_serial}" != "yes"; then
              AC_MSG_WARN([BigDFT requires missing LibXC support])
            fi
            if test \( "${abi_dft_libxc_serial}" = "no" -a \
                       "${abi_dft_libxc_fallback}" != "yes" \) -o \
                    \( "${abi_linalg_serial}" = "no" -a \
                       "${abi_dft_linalg_fallback}" != "yes" \); then
              abi_dft_bigdft_prereqs="no"
            fi
            abi_dft_bigdft_serial="no"
            abi_dft_bigdft_mpi="no"
          fi
          if test "${abi_dft_bigdft_serial}" = "yes" -o \
                  "${enable_fallbacks}" = "yes"; then
            AC_DEFINE([HAVE_BIGDFT],1,
              [Define to 1 if you have the BigDFT library.])
            abi_test_bigdft="yes"
          fi
          if test "${abi_dft_bigdft_serial}" = "yes"; then
            lib_bigdft_incs="${abi_dft_bigdft_incs}"
            lib_bigdft_libs="${abi_dft_bigdft_libs}"
          fi
          ;;

        bigdft-fallback)
          if test "${abi_linalg_serial}" != "yes" -a \
                  "${abi_linalg_fallback}" != "yes"; then
            AC_MSG_WARN([BigDFT requires missing linear algebra support])
            abi_dft_bigdft_prereqs="no"
            abi_dft_bigdft_serial="no"
            abi_dft_bigdft_mpi="no"
          fi
          if test "${abi_dft_libxc_serial}" != "yes" -a \
                  "${abi_dft_libxc_fallback}" != "yes"; then
            AC_MSG_WARN([BigDFT requires missing LibXC support])
            abi_dft_bigdft_prereqs="no"
            abi_dft_bigdft_serial="no"
            abi_dft_bigdft_mpi="no"
          fi
          ;;

        libxc)
          _ABI_DFT_CHECK_LIBXC(2,2,4,0)
          if test "${abi_dft_libxc_serial}" = "yes" -o \
                  "${enable_fallbacks}" = "yes"; then
            AC_DEFINE([HAVE_LIBXC],1,
              [Define to 1 if you have the LibXC library.])
            abi_test_libxc="yes"
          fi
          if test "${abi_dft_libxc_serial}" = "yes"; then
            lib_libxc_incs="${abi_dft_libxc_incs}"
            lib_libxc_libs="${abi_dft_libxc_libs}"
          elif test "${enable_fallbacks}" = "yes"; then
            abi_dft_libxc_fallback="yes"
          fi
          ;;

        wannier90)
          dnl Wannier90 requires linear algebra support
          if test "${abi_linalg_serial}" = "yes"; then
            abi_dft_wannier90_prereqs="yes"
            _ABI_DFT_CHECK_WANNIER90
          else
            AC_MSG_WARN([wannier90 requires missing linear algebra support])
            if test "${abi_dft_linalg_fallback}" != "yes"; then
              abi_dft_wannier90_prereqs="no"
            fi
            abi_dft_wannier90_serial="no"
            abi_dft_wannier90_mpi="no"
          fi
          if test "${abi_dft_wannier90_serial}" = "yes" -o \
                  "${enable_fallbacks}" = "yes"; then
            AC_DEFINE([HAVE_WANNIER90],1,
              [Define to 1 if you have the Wannier90 library.])
            abi_test_wannier90="yes"
          fi
          if test "${abi_dft_wannier90_serial}" = "yes"; then
            lib_wannier90_bins="${abi_dft_wannier90_bins}"
            lib_wannier90_incs="${abi_dft_wannier90_incs}"
            lib_wannier90_libs="${abi_dft_wannier90_libs}"
            if test "${abi_dft_wannier90_v1}" = "yes"; then
              AC_DEFINE([HAVE_WANNIER90_V1],1,
                [Define to 1 if you have the Wannier90 V1.x library.])
            fi
          fi
          ;;

        wannier90-fallback)
          if test "${abi_linalg_serial}" != "yes" -a \
                  "${abi_linalg_fallback}" != "yes"; then
            AC_MSG_WARN([Wannier90 requires missing linear algebra support])
            abi_dft_wannier90_prereqs="no"
            abi_dft_wannier90_serial="no"
            abi_dft_wannier90_mpi="no"
            AC_DEFINE([HAVE_WANNIER90_V1],0,
              [Define to 1 if you have the Wannier90 V1.x library.])
          fi
          ;;

        *)
          if test "${tmp_dft_fallback}" = "no"; then
            AC_MSG_ERROR([unknown DFT flavor '${abi_dft_flavor}'])
          fi
          ;;

      esac

      dnl Rebuild actual flavor
      if test "${tmp_dft_fallback}" = "yes"; then
        eval abi_dft_${tmp_dft_base_flavor}_fallback="yes"
        abi_fallbacks="${abi_fallbacks} ${tmp_dft_base_flavor}"
        tmp_dft_flavor="${tmp_dft_flavor}+${abi_dft_flavor}"
        tmp_dft_prereqs=`eval echo \$\{abi_dft_${tmp_dft_base_flavor}_prereqs\}`
        if test "${tmp_dft_prereqs}" = "no"; then
          ABI_MSG_NOTICE([connectors-failure],[Connector detection failure])
          AC_MSG_ERROR([prerequisites for ${abi_dft_flavor} not found])
        fi
      else
        tmp_dft_prereqs=`eval echo \$\{abi_dft_${abi_dft_flavor}_prereqs\}`
        tmp_dft_serial=`eval echo \$\{abi_dft_${abi_dft_flavor}_serial\}`
        tmp_dft_incs=`eval echo \$\{with_${abi_dft_flavor}_bins\}`
        tmp_dft_incs=`eval echo \$\{with_${abi_dft_flavor}_incs\}`
        tmp_dft_libs=`eval echo \$\{with_${abi_dft_flavor}_libs\}`
        AC_MSG_WARN([package: ${abi_dft_flavor} - preq=${tmp_dft_prereqs} - working=${tmp_dft_serial} - incs=${tmp_dft_incs} libs=${tmp_dft_libs}])
        if test "${tmp_dft_serial}" = "no"; then
          if test "${tmp_dft_bins}" = "" -a \
                  "${tmp_dft_incs}" = "" -a \
                  "${tmp_dft_libs}" = "" -a \
                  "${tmp_dft_prereqs}" != "no"; then
            AC_MSG_WARN([falling back to internal ${abi_dft_flavor} version])
            abi_fallbacks="${abi_fallbacks} ${abi_dft_flavor}"
            tmp_dft_flavor="${tmp_dft_flavor}+${abi_dft_flavor}-fallback"
          else
            ABI_MSG_NOTICE([connectors-failure],[Connector detection failure])
            AC_MSG_ERROR([external ${abi_dft_flavor} support does not work])
          fi
        else
          tmp_dft_flavor="${tmp_dft_flavor}+${abi_dft_flavor}"
        fi
      fi

    done

  fi

  dnl Restore build environment
  AC_LANG_POP([Fortran])
  LIBS="${abi_saved_LIBS}"
  ABI_ENV_RESTORE

  dnl Output final flavor
  if test "${tmp_dft_flavor}" != ""; then
    lib_dft_flavor=`echo "${tmp_dft_flavor}" | sed -e 's/^\+//;s/\+[$]//'`
  fi
  AC_MSG_CHECKING([for the actual DFT support])
  AC_MSG_RESULT([${lib_dft_flavor}])

  dnl Substitute variables needed for the use of the libraries
  AC_SUBST(lib_dft_flavor)
  AC_SUBST(lib_atompaw_bins)
  AC_SUBST(lib_atompaw_fcflags)
  AC_SUBST(lib_atompaw_incs)
  AC_SUBST(lib_atompaw_ldflags)
  AC_SUBST(lib_atompaw_libs)
  AC_SUBST(lib_bigdft_fcflags)
  AC_SUBST(lib_bigdft_incs)
  AC_SUBST(lib_bigdft_ldflags)
  AC_SUBST(lib_bigdft_libs)
  AC_SUBST(lib_libxc_fcflags)
  AC_SUBST(lib_libxc_incs)
  AC_SUBST(lib_libxc_ldflags)
  AC_SUBST(lib_libxc_libs)
  AC_SUBST(lib_wannier90_bins)
  AC_SUBST(lib_wannier90_fcflags)
  AC_SUBST(lib_wannier90_incs)
  AC_SUBST(lib_wannier90_ldflags)
  AC_SUBST(lib_wannier90_libs)
])
m4trace:config/m4/conn-fft.m4:21: -1- AC_DEFUN([_ABI_FFT_CHECK], [
  dnl Init
  abi_fft_has_incs="no"
  abi_fft_has_libs="no"
  abi_fft_serial="no"
  abi_fft_mpi="no"
  abi_fft_fcflags=""
  abi_fft_ldflags=""
  abi_fft_incs="${with_fft_incs}"
  abi_fft_libs="${with_fft_libs}"

  dnl FFT usually doesn't require any include (may change in the future)
  abi_fft_has_incs="yes"

  dnl Look for libraries and routines
  if test "${abi_fft_libs}" = ""; then
    AC_SEARCH_LIBS($2,$1,[abi_fft_has_libs="yes"])
    if test "${abi_fft_has_libs}" = "yes"; then
      tmp_fft_libs=`eval echo \$\{ac_cv_search_$2\}`
      if test "${tmp_fft_libs}" != "none required"; then
        abi_fft_libs="${tmp_fft_libs}"
      fi
    fi
  else
    tmp_saved_LIBS="${LIBS}"
    LIBS="${with_fft_libs} ${LIBS}"
    AC_LINK_IFELSE([AC_LANG_PROGRAM([],
      [
        call $2
      ])], [abi_fft_has_libs="yes"], [abi_fft_has_libs="no"])

    if test "${abi_fft_has_libs}" = "no"; then
    dnl Try the function version
    AC_LINK_IFELSE([AC_LANG_PROGRAM([],
      [
        integer :: xstatus
        xstatus = $2
      ])], [abi_fft_has_libs="yes"], [abi_fft_has_libs="no"])
    fi

    LIBS="${tmp_saved_LIBS}"
  fi

  dnl Take final decision for the serial case
  if test "${abi_fft_has_incs}" = "yes" -a \
          "${abi_fft_has_libs}" = "yes"; then
    abi_fft_serial="yes"
  fi

  dnl Check for MPI support
  if test "${enable_mpi}" = "yes" -a \
          "${abi_fft_serial}" = "yes"; then
    abi_fft_mpi="yes"
  fi
])
m4trace:config/m4/conn-fft.m4:84: -1- AC_DEFUN([ABI_CONNECT_FFT], [
  dnl Initial setup
  lib_fft_flavor="${with_fft_flavor}"
  lib_fft_fcflags=""
  lib_fft_ldflags=""
  lib_fft_incs=""
  lib_fft_libs=""
  abi_fft_serial="no"
  abi_fft_mpi="no"

  dnl Prepare environment
  ABI_ENV_BACKUP
  abi_saved_LIBS="${LIBS}"
  CPPFLAGS="${with_fft_incs} ${CPPFLAGS}"
  LDFLAGS="${FC_LDFLAGS}"
  LIBS="${with_fft_libs} ${LIBS}"
  AC_LANG_PUSH([Fortran])

  dnl Display requested flavor
  AC_MSG_CHECKING([for the requested FFT support])
  AC_MSG_RESULT([${with_fft_flavor}])

  dnl Look for external FFT libraries
  if test "${with_fft_flavor}" != "none"; then

    case "${with_fft_flavor}" in

      asl)
        _ABI_FFT_CHECK([asl],[zfc3fb])
        if test "${abi_fft_serial}" = "yes"; then
          AC_DEFINE([HAVE_FFT_ASL],1,[Define to 1 if you want to use the ASL library for FFT.])
          lib_fft_fcflags="${abi_fft_fcflags}"
          lib_fft_ldflags="${abi_fft_ldflags}"
          lib_fft_incs="${abi_fft_incs}"
          lib_fft_libs="${abi_fft_libs}"
        fi
        ;;

      custom)
        if test "${with_fft_libs}" == ""; then
          AC_MSG_ERROR([you must specify custom FFT libraries (--with-fft-libs)])
        fi
        abi_fft_serial="yes"
        abi_fft_mpi="yes"
        lib_fft_incs="${with_fft_incs}"
        lib_fft_libs="${with_fft_libs}"
        ;;

      fftw2)
        _ABI_FFT_CHECK([fftw2],[fftw_execute])
        if test "${abi_fft_serial}" = "yes"; then
          AC_DEFINE([HAVE_FFT_FFTW2],1,[Define to 1 if you want to use the FFTW2 library.])
          lib_fft_fcflags="${abi_fft_fcflags}"
          lib_fft_ldflags="${abi_fft_ldflags}"
          lib_fft_incs="${abi_fft_incs}"
          lib_fft_libs="${abi_fft_libs}"
        fi
        ;;

      fftw2-threads)
        _ABI_FFT_CHECK([fftw2],[fftw_init_threads])
        if test "${abi_fft_serial}" = "yes"; then
          AC_DEFINE([HAVE_FFT_FFTW2_THREADS],1,[Define to 1 if you want to use the threaded FFTW2 library.])
          lib_fft_fcflags="${abi_fft_fcflags}"
          lib_fft_ldflags="${abi_fft_ldflags}"
          lib_fft_incs="${abi_fft_incs}"
          lib_fft_libs="${abi_fft_libs}"
        fi
        ;;

      fftw3)
        _ABI_FFT_CHECK([fftw3],[dfftw_execute])
        if test "${abi_fft_serial}" = "yes"; then
          AC_DEFINE([HAVE_FFT_FFTW3],1,[Define to 1 if you want to use the FFTW3 library.])
          lib_fft_fcflags="${abi_fft_fcflags}"
          lib_fft_ldflags="${abi_fft_ldflags}"
          lib_fft_incs="${abi_fft_incs}"
          lib_fft_libs="${abi_fft_libs}"
        fi
        ;;

      fftw3-mkl)
        _ABI_FFT_CHECK([fftw3],[dfftw_execute])
        if test "${abi_fft_serial}" = "yes"; then
          AC_DEFINE([HAVE_FFT_FFTW3_MKL],1,[Define to 1 if you want to use the threaded FFTW3 library.])
          lib_fft_fcflags="${abi_fft_fcflags}"
          lib_fft_ldflags="${abi_fft_ldflags}"
          lib_fft_incs="${abi_fft_incs}"
          lib_fft_libs="${abi_fft_libs}"
        fi
        ;;

      fftw3-threads)
        _ABI_FFT_CHECK([fftw3],[dfftw_execute])	
        _ABI_FFT_CHECK([fftw3_threads],[dfftw_init_threads])
        if test "${abi_fft_serial}" = "yes"; then
          AC_DEFINE([HAVE_FFT_FFTW3],1,[Define to 1 if you want to use the FFTW3 library.])
          AC_DEFINE([HAVE_FFT_FFTW3_THREADS],1,[Define to 1 if you want to use the threaded FFTW3 library.])
          lib_fft_fcflags="${abi_fft_fcflags}"
          lib_fft_ldflags="${abi_fft_ldflags}"
          lib_fft_incs="${abi_fft_incs}"
          lib_fft_libs="${abi_fft_libs}"
        fi
        ;;

      fftw3-mpi)
	_ABI_FFT_CHECK([fftw3],[dfftw_execute])	
        _ABI_FFT_CHECK([fftw3_threads],[dfftw_init_threads])
        #_ABI_FFT_CHECK([fftw3_mpi],[fftw_mpi_init])
        if test "${abi_fft_serial}" = "yes"; then
          AC_DEFINE([HAVE_FFT_FFTW3],1,[Define to 1 if you want to use the FFTW3 library.])
          AC_DEFINE([HAVE_FFT_FFTW3_THREADS],1,[Define to 1 if you want to use the threaded FFTW3 library.])	
          AC_DEFINE([HAVE_FFT_FFTW3_MPI],1,[Define to 1 if you want to use the distributed FFTW3 library.])	
          lib_fft_fcflags="${abi_fft_fcflags}"
          lib_fft_ldflags="${abi_fft_ldflags}"
          lib_fft_incs="${abi_fft_incs}"
          lib_fft_libs="${abi_fft_libs}"
        fi
        ;;

      dfti)
        _ABI_FFT_CHECK([dfti],[DftiCreateDescriptor])
        if test "${abi_fft_serial}" = "yes"; then
          AC_DEFINE([HAVE_FFT_DFTI],1,[Define to 1 if you want to use the DFTI library.])
          lib_fft_fcflags="${abi_fft_fcflags}"
          lib_fft_ldflags="${abi_fft_ldflags}"
          lib_fft_incs="${abi_fft_incs}"
          lib_fft_libs="${abi_fft_libs}"
        fi
        ;;

      dfti-threads)
        _ABI_FFT_CHECK([dfti],[DftiCreateDescriptor])
        if test "${abi_fft_serial}" = "yes"; then
          AC_DEFINE([HAVE_FFT_DFTI],1,[Define to 1 if you want to use the DFTI library.])
          AC_DEFINE([HAVE_FFT_DFTI_THREADS],1,[Define to 1 if you want to use the threaded DFTI library.])
          lib_fft_fcflags="${abi_fft_fcflags}"
          lib_fft_ldflags="${abi_fft_ldflags}"
          lib_fft_incs="${abi_fft_incs}"
          lib_fft_libs="${abi_fft_libs}"
        fi
        ;;

      #dfti-mpi)
      #  _ABI_FFT_CHECK([dfti_mpi],[fftw_mpi_init])
      #  if test "${abi_fft_serial}" = "yes"; then
      #    AC_DEFINE([HAVE_FFT_DFTI],1,[Define to 1 if you want to use the DFTI library.])
      #    AC_DEFINE([HAVE_FFT_DFTI_MPI],1,[Define to 1 if you want to use the distributed DFTI library.])	
      #    lib_fft_fcflags="${abi_fft_fcflags}"
      #    lib_fft_ldflags="${abi_fft_ldflags}"
      #    lib_fft_incs="${abi_fft_incs}"
      #    lib_fft_libs="${abi_fft_libs}"
      #  fi
      #  ;;

      #dfti-mpi-threads)
      #  _ABI_FFT_CHECK([dfti],[DftiCreateDescriptor])
      #  #_ABI_FFT_CHECK([dfti_mpi],[fftw_mpi_init])
      #  #_ABI_FFT_CHECK([dfti_threads],[dfftw_init_threads])
      #  if test "${abi_fft_serial}" = "yes"; then
      #    AC_DEFINE([HAVE_FFT_DFTI],1,[Define to 1 if you want to use the DFTI library.])
      #    AC_DEFINE([HAVE_FFT_DFTI_MPI],1,[Define to 1 if you want to use the distributed DFTI library.])	
      #    AC_DEFINE([HAVE_FFT_DFTI_THREADS],1,[Define to 1 if you want to use the threaded DFTI library.])	
      #    lib_fft_fcflags="${abi_fft_fcflags}"
      #    lib_fft_ldflags="${abi_fft_ldflags}"
      #    lib_fft_incs="${abi_fft_incs}"
      #    lib_fft_libs="${abi_fft_libs}"
      #  fi
      #  ;;

      mlib)
        _ABI_FFT_CHECK([veclib],[c1dfft])
        if test "${abi_fft_serial}" = "yes"; then
          AC_DEFINE([HAVE_FFT_MLIB],1,[Define to 1 if you want to use the HP MLIB library for FFT.])
          lib_fft_fcflags="${abi_fft_fcflags}"
          lib_fft_ldflags="${abi_fft_ldflags}"
          lib_fft_incs="${abi_fft_incs}"
          lib_fft_libs="${abi_fft_libs}"
        fi
        ;;

      sgimath)
        _ABI_FFT_CHECK([complib.sgimath],[dfft1du])
        if test "${abi_fft_serial}" = "yes"; then
          AC_DEFINE([HAVE_FFT_SGIMATH],1,[Define to 1 if you want to use the SGIMATH library for FFT.])
          lib_fft_fcflags="${abi_fft_fcflags}"
          lib_fft_ldflags="${abi_fft_ldflags}"
          lib_fft_incs="${abi_fft_incs}"
          lib_fft_libs="${abi_fft_libs}"
        fi
        ;;

      *)
        AC_MSG_ERROR([unknown FFT flavor '${with_fft_flavor}'])
        ;;


    esac

  fi

  dnl Transmit serial status to the source code
  if test "${abi_fft_serial}" = "yes"; then
    AC_DEFINE([HAVE_FFT],1,[Define to 1 if you have an optimized FFT library.])
    AC_DEFINE([HAVE_FFT_SERIAL],1,[Define to 1 if you have an optimized serial FFT library.])
  elif test "${with_fft_flavor}" != "none"; then
    lib_fft_flavor="broken"
  fi

  dnl Transmit MPI status to the source code
  if test "${abi_fft_mpi}" = "yes"; then
    AC_DEFINE([HAVE_FFT_MPI],1,[Define to 1 if you have an optimized MPI-parallel FFT library.])
  fi

  dnl Restore build environment
  AC_LANG_POP([Fortran])
  LIBS="${abi_saved_LIBS}"
  ABI_ENV_RESTORE

  dnl Output final flavor
  AC_MSG_CHECKING([for the actual FFT support])
  AC_MSG_RESULT([${lib_fft_flavor}])
  if test "${lib_fft_flavor}" = "broken"; then
    ABI_MSG_NOTICE([connectors-failure],[Connector detection failure])
    if test "${with_fft_libs}" = ""; then
      AC_MSG_ERROR([the requested ${with_fft_flavor} FFT flavor is not available])
    else
      AC_MSG_ERROR([the specified FFT libraries do not work])
    fi
  fi

  dnl Substitute variables needed for the use of the library
  AC_SUBST(lib_fft_flavor)
  AC_SUBST(lib_fft_fcflags)
  AC_SUBST(lib_fft_ldflags)
  AC_SUBST(lib_fft_incs)
  AC_SUBST(lib_fft_libs)
])
m4trace:config/m4/conn-linalg.m4:21: -1- AC_DEFUN([_ABI_LINALG_CHECK_LIBS], [
  dnl Init
  abi_linalg_has_blas="no"
  abi_linalg_has_lapack="no"
  abi_linalg_has_lapacke="no"
  abi_linalg_has_blacs="no"
  abi_linalg_has_scalapack="no"
  abi_linalg_has_elpa="no"
  abi_linalg_has_plasma="no"
  abi_linalg_has_magma="no"

  dnl Prepare environment
  tmp_saved_LIBS="${LIBS}"
  tmp_saved_FCFLAGS="${FCFLAGS}"
  LIBS="${LIBS} ${lib_gpu_libs} ${lib_mpi_libs}"
  FCFLAGS="${FCFLAGS} ${with_linalg_incs}"

  dnl BLAS?
  AC_MSG_CHECKING([for BLAS support in specified libraries])
  AC_LINK_IFELSE([AC_LANG_PROGRAM([],
    [
      call zgemm
    ])], [abi_linalg_has_blas="yes"], [abi_linalg_has_blas="no"])
  AC_MSG_RESULT([${abi_linalg_has_blas}])

  dnl BLAS extension?
  _ABI_LINALG_CHECK_BLAS_EXTS()

  dnl MKL BLAS extensions?
  _ABI_LINALG_CHECK_BLAS_MKL_EXTS()

  dnl LAPACK?
  AC_MSG_CHECKING([for LAPACK support in specified libraries])
  AC_LINK_IFELSE([AC_LANG_PROGRAM([],
    [
      call zhpev
    ])], [abi_linalg_has_lapack="yes"], [abi_linalg_has_lapack="no"])
  AC_MSG_RESULT([${abi_linalg_has_lapack}])

  dnl LAPACKE?
  AC_MSG_CHECKING([for LAPACKE C API support in specified libraries])
  AC_LANG_PUSH([C])
  AC_LINK_IFELSE([AC_LANG_PROGRAM([
     #include <lapacke.h>],[zhpev_;
     ])],[abi_linalg_has_lapacke="yes"], [abi_linalg_has_lapacke="no"])
  AC_LANG_POP([C])
  AC_MSG_RESULT([${abi_linalg_has_lapacke}])

  dnl BLACS?
  AC_MSG_CHECKING([for BLACS support in specified libraries])
  AC_LINK_IFELSE([AC_LANG_PROGRAM([],
    [
      call blacs_gridinit
    ])], [abi_linalg_has_blacs="yes"], [abi_linalg_has_blacs="no"])
  AC_MSG_RESULT([${abi_linalg_has_blacs}])

  dnl ScaLAPACK?
  AC_MSG_CHECKING([for ScaLAPACK support in specified libraries])
  AC_LINK_IFELSE([AC_LANG_PROGRAM([],
    [
      call pzheevx
    ])], [abi_linalg_has_scalapack="yes"], [abi_linalg_has_scalapack="no"])
  AC_MSG_RESULT([${abi_linalg_has_scalapack}])

  dnl ELPA?
  abi_linalg_has_elpa="${abi_linalg_has_scalapack}"
  if test "${abi_linalg_has_elpa}" = "yes"; then
    AC_MSG_CHECKING([for ELPA support in specified libraries])
    _ABI_LINALG_TEST_ELPA()
    AC_MSG_RESULT([${abi_linalg_has_elpa}])
    if test "${abi_linalg_has_elpa}" = "yes"; then
      _ABI_LINALG_FIND_ELPA_VERSION()
    fi
  fi

  dnl PLASMA?
  AC_MSG_CHECKING([for PLASMA support in specified libraries])
  abi_linalg_has_plasma="${abi_linalg_has_lapacke}"
  if test "${abi_linalg_has_plasma}" = "yes"; then
    AC_COMPILE_IFELSE([AC_LANG_PROGRAM([],
      [
        use plasma
      ])], [abi_linalg_has_plasma="yes"], [abi_linalg_has_plasma="no"])
    if test "${abi_linalg_has_plasma}" = "yes"; then
      AC_LINK_IFELSE([AC_LANG_PROGRAM([],
        [
          call plasma_zhegv
        ])], [abi_linalg_has_plasma="yes"], [abi_linalg_has_plasma="no"])
    fi
  fi
  AC_MSG_RESULT([${abi_linalg_has_plasma}])

  dnl MAGMA?
  AC_MSG_CHECKING([for MAGMA (version>=1.1.0) support in specified libraries])
  AC_LINK_IFELSE([AC_LANG_PROGRAM([],
    [
      call magmaf_zhegvd
    ])], [abi_linalg_has_magma="yes"], [abi_linalg_has_magma="no"])
  AC_MSG_RESULT([${abi_linalg_has_magma}])
  if test "${abi_linalg_has_magma}" = "yes"; then
    _ABI_LINALG_CHECK_MAGMA_15()
  fi

  dnl Restore environment
  LIBS="${tmp_saved_LIBS}"
  FCFLAGS="${tmp_saved_FCFLAGS}"
])
m4trace:config/m4/conn-linalg.m4:135: -1- AC_DEFUN([_ABI_LINALG_SEARCH_BLAS], [
  dnl Init
  abi_linalg_has_blas="no"

  dnl Look for libraries and routines
  AC_SEARCH_LIBS([zgemm],$1,
    [abi_linalg_has_blas="yes"],[abi_linalg_has_blas="no"],
    [$2 ${abi_linalg_libs}])
  if test "${abi_linalg_has_blas}" = "yes"; then
    if test "${ac_cv_search_zgemm}" != "none required"; then
      abi_linalg_libs="${ac_cv_search_zgemm} $2 ${abi_linalg_libs}"
    fi
  fi
])
m4trace:config/m4/conn-linalg.m4:157: -1- AC_DEFUN([_ABI_LINALG_CHECK_BLAS_EXTS], [

  dnl AXPBY family?
  AC_MSG_CHECKING([for AXPBY support in specified BLAS libraries])
  AC_LINK_IFELSE([AC_LANG_PROGRAM([],
    [
      call saxpby
      call daxpby
      call caxpby
      call zaxpby
    ])], [abi_linalg_has_axpby="yes"], [abi_linalg_has_axpby="no"])
  AC_MSG_RESULT([${abi_linalg_has_axpby}])

  if test "${abi_linalg_has_axpby}" = "yes"; then
    AC_DEFINE([HAVE_LINALG_AXPBY],1,[Define to 1 if you have an AXPBY BLAS1 extensions.])
  fi

  dnl gemm3m family
  AC_MSG_CHECKING([for gemm3m in specified libraries])
  AC_LINK_IFELSE([AC_LANG_PROGRAM([],
    [
     call cgemm3m
     call zgemm3m
    ])], [abi_linalg_has_gemm3m="yes"], [abi_linalg_has_gemm3m="no"])
  AC_MSG_RESULT([${abi_linalg_has_gemm3m}])

  if test "${abi_linalg_has_gemm3m}" = "yes"; then
    AC_DEFINE([HAVE_LINALG_GEMM3M],1,[Define to 1 if you have ?GEMM3M BLAS3 extensions.])
  fi


])
m4trace:config/m4/conn-linalg.m4:196: -1- AC_DEFUN([_ABI_LINALG_CHECK_BLAS_MKL_EXTS], [

  dnl mkl_imatcopy family
  AC_MSG_CHECKING([for mkl_imatcopy in specified libraries])
  AC_LINK_IFELSE([AC_LANG_PROGRAM([],
    [
      call mkl_simatcopy
      call mkl_dimatcopy
      call mkl_cimatcopy
      call mkl_zimatcopy
    ])], [abi_linalg_mkl_has_imatcopy="yes"], [abi_linalg_mkl_has_imatcopy="no"])
  AC_MSG_RESULT([${abi_linalg_mkl_has_imatcopy}])

  if test "${abi_linalg_mkl_has_imatcopy}" = "yes"; then
    AC_DEFINE([HAVE_LINALG_MKL_IMATCOPY],1,[Define to 1 if you have mkl_?imatcopy extensions.])
  fi

  dnl mkl_omatcopy family
  AC_MSG_CHECKING([for mkl_omatcopy in specified libraries])
  AC_LINK_IFELSE([AC_LANG_PROGRAM([],
    [
      call mkl_somatcopy
      call mkl_domatcopy
      call mkl_comatcopy
      call mkl_zomatcopy
    ])], [abi_linalg_mkl_has_omatcopy="yes"], [abi_linalg_mkl_has_omatcopy="no"])
  AC_MSG_RESULT([${abi_linalg_mkl_has_omatcopy}])

  if test "${abi_linalg_mkl_has_omatcopy}" = "yes"; then
    AC_DEFINE([HAVE_LINALG_MKL_OMATCOPY],1,[Define to 1 if you have mkl_?omatcopy extensions.])
  fi

  dnl mkl_omatadd family
  AC_MSG_CHECKING([for mkl_omatadd in specified libraries])
  AC_LINK_IFELSE([AC_LANG_PROGRAM([],
    [
      call mkl_somatadd
      call mkl_comatadd
      call mkl_domatadd
      call mkl_zomatadd
    ])], [abi_linalg_mkl_has_omatadd="yes"], [abi_linalg_mkl_has_omatadd="no"])
  AC_MSG_RESULT([${abi_linalg_mkl_has_omatadd}])

  if test "${abi_linalg_mkl_has_omatadd}" = "yes"; then
    AC_DEFINE([HAVE_LINALG_MKL_OMATADD],1,[Define to 1 if you have mkl_?omatadd extensions.])
  fi

  dnl mkl_threads support functions
  AC_MSG_CHECKING([for mkl_set/get_threads in specified libraries])
  AC_LINK_IFELSE([AC_LANG_PROGRAM([],
    [
      integer :: a
      a = mkl_get_max_threads()
      call mkl_set_num_threads
    ])], [abi_linalg_mkl_has_threads="yes"], [abi_linalg_mkl_has_threads="no"])
  AC_MSG_RESULT([${abi_linalg_mkl_has_threads}])

  if test "${abi_linalg_mkl_has_threads}" = "yes"; then
    AC_DEFINE([HAVE_LINALG_MKL_THREADS],1,[Define to 1 if you have mkl_*threads extensions.])
  fi

])
m4trace:config/m4/conn-linalg.m4:265: -1- AC_DEFUN([_ABI_LINALG_SEARCH_LAPACK], [
  dnl Init
  abi_linalg_has_lapack="no"

  dnl Look for libraries and routines
  AC_SEARCH_LIBS([zhpev],$1,
    [abi_linalg_has_lapack="yes"],[abi_linalg_has_lapack="no"],
    [$2 ${abi_linalg_libs}])
  if test "${abi_linalg_has_lapack}" = "yes"; then
    if test "${ac_cv_search_zhpev}" != "none required"; then
      abi_linalg_libs="${ac_cv_search_zhpev} $2 ${abi_linalg_libs}"
    fi
  fi
])
m4trace:config/m4/conn-linalg.m4:286: -1- AC_DEFUN([_ABI_LINALG_SEARCH_LAPACKE], [
  dnl Init
  abi_linalg_has_lapacke="no"

  dnl Look for libraries and routines
  dnl Has to rewrite AC_SEARCH_LIBS because of mandatory C header
  AC_MSG_CHECKING([for library containing zhpev_ C API])
  AC_LANG_PUSH([C])
  AC_LINK_IFELSE([AC_LANG_PROGRAM([#include <lapacke.h>],[zhpev_;])],
                 [abi_linalg_has_lapacke="yes"], [])
  if test "${abi_linalg_has_lapacke}" = "no"; then
    tmp_saved_LIBS="${LIBS}"
    for test_lib in $1; do
      LIBS="-l${test_lib} $2 ${tmp_saved_LIBS}"
      AC_LINK_IFELSE([AC_LANG_PROGRAM([#include <lapacke.h>],[zhpev_;])],
                     [abi_linalg_has_lapacke="yes"], [])
      if test "${abi_linalg_has_lapacke}" = "yes"; then
        abi_linalg_libs="-l${test_lib} $2 ${abi_linalg_libs}"
        break
      fi
    done
    if test "${abi_linalg_has_lapacke}" = "no"; then
      LIBS="${tmp_saved_LIBS}"
    fi
  fi
  AC_LANG_POP([C])
  AC_MSG_RESULT([${abi_linalg_has_lapacke}])
])
m4trace:config/m4/conn-linalg.m4:321: -1- AC_DEFUN([_ABI_LINALG_SEARCH_BLACS], [
  dnl Init
  abi_linalg_has_blacs="no"

  dnl Look for libraries and routines
  AC_SEARCH_LIBS([blacs_gridinit],$1,
    [abi_linalg_has_blacs="yes"],[abi_linalg_has_blacs="no"],
    [$2 ${abi_linalg_libs}])
  if test "${abi_linalg_has_blacs}" = "yes"; then
    if test "${ac_cv_search_blacs_gridinit}" != "none required"; then
      abi_linalg_libs="${ac_cv_search_blacs_gridinit} $2 ${abi_linalg_libs}"
    fi
  fi
])
m4trace:config/m4/conn-linalg.m4:342: -1- AC_DEFUN([_ABI_LINALG_SEARCH_SCALAPACK], [
  dnl Init
  abi_linalg_has_scalapack="no"

  dnl Look for libraries and routines
  AC_SEARCH_LIBS([pzheevx],$1,
    [abi_linalg_has_scalapack="yes"],[abi_linalg_has_scalapack="no"],
    [$2 ${abi_linalg_libs}])
  if test "${abi_linalg_has_scalapack}" = "yes"; then
    if test "${ac_cv_search_pzheevx}" != "none required"; then
      abi_linalg_libs="${ac_cv_search_pzheevx} $2 ${abi_linalg_libs}"
    fi
  fi
])
m4trace:config/m4/conn-linalg.m4:363: -1- AC_DEFUN([_ABI_LINALG_SEARCH_ELPA], [
  dnl Init
  abi_linalg_has_elpa="no"

  dnl Look for libraries and routines
  dnl Has to rewrite AC_SEARCH_LIBS because of mandatory F90 module
  AC_MSG_CHECKING([for ELPA library])
  _ABI_LINALG_TEST_ELPA()
  if test "${abi_linalg_has_elpa}" = "no"; then
    tmp_saved_LIBS="${LIBS}"
    for test_lib in $1; do
      LIBS="-l${test_lib} $2 ${tmp_saved_LIBS}"
      _ABI_LINALG_TEST_ELPA()
      if test "${abi_linalg_has_elpa}" = "yes"; then
        abi_linalg_libs="-l${test_lib} $2 ${abi_linalg_libs}"
        break
      fi
    done
    if test "${abi_linalg_has_elpa}" = "no"; then
      LIBS="${tmp_saved_LIBS}"
    fi
  fi

  AC_MSG_RESULT([${abi_linalg_has_elpa}])

  if test "${abi_linalg_has_elpa}" = "yes"; then
    _ABI_LINALG_FIND_ELPA_VERSION()
  fi
])
m4trace:config/m4/conn-linalg.m4:399: -1- AC_DEFUN([_ABI_LINALG_FIND_ELPA_VERSION], [

  abi_linalg_elpa_version="none"
  AC_MSG_CHECKING([for ELPA library version])

# Check for ELPA 2017
  AC_COMPILE_IFELSE([AC_LANG_PROGRAM([],
    [
    use elpa
    class(elpa_t),pointer :: e
    integer,parameter :: na=1,ncol=1,nrow=1 ; integer :: err
    real*8 :: a(ncol,nrow),ev(na),q(ncol,nrow)
    call e%eigenvectors(a,ev,q,err)
    call e%cholesky(a,err)
    ])], [abi_linalg_has_elpa_2017="yes"], [abi_linalg_has_elpa_2017="no"])
  if test "${abi_linalg_has_elpa_2017}" = "yes"; then
    abi_linalg_elpa_version="2017"
    AC_DEFINE([HAVE_LINALG_ELPA_2017],1,[Define to 1 if you have ELPA 2017 API support])
    AC_DEFINE([HAVE_ELPA_FORTRAN2008],1,[Define to 1 if you have ELPA Fortran 2008 API support])
  else

# Check for ELPA 2016
   AC_LINK_IFELSE([AC_LANG_PROGRAM([],
     [
     use elpa1
     logical :: success1,debug
     integer,parameter :: na=1,lda=1,ldq=1,mcol=1,nev=1,nblk=1,nrow=1
     integer :: comm_g=1,comm_r=1,comm_c=1,success2
     real*8 :: a(lda,nrow),ev(na),q(ldq,nrow)
     complex*16 :: ac(lda,nrow)
     success1=elpa_solve_evp_real_1stage(na,nev,a,lda,ev,q,ldq,nblk,mcol,comm_r,comm_c)
     success1=elpa_cholesky_complex(na,ac,lda,nblk,nrow,comm_r,comm_c,debug)
     success2=elpa_get_communicators(comm_g,na,na,comm_r,comm_c)
     ])], [abi_linalg_has_elpa_2016="yes"], [abi_linalg_has_elpa_2016="no"])
   if test "${abi_linalg_has_elpa_2016}" = "yes"; then
     abi_linalg_elpa_version="2016"
     AC_DEFINE([HAVE_LINALG_ELPA_2016],1,[Define to 1 if you have ELPA 2016 API support])
   else

# Check for ELPA 2015
    AC_LINK_IFELSE([AC_LANG_PROGRAM([],
      [
      use elpa1
      logical :: success1,debug
      integer,parameter :: na=1,lda=1,ldq=1,nev=1,nblk=1
      integer :: comm_g=1,comm_r=1,comm_c=1,success2
      real*8 :: a(lda,na),ev(na),q(ldq,na)
      complex*16 :: ac(lda,na)
      success1=solve_evp_real(na,nev,a,lda,ev,q,ldq,nblk,comm_r,comm_c)
      call cholesky_complex(na,ac,lda,nblk,comm_r,comm_c,debug,success1)
      success2=get_elpa_row_col_comms(comm_g,na,na,comm_r,comm_c)
      ])], [abi_linalg_has_elpa_2015="yes"], [abi_linalg_has_elpa_2015="no"])
    if test "${abi_linalg_has_elpa_2015}" = "yes"; then
      abi_linalg_elpa_version="2015"
       AC_DEFINE([HAVE_LINALG_ELPA_2015],1,[Define to 1 if you have ELPA 2015 API support])
    else

# Check for ELPA 2014
     AC_LINK_IFELSE([AC_LANG_PROGRAM([],
       [
       use elpa1
       logical :: success
       integer,parameter :: na=1,lda=1,ldq=1,nev=1,nblk=1,comm_r=1,comm_c=1
       real*8 :: a(lda,na),ev(na),q(ldq,na)
       complex*16 :: ac(lda,na)
       success=solve_evp_real(na,nev,a,lda,ev,q,ldq,nblk,comm_r,comm_c)
       call invert_trm_complex(na,ac,lda,nblk,comm_r,comm_c,success)
       ])], [abi_linalg_has_elpa_2014="yes"], [abi_linalg_has_elpa_2014="no"])
     if test "${abi_linalg_has_elpa_2014}" = "yes"; then
       abi_linalg_elpa_version="2014"
       AC_DEFINE([HAVE_LINALG_ELPA_2014],1,[Define to 1 if you have ELPA 2014 API support])
     else

# Check for ELPA 2011-2013
      AC_LINK_IFELSE([AC_LANG_PROGRAM([],
        [
        use elpa1
        integer,parameter :: na=1,lda=1,ldq=1,nev=1,nblk=1,comm_r=1,comm_c=1
        real*8 :: a(lda,na),ev(na),q(ldq,na)
        complex*16 :: ac(lda,na)
        call solve_evp_real(na,nev,a,lda,ev,q,ldq,nblk,comm_r,comm_c)
        call invert_trm_complex(na,ac,lda,nblk,comm_r,comm_c)
        ])], [abi_linalg_has_elpa_2013="yes"], [abi_linalg_has_elpa_2013="no"])
      if test "${abi_linalg_has_elpa_2013}" = "yes"; then
        abi_linalg_elpa_version="2011-13"
        AC_DEFINE([HAVE_LINALG_ELPA_2013],1,[Define to 1 if you have ELPA 2013 API support])
      fi
     fi
    fi
   fi
  fi

  AC_MSG_RESULT([${abi_linalg_elpa_version}])
  if test "${abi_linalg_elpa_version}" = "none"; then
    AC_MSG_ERROR([ELPA version was not recognized!])
  fi
])
m4trace:config/m4/conn-linalg.m4:504: -1- AC_DEFUN([_ABI_LINALG_TEST_ELPA], [
  dnl Init
  abi_linalg_has_elpa="no"

# Check ELPA v2017+
  AC_COMPILE_IFELSE([AC_LANG_PROGRAM([],[use elpa])],
    [abi_linalg_has_elpa="yes"], [abi_linalg_has_elpa="no"])
  if test "${abi_linalg_has_elpa}" = "yes"; then
    AC_LINK_IFELSE([AC_LANG_PROGRAM([],
      [use elpa
       integer :: nrows=1,err
       class(elpa_t),pointer :: e
       call e%set("local_nrows",nrows,err)
      ])], [abi_linalg_has_elpa="yes"], [abi_linalg_has_elpa="no"])
  fi

# Check ELPA v2017-
  if test "${abi_linalg_has_elpa}" = "no"; then
    AC_COMPILE_IFELSE([AC_LANG_PROGRAM([],[use elpa1])],
      [abi_linalg_has_elpa="yes"], [abi_linalg_has_elpa="no"])
    if test "${abi_linalg_has_elpa}" = "yes"; then
      AC_LINK_IFELSE([AC_LANG_PROGRAM([],
        [use elpa1
         integer,parameter :: n=1,comm=1 ; integer :: comm1,comm2,success
         success=get_elpa_communicators(comm,n,n,comm1,comm2)
        ])], [abi_linalg_has_elpa="yes"], [abi_linalg_has_elpa="no"])
    fi
  fi

# Check ELPA v2013-
  if test "${abi_linalg_has_elpa}" = "no"; then
    AC_LINK_IFELSE([AC_LANG_PROGRAM([],
      [call elpa_transpose_vectors
      ])], [abi_linalg_has_elpa="yes"], [abi_linalg_has_elpa="no"])
  fi
])
m4trace:config/m4/conn-linalg.m4:547: -1- AC_DEFUN([_ABI_LINALG_CHECK_MAGMA_15], [
  dnl Init
  abi_linalg_has_magma_15="no"

  AC_MSG_CHECKING([for magma_init/magma_finalize support in specified MAGMA libraries])
  AC_LINK_IFELSE([AC_LANG_PROGRAM([],
    [
      call magmaf_init
    ])], [abi_linalg_has_magma_15="yes"], [abi_linalg_has_magma_15="no"])
  AC_MSG_RESULT([${abi_linalg_has_magma_15}])

  if test "${abi_linalg_has_magma_15}" = "yes"; then
    AC_DEFINE([HAVE_LINALG_MAGMA_15],1,[Define to 1 if you have MAGMA >=1.5 API support])
  fi
])
m4trace:config/m4/conn-linalg.m4:569: -1- AC_DEFUN([_ABI_LINALG_SEARCH_PLASMA], [
  dnl Init
  abi_linalg_has_plasma="no"

  dnl Look for libraries and routines
  AC_SEARCH_LIBS([plasma_zhegv],$1,
    [abi_linalg_has_plasma="yes"],[abi_linalg_has_plasma="no"],
    [$2 ${abi_linalg_libs}])
  if test "${abi_linalg_has_plasma}" = "yes"; then
    if test "${ac_cv_search_plasma_zhegv}" != "none required"; then
      abi_linalg_libs="${ac_cv_search_plasma_zhegv} $2 ${abi_linalg_libs}"
    fi
  fi
])
m4trace:config/m4/conn-linalg.m4:590: -1- AC_DEFUN([_ABI_LINALG_SEARCH_MAGMA], [
  dnl Init
  abi_linalg_has_magma="no"

  dnl Look for libraries and routines
  AC_SEARCH_LIBS([magmaf_zheevd],$1,
    [abi_linalg_has_magma="yes"],[abi_linalg_has_magma="no"],
    [$2 ${abi_linalg_libs}])
  if test "${abi_linalg_has_magma}" = "yes"; then
    if test "${ac_cv_search_magmaf_zheevd}" != "none required"; then
      abi_linalg_libs="${ac_cv_search_magmaf_zheevd} $2 ${abi_linalg_libs}"
    fi
  fi
])
m4trace:config/m4/conn-linalg.m4:613: -1- AC_DEFUN([ABI_LINALG_DETECT], [
  dnl Initial setup
  abi_linalg_chk_gpu=""
  abi_linalg_chk_mpi=""
  abi_linalg_chk_mpiext=""
  abi_linalg_chk_serial=""
  abi_linalg_gpu="no"
  abi_linalg_mpi="no"
  abi_linalg_serial="no"
  abi_linalg_has_blas="no"
  abi_linalg_has_lapack="no"
  abi_linalg_has_lapacke="no"
  abi_linalg_has_blacs="no"
  abi_linalg_has_scalapack="no"
  abi_linalg_has_elpa="no"
  abi_linalg_has_plasma="no"
  abi_linalg_has_magma="no"
  abi_linalg_incs="${with_linalg_incs}"
  abi_linalg_libs="${with_linalg_libs}"
  lib_linalg_flavor="${with_linalg_flavor}"
  lib_linalg_fcflags=""
  lib_linalg_incs=""
  lib_linalg_ldflags=""
  lib_linalg_libs=""

  dnl Prepare environment
  ABI_ENV_BACKUP
  LDFLAGS="${FC_LDFLAGS}"
  abi_saved_FCFLAGS="${FCFLAGS}"
  abi_saved_LDFLAGS="${LDFLAGS}"
  abi_saved_LIBS="${LIBS}"
  CPPFLAGS="${with_linalg_incs} ${CPPFLAGS}"
  LIBS="${with_linalg_libs} ${LIBS}"
  AC_LANG_PUSH([Fortran])

  dnl Make sure the 'none' flavor is not overriden
  if test "${with_linalg_flavor}" = "none"; then
    if test "${with_linalg_incs}" != "" -o \
            "${with_linalg_libs}" != ""; then
      AC_MSG_ERROR([user-defined linear algebra includes and libraries
                  are not allowed when the flavor is set to 'none'
           solution: use consistent linear algebra options])
    fi
  fi

  dnl Display requested flavor
  AC_MSG_CHECKING([for the requested linear algebra support])
  AC_MSG_RESULT([${lib_linalg_flavor}])

  dnl Reformat flavor
  abi_linalg_iter=`echo "${lib_linalg_flavor}" | tr '+' '\n' | sort -u | awk '{printf " %s",[$]1}'`

  dnl Check serial and parallel flavor unicity
  for abi_linalg_flavor in ${abi_linalg_iter}; do
    case "${abi_linalg_flavor}" in
      magma)
        if test "${abi_linalg_chk_gpu}" != ""; then
          AC_MSG_ERROR([only one GPU linear algebra flavor is permitted])
        fi
        abi_linalg_chk_gpu="${abi_linalg_flavor}"
        ;;
      scalapack|plasma)
        if test "${abi_linalg_chk_mpi}" != ""; then
          AC_MSG_ERROR([only one MPI linear algebra flavor is permitted])
        fi
        abi_linalg_chk_mpi="${abi_linalg_flavor}"
        ;;
      elpa)
        abi_linalg_chk_mpiext="${abi_linalg_flavor}"
        ;;
      *)
        if test "${abi_linalg_chk_serial}" != ""; then
          AC_MSG_ERROR([only one serial linear algebra flavor is permitted])
        fi
        abi_linalg_chk_serial="${abi_linalg_flavor}"
        ;;
    esac
  done
  if test "${abi_linalg_chk_serial}" = ""; then
    AC_MSG_ERROR([you must choose a serial linear algebra flavor])
  fi

  dnl Check if the user has requested a fallback
  AC_MSG_CHECKING([whether to select a fallback for linear algebra])
  abi_linalg_fallback=`echo "${abi_linalg_chk_serial}" | cut -s -d- -f2`
  if test "${abi_linalg_fallback}" = "fallback"; then
    abi_linalg_fallback="yes"
  else
    abi_linalg_fallback="no"
  fi
  AC_MSG_RESULT([${abi_linalg_fallback}])
  if test "${abi_linalg_fallback}" = "yes"; then
    if test "${enable_fallbacks}" = "no"; then
      AC_MSG_ERROR([fallback requested while fallbacks have been globally disabled])
    fi
    if test "${with_linalg_incs}" != "" -o "${with_linalg_libs}" != ""; then
      AC_MSG_ERROR([you may not specify include or link flags when requesting
                  a fallback (--with-linalg-incs and --with-linalg-libs)])
    fi
  fi

  dnl Look for linear algebra libraries
  if test "${with_linalg_libs}" != "" -o \
          "${lib_linalg_flavor}" = "custom"; then
    _ABI_LINALG_CHECK_LIBS

  elif test "${lib_linalg_flavor}" != "none"; then
    case "${abi_linalg_chk_serial}" in

      acml)
        abi_linalg_fcflags=""
        abi_linalg_ldflags=""
        abi_linalg_blas_libs="acml"
        abi_linalg_blas_prqs="-lacml_mv"
        abi_linalg_lapack_libs="acml"
        abi_linalg_lapack_prqs=""
        abi_linalg_lapacke_libs="acml"
        abi_linalg_lapacke_prqs=""
        abi_linalg_blacs_libs="acml"
        abi_linalg_blacs_prqs=""
        abi_linalg_scalapack_libs="acml"
        abi_linalg_scalapack_prqs=""
        ;;

      asl)
        abi_linalg_fcflags=""
        abi_linalg_ldflags=""
        abi_linalg_blas_libs="asl"
        abi_linalg_blas_prqs=""
        abi_linalg_lapack_libs="asl"
        abi_linalg_lapack_prqs=""
        abi_linalg_lapacke_libs="asl"
        abi_linalg_lapacke_prqs=""
        abi_linalg_blacs_libs="asl"
        abi_linalg_blacs_prqs=""
        abi_linalg_scalapack_libs="asl"
        abi_linalg_scalapack_prqs=""
        ;;

      atlas)
        abi_linalg_fcflags=""
        abi_linalg_ldflags=""
        abi_linalg_blas_libs="f77blas"
        abi_linalg_blas_prqs="-lcblas -latlas"
        abi_linalg_lapack_libs="lapack"
        abi_linalg_lapack_prqs=""
        abi_linalg_lapacke_libs=""
        abi_linalg_lapacke_prqs=""
        abi_linalg_blacs_libs="atlas"
        abi_linalg_blacs_prqs="-lscalapack"
        abi_linalg_scalapack_libs="scalapack"
        abi_linalg_scalapack_prqs=""
        ;;

      essl)
        abi_linalg_fcflags="-qessl"
        abi_linalg_ldflags="-qessl"
        abi_linalg_blas_libs="essl"
        abi_linalg_blas_prqs=""
        abi_linalg_lapack_libs="essl"
        abi_linalg_lapack_prqs=""
        abi_linalg_lapacke_libs="essl"
        abi_linalg_lapacke_prqs=""
        abi_linalg_blacs_libs="essl"
        abi_linalg_blacs_prqs=""
        abi_linalg_scalapack_libs="essl"
        abi_linalg_scalapack_prqs=""
        ;;

      mkl)
        abi_linalg_fcflags=""
        abi_linalg_ldflags=""
        if test "${abi_cpu_bits}" = "64"; then
          abi_linalg_blas_libs="mkl_intel_lp64"
          if test "${MKLROOT}" != ""; then
            abi_linalg_blas_prqs="-L${MKLROOT}/lib/intel64 -lmkl_sequential -lmkl_core -lpthread -lm"
          else
            abi_linalg_blas_prqs="-lmkl_sequential -lmkl_core -lpthread -lm"
          fi
          abi_linalg_lapack_libs="mkl_intel_lp64"
          abi_linalg_lapack_prqs=""
          abi_linalg_lapacke_libs=""
          abi_linalg_lapacke_prqs=""
          abi_linalg_blacs_libs="mkl_blacs_intelmpi_lp64"
          abi_linalg_blacs_prqs=""
          abi_linalg_scalapack_libs="mkl_scalapack_lp64"
          abi_linalg_scalapack_prqs=""
        else
          abi_linalg_blas_libs="mkl_intel"
          if test "${MKLROOT}" != ""; then
            abi_linalg_blas_prqs="-L${MKLROOT}/lib/ia32 -lmkl_sequential -lmkl_core -lpthread -lm"
          else
            abi_linalg_blas_prqs="-lmkl_sequential -lmkl_core -lpthread -lm"
          fi
          abi_linalg_lapack_libs="mkl_intel"
          abi_linalg_lapack_prqs=""
          abi_linalg_lapacke_libs=""
          abi_linalg_lapacke_prqs=""
          abi_linalg_blacs_libs="mkl_blacs_intelmpi"
          abi_linalg_blacs_prqs=""
          abi_linalg_scalapack_libs="mkl_scalapack_core"
          abi_linalg_scalapack_prqs=""
        fi
        ;;

      netlib|goto)
        abi_linalg_fcflags=""
        abi_linalg_ldflags=""
        if test "${abi_linalg_chk_serial}" = "goto"; then
          abi_linalg_blas_libs="goto"
          abi_linalg_blas_prqs=""
        else
          abi_linalg_blas_libs="blas"
          abi_linalg_blas_prqs=""
        fi
        abi_linalg_lapack_libs="lapack"
        abi_linalg_lapack_prqs=""
        abi_linalg_lapacke_libs="lapacke"
        abi_linalg_lapacke_prqs=""
        abi_linalg_blacs_libs="blacs"
        abi_linalg_blacs_prqs="-lblacsCinit -lblacsF77init"
        abi_linalg_scalapack_libs="scalapack"
        abi_linalg_scalapack_prqs=""
        ;;

      *)
        if test "${abi_linalg_fallback}" = "no"; then
          AC_MSG_ERROR([unknown linear algebra flavor '${lib_linalg_flavor}'])
        fi
        ;;

    esac

    dnl ELPA support is always separate
    abi_linalg_elpa_libs="elpa"
    abi_linalg_elpa_prqs=""

    dnl PLASMA support is always separate
    abi_linalg_plasma_libs="plasma"
    abi_linalg_plasma_prqs="-lcoreblas -lcorelapack"

    dnl MAGMA support is always separate
    abi_linalg_magma_libs="magma"
    abi_linalg_magma_prqs="${lib_gpu_libs}"

    dnl BLAS extension?
    _ABI_LINALG_CHECK_BLAS_EXTS()

    dnl MKL extensions?
    if test "${abi_linalg_chk_serial}" = "mkl"; then
      _ABI_LINALG_CHECK_BLAS_MKL_EXTS()
    fi

    dnl Look for the selected libraries
    if test "${abi_linalg_fallback}" = "no"; then
      FCFLAGS="${abi_saved_FCFLAGS} ${abi_linalg_fcflags}"
      LDFLAGS="${abi_saved_LDFLAGS} ${abi_linalg_ldflags}"
      _ABI_LINALG_SEARCH_BLAS([${abi_linalg_blas_libs}],[${abi_linalg_blas_prqs}])
      _ABI_LINALG_SEARCH_LAPACK([${abi_linalg_lapack_libs}],[${abi_linalg_lapack_prqs}])

      dnl MPI libraries
      case "${abi_linalg_chk_mpi}" in
        scalapack)
          if test "${enable_mpi}" != "yes"; then
            AC_MSG_ERROR([ScaLAPACK support requires MPI])
          fi
          _ABI_LINALG_SEARCH_BLACS([${abi_linalg_blacs_libs}],[${abi_linalg_blacs_prqs}])
          _ABI_LINALG_SEARCH_SCALAPACK([${abi_linalg_scalapack_libs}],[${abi_linalg_scalapack_prqs}])
          ;;
        plasma)
          if test "${enable_mpi}" != "yes"; then
            AC_MSG_ERROR([PLASMA support requires MPI])
          fi
          if test "${enable_openmp}" != "yes"; then
            AC_MSG_ERROR([PLASMA support requires openMP])
          fi
          if test "${fc_has_iso_c_binding}" != "yes"; then
            AC_MSG_ERROR([PLASMA support requires Fortran 2003 ISO C bindings])
          fi
          _ABI_LINALG_SEARCH_LAPACKE([${abi_linalg_lapacke_libs}],[${abi_linalg_lapacke_prqs}])
          if test "${abi_linalg_has_lapacke}" != ""; then
            _ABI_LINALG_SEARCH_PLASMA([${abi_linalg_plasma_libs}],[${abi_linalg_plasma_prqs}])
          fi
          ;;
        *)
          if test "${abi_linalg_chk_mpi}" != ""; then
            AC_MSG_ERROR([library search for ${abi_linalg_chk_mpi} not implemented])
          fi
          ;;
      esac

      dnl MPI extension libraries
      case "${abi_linalg_chk_mpiext}" in
        elpa)
          if test "${enable_mpi}" != "yes"; then
            AC_MSG_ERROR([ELPA support requires MPI])
          fi
          if test "${abi_linalg_has_scalapack}" != "yes"; then
            AC_MSG_ERROR([ELPA support requires ScaLAPACK])
          fi
          _ABI_LINALG_SEARCH_ELPA([${abi_linalg_elpa_libs}],[${abi_linalg_elpa_prqs}])
          if test "${abi_linalg_has_elpa}" == "no"; then
            AC_MSG_ERROR([ELPA library requested but not found (libelpa.x and/or elpa1.mod missing)])
          fi
          ;;
        *)
          if test "${abi_linalg_chk_mpiext}" != ""; then
            AC_MSG_ERROR([library search for ${abi_linalg_chk_mpiext} not implemented])
          fi
          ;;
      esac

      dnl GPU libraries
      case "${abi_linalg_chk_gpu}" in
        magma)
          if test "${enable_gpu}" != "yes"; then
            AC_MSG_ERROR([MAGMA requires GPU support])
          fi
          _ABI_LINALG_SEARCH_MAGMA([${abi_linalg_magma_libs}],[${abi_linalg_magma_prqs}])
          if test "${abi_linalg_has_magma}" == "no"; then
            AC_MSG_ERROR([Magma library requested but not found])
          fi
          ;;
        *)
          if test "${abi_linalg_chk_gpu}" != ""; then
            AC_MSG_ERROR([library search for ${abi_linalg_chk_gpu} not implemented])
          fi
          ;;
      esac
    fi
  fi

  dnl Set serial, MPI and GPU status
  if test "${abi_linalg_has_blas}" = "yes" -a \
          "${abi_linalg_has_lapack}" = "yes"; then
    abi_linalg_serial="yes"
    if test "${abi_linalg_has_blacs}" = "yes" -a \
            "${abi_linalg_has_scalapack}" = "yes"; then
      abi_linalg_mpi="yes"
    fi
    if test "${abi_linalg_has_plasma}" = "yes"; then
      abi_linalg_mpi="yes"
    fi
    if test "${abi_linalg_has_magma}" = "yes"; then
      abi_linalg_gpu="yes"
    fi
  fi

  dnl Transmit serial status to the source code
  AC_MSG_CHECKING([whether we have a serial linear algebra support])
  AC_MSG_RESULT([${abi_linalg_serial}])
  if test "${abi_linalg_serial}" = "yes"; then
    AC_DEFINE([HAVE_LINALG],1,[Define to 1 if you have an optimized linear algebra library.])
    AC_DEFINE([HAVE_LINALG_SERIAL],1,[Define to 1 if you have an optimized serial linear algebra library.])

    case "${abi_linalg_chk_serial}" in
      asl)
        AC_DEFINE([HAVE_LINALG_ASL],1,[Define to 1 if you have the ASL linear algebra library.])
        ;;
      essl)
        AC_DEFINE([HAVE_LINALG_ESSL],1,[Define to 1 if you have the ESSL linear algebra library.])
        ;;
    esac

    lib_linalg_fcflags="${abi_linalg_fcflags}"
    lib_linalg_ldflags="${abi_linalg_ldflags}"
    lib_linalg_incs="${abi_linalg_incs}"
    lib_linalg_libs="${abi_linalg_libs}"
  else
    lib_linalg_flavor="broken"
    AC_MSG_WARN([falling back to internal linear algebra libraries])
    abi_fallbacks="${abi_fallbacks} linalg"
    lib_linalg_flavor="netlib-fallback"
    abi_dft_linalg_fallback="yes"
  fi

  dnl Transmit MPI status to the source code
  AC_MSG_CHECKING([whether we have a MPI linear algebra support])
  AC_MSG_RESULT([${abi_linalg_mpi}])
  if test "${abi_linalg_mpi}" = "yes"; then
    AC_DEFINE([HAVE_LINALG_MPI],1,[Define to 1 if you have an optimized MPI-parallel linear algebra library.])
    case "${abi_linalg_chk_mpi}" in
      plasma)
        AC_DEFINE([HAVE_LINALG_PLASMA],1,[Define to 1 if you have an optimized PLASMA linear algebra library.])
        ;;
      scalapack)
        AC_DEFINE([HAVE_LINALG_SCALAPACK],1,[Define to 1 if you have an optimized ScaLAPACK linear algebra library.])
        ;;
    esac
    case "${abi_linalg_chk_mpiext}" in
      elpa)
        AC_DEFINE([HAVE_LINALG_ELPA],1,[Define to 1 if you have an optimized ELPA linear algebra library.])
        ;;
    esac
  elif test "${abi_linalg_chk_mpi}" != ""; then
    lib_linalg_flavor="broken"
  fi

  dnl Transmit GPU status to the source code
  AC_MSG_CHECKING([whether we have a GPU linear algebra support])
  AC_MSG_RESULT([${abi_linalg_gpu}])
  if test "${abi_linalg_gpu}" = "yes"; then
    AC_DEFINE([HAVE_LINALG_GPU],1,[Define to 1 if you have an optimized GPU-compatible linear algebra library.])
    case "${abi_linalg_chk_gpu}" in
      magma)
        AC_DEFINE([HAVE_LINALG_MAGMA],1,[Define to 1 if you have the MAGMA linear algebra library.])
        ;;
    esac
  elif test "${abi_linalg_chk_gpu}" != ""; then
    lib_linalg_flavor="broken"
  fi

  dnl Restore build environment
  AC_LANG_POP([Fortran])
  FCFLAGS="${abi_saved_FCFLAGS}"
  LDFLAGS="${abi_saved_LDFLAGS}"
  LIBS="${abi_saved_LIBS}"
  ABI_ENV_RESTORE

  dnl Output final flavor
  AC_MSG_CHECKING([for the actual linear algebra support])
  AC_MSG_RESULT([${lib_linalg_flavor}])
  if test "${lib_linalg_flavor}" = "broken"; then
    ABI_MSG_NOTICE([connectors-failure],[Connector detection failure])
    AC_MSG_ERROR([the requested ${with_linalg_flavor} linear algebra flavor is not supported on this architecture])
  fi

  dnl Substitute variables needed for the use of the library
  AC_SUBST(lib_linalg_flavor)
  AC_SUBST(lib_linalg_fcflags)
  AC_SUBST(lib_linalg_ldflags)
  AC_SUBST(lib_linalg_incs)
  AC_SUBST(lib_linalg_libs)
])
m4trace:config/m4/conn-math.m4:21: -1- AC_DEFUN([_ABI_MATH_CHECK_GSL], [
  dnl Init
  abi_math_gsl_has_incs="no"
  abi_math_gsl_has_libs="no"
  abi_math_gsl_serial="no"
  abi_math_gsl_mpi="no"
  abi_math_gsl_fcflags=""
  abi_math_gsl_ldflags=""
  abi_math_gsl_incs="${with_math_incs}"
  abi_math_gsl_libs="${with_math_libs}"

  dnl Need to switch to C
  AC_LANG_PUSH([C])

  dnl Look for a configurator
  AC_CHECK_PROGS([GSL_CONFIG],[gsl-config])
  if test "${GSL_CONFIG}" != ""; then
    if test "${abi_math_gsl_incs}" = ""; then
      AC_MSG_CHECKING([for GSL include flags])
      abi_math_gsl_incs=`${GSL_CONFIG} --cflags`
      CPPFLAGS="${abi_math_gsl_incs} ${CPPFLAGS}"
      AC_MSG_RESULT([${abi_math_gsl_incs}])
    fi
    if test "${abi_math_gsl_libs}" = ""; then
      AC_MSG_CHECKING([for GSL link flags])
      abi_math_gsl_libs=`${GSL_CONFIG} --libs`
      LIBS="${abi_math_gsl_libs} ${LIBS}"
      AC_MSG_RESULT([${abi_math_gsl_libs}])
    fi
  fi

  dnl Look for includes
  AC_CHECK_HEADERS([gsl/gsl_sf_gamma.h],[abi_math_gsl_has_incs="yes"],[abi_math_gsl_has_incs="no"])

  dnl Look for libraries and routines
  if test "${abi_math_gsl_libs}" = ""; then
    LIBS="-lgslcblas -lm ${LIBS}"
    AC_CHECK_LIB([gsl],[gsl_sf_gamma],[abi_math_gsl_has_libs="yes"],[abi_math_gsl_has_libs="no"])
    if test "${abi_math_gsl_has_libs}" = "yes"; then
      abi_math_gsl_libs="-lgsl -lgslcblas -lm"
    fi
  else
    AC_MSG_CHECKING([whether the specified GSL library works])
    AC_LINK_IFELSE([AC_LANG_PROGRAM(
      [[
#include "gsl/gsl_sf_gamma.h"
      ]],
      [[
        double x,y;
        x = 1.0;
        y = gsl_sf_gamma(x);
      ]])], [abi_math_gsl_has_libs="yes"], [abi_math_gsl_has_libs="no"])
    AC_MSG_RESULT([${abi_math_gsl_has_libs}])
  fi

  dnl Take final decision
  if test "${abi_math_gsl_has_incs}" = "yes" -a \
          "${abi_math_gsl_has_libs}" = "yes"; then
    abi_math_gsl_serial="yes"
  fi

  dnl Restore previous language
  AC_LANG_POP([C])
])
m4trace:config/m4/conn-math.m4:93: -1- AC_DEFUN([_ABI_MATH_CHECK_MLIB], [
  dnl Init
  abi_math_mlib_serial="no"
  abi_math_mlib_mpi="no"
  abi_math_mlib_fcflags=""
  abi_math_mlib_ldflags=""
  abi_math_mlib_incs=""
  abi_math_mlib_libs=""

  dnl Look for libraries and routines
  if test "${with_math_libs}" = ""; then
    AC_CHECK_LIB([veclib],[vrpbrmrb])
    if test "${ac_cv_lib_veclib_vrpbrmrb}" = "yes"; then
      abi_math_mlib_serial="yes"
      abi_math_mlib_libs="-lveclib"
    fi
    if test "${enable_mpi}" = "yes" -a \
            "${abi_math_mlib_serial}" = "yes"; then
      abi_math_mlib_mpi="no"
    fi
  else
    dnl FIXME: implement something
    dnl _ABI_MATH_CHECK_USER
    dnl abi_math_mlib_serial="${abi_math_user_serial}"
    dnl abi_math_mlib_mpi="${abi_math_user_mpi}"
    AC_MSG_WARN([library check not implemented])
    abi_math_mlib_serial="yes"
    if test "${enable_mpi}" = "yes"; then
      abi_math_mlib_mpi="yes"
    fi
    if test "${abi_math_mlib_serial}" = "yes"; then
      abi_math_mlib_incs="${with_math_incs}"
      abi_math_mlib_libs="${with_math_libs}"
    fi
  fi
])
m4trace:config/m4/conn-math.m4:137: -1- AC_DEFUN([ABI_CONNECT_MATH], [
  dnl Initial setup
  lib_math_flavor="${with_math_flavor}"
  lib_math_fcflags=""
  lib_math_ldflags=""
  lib_math_incs=""
  lib_math_libs=""
  abi_math_serial="no"
  abi_math_mpi="no"

  dnl Prepare environment
  ABI_ENV_BACKUP
  abi_saved_LIBS="${LIBS}"
  CPPFLAGS="${with_math_incs} ${CPPFLAGS}"
  LDFLAGS="${FC_LDFLAGS}"
  LIBS="${with_math_libs} ${LIBS}"
  AC_LANG_PUSH([Fortran])

  dnl Display requested flavor
  AC_MSG_CHECKING([for the requested math support])
  AC_MSG_RESULT([${with_math_flavor}])

  dnl Look for external math libraries
  if test "${with_math_flavor}" != "none"; then

    case "${with_math_flavor}" in

      custom)
        if test "${with_math_libs}" == ""; then
          AC_MSG_ERROR([you must specify custom math libraries (--with-math-libs)])
        fi
        abi_math_serial="yes"
        abi_math_mpi="yes"
        lib_math_incs="${with_math_incs}"
        lib_math_libs="${with_math_libs}"
        ;;

      gsl)
        _ABI_MATH_CHECK_GSL
        abi_math_serial="${abi_math_gsl_serial}"
        abi_math_mpi="${abi_math_gsl_mpi}"
        if test "${abi_math_serial}" = "yes"; then
          AC_DEFINE([HAVE_GSL],1,[Define to 1 if you have the GNU Scientific Library.])
          lib_math_fcflags="${abi_math_gsl_fcflags}"
          lib_math_ldflags="${abi_math_gsl_ldflags}"
          lib_math_incs="${abi_math_gsl_incs}"
          lib_math_libs="${abi_math_gsl_libs}"
        fi
        ;;

      mlib)
        _ABI_MATH_CHECK_MLIB
        abi_math_serial="${abi_math_mlib_serial}"
        abi_math_mpi="${abi_math_mlib_mpi}"
        if test "${abi_math_serial}" = "yes"; then
          AC_DEFINE([HAVE_LINALG_MLIB],1,[Define to 1 if you have the HP MLib Library.])
          lib_math_fcflags="${abi_math_mlib_fcflags}"
          lib_math_ldflags="${abi_math_mlib_ldflags}"
          lib_math_incs="${abi_math_mlib_incs}"
          lib_math_libs="${abi_math_mlib_libs}"
        fi
        ;;

      *)
        AC_MSG_ERROR([unknown math flavor '${with_math_flavor}'])
        ;;

    esac

  fi

  dnl Restore build environment
  AC_LANG_POP([Fortran])
  LIBS="${abi_saved_LIBS}"
  ABI_ENV_RESTORE

  dnl Output final flavor
  AC_MSG_CHECKING([for the actual math support])
  AC_MSG_RESULT([${lib_math_flavor}])
  if test "${lib_math_flavor}" = "broken"; then
    ABI_MSG_NOTICE([connectors-failure],[Connector detection failure])
    if test "${with_math_libs}" = ""; then
      AC_MSG_ERROR([the requested ${with_math_flavor} math flavor is not available])
    else
      AC_MSG_ERROR([the specified math libraries do not work])
    fi
  fi

  dnl Substitute variables needed for the use of the library
  AC_SUBST(lib_math_flavor)
  AC_SUBST(lib_math_fcflags)
  AC_SUBST(lib_math_ldflags)
  AC_SUBST(lib_math_incs)
  AC_SUBST(lib_math_libs)
])
m4trace:config/m4/conn-timer.m4:21: -1- AC_DEFUN([_ABI_TIMER_CHECK_PAPI], [
  dnl Init
  abi_timer_papi_has_incs="no"
  abi_timer_papi_has_libs="no"
  abi_timer_papi_serial="no"
  abi_timer_papi_mpi="no"
  abi_timer_papi_fcflags=""
  abi_timer_papi_ldflags=""
  abi_timer_papi_incs="${with_timer_incs}"
  abi_timer_papi_libs="${with_timer_libs}"

  dnl Look for includes
  AC_LANG_PUSH([C])
  dnl AC_CHECK_HEADERS([f90papi.h],[abi_timer_papi_has_incs="yes"],[abi_timer_papi_has_incs="no"])
  AC_CHECK_HEADERS([papi.h],[abi_timer_papi_has_incs="yes"],[abi_timer_papi_has_incs="no"])
  AC_LANG_POP([C])

  dnl Look for libraries and routines
  if test "${abi_timer_papi_libs}" = ""; then
    AC_CHECK_LIB([papi],[PAPIf_library_init],[abi_timer_papi_has_libs="yes"],[abi_timer_papi_has_libs="no"])
    if test "${abi_timer_papi_has_libs}" = "yes"; then
      abi_timer_papi_libs="-lpapi"
    fi
  else
    AC_MSG_CHECKING([whether the specified PAPI library works])
    AC_LINK_IFELSE([AC_LANG_PROGRAM([],
      [[
#if defined HAVE_F90PAPI_H
#include "papi/papi_sf_gamma.h"
#endif
        call PAPIf_library_init
      ]])], [abi_timer_papi_has_libs="yes"], [abi_timer_papi_has_libs="no"])
    AC_MSG_RESULT([${abi_timer_papi_has_libs}])
  fi

  dnl Take final decision
  if test "${abi_timer_papi_has_incs}" = "yes" -a \
          "${abi_timer_papi_has_libs}" = "yes"; then
    abi_timer_papi_serial="yes"
  fi
])
m4trace:config/m4/conn-timer.m4:70: -1- AC_DEFUN([ABI_CONNECT_TIMER], [
  dnl Initial setup
  lib_timer_flavor="${with_timer_flavor}"
  lib_timer_fcflags=""
  lib_timer_ldflags=""
  lib_timer_incs=""
  lib_timer_libs=""
  abi_timer_serial="no"
  abi_timer_mpi="no"

  dnl Prepare environment
  ABI_ENV_BACKUP
  abi_saved_LIBS="${LIBS}"
  CPPFLAGS="${with_timer_incs} ${CPPFLAGS}"
  LDFLAGS="${FC_LDFLAGS}"
  LIBS="${with_timer_libs} ${LIBS}"
  AC_LANG_PUSH([Fortran])

  dnl Display requested flavor
  AC_MSG_CHECKING([for the requested timer support])
  AC_MSG_RESULT([${with_timer_flavor}])

  dnl Look for external timer libraries
  if test "${with_timer_flavor}" != "none"; then

    case "${with_timer_flavor}" in

      abinit)
        AC_DEFINE([HAVE_TIMER_ABINIT],1,[Define to 1 if you want to use the Abinit timer.])
        abi_timer_serial="yes"
        if test "${enable_mpi}" = "yes"; then
          abi_timer_mpi="yes"
        fi
        ;;

      custom)
        if test "${with_timer_libs}" == ""; then
          AC_MSG_ERROR([you must specify custom timer libraries (--with-timer-libs)])
        fi
        abi_timer_serial="yes"
        abi_timer_mpi="yes"
        lib_timer_incs="${with_timer_incs}"
        lib_timer_libs="${with_timer_libs}"
        ;;

      gptl)
        AC_MSG_ERROR([not implemented])
        ;;

      papi)
        _ABI_TIMER_CHECK_PAPI
        abi_timer_serial="${abi_timer_papi_serial}"
        abi_timer_mpi="${abi_timer_papi_mpi}"
        if test "${abi_timer_serial}" = "yes"; then
          AC_DEFINE([HAVE_PAPI],1,[Define to 1 if you have the PAPI library.])
          lib_timer_fcflags="${abi_timer_papi_fcflags}"
          lib_timer_ldflags="${abi_timer_papi_ldflags}"
          lib_timer_incs="${abi_timer_papi_incs}"
          lib_timer_libs="${abi_timer_papi_libs}"
        fi
        ;;

        *)
          AC_MSG_ERROR([unknown timer flavor '${with_timer_flavor}'])
          ;;

    esac

  fi

  dnl Add rt support if available on the machine.
  AC_LANG_PUSH(C)
  AC_CHECK_HEADERS([time.h])
  AC_CHECK_LIB([rt], [clock_gettime], [abi_timer_rt_libs="-lrt"], [abi_timer_rt_libs=""])
  lib_timer_libs=$lib_timer_libs" "$abi_timer_rt_libs
  AC_CHECK_FUNCS([clock_gettime])
  AC_LANG_POP(C)

  dnl Restore build environment
  AC_LANG_POP([Fortran])
  LIBS="${abi_saved_LIBS}"
  ABI_ENV_RESTORE

  dnl Output final flavor
  AC_MSG_CHECKING([for the actual timer support])
  AC_MSG_RESULT([${lib_timer_flavor}])
  if test "${lib_timer_flavor}" = "broken"; then
    ABI_MSG_NOTICE([connectors-failure],[Connector detection failure])
    if test "${with_timer_libs}" = ""; then
      AC_MSG_ERROR([the requested ${with_timer_flavor} timer flavor is not available])
    else
      AC_MSG_ERROR([the specified timer libraries do not work])
    fi
  fi

  dnl Substitute variables needed for the use of the library
  AC_SUBST(lib_timer_flavor)
  AC_SUBST(lib_timer_fcflags)
  AC_SUBST(lib_timer_ldflags)
  AC_SUBST(lib_timer_incs)
  AC_SUBST(lib_timer_libs)
])
m4trace:config/m4/conn-trio.m4:21: -1- AC_DEFUN([_ABI_TRIO_CHECK_ETSF_IO], [
  dnl Init
  abi_trio_etsf_io_default_libs="-letsf_io_utils -letsf_io"
  abi_trio_etsf_io_has_incs="no"
  abi_trio_etsf_io_has_libs="no"
  abi_trio_etsf_io_serial="no"
  abi_trio_etsf_io_mpi="no"
  abi_trio_etsf_io_fcflags=""
  abi_trio_etsf_io_ldflags=""
  abi_trio_etsf_io_incs="${with_etsf_io_incs}"
  abi_trio_etsf_io_libs="${with_etsf_io_libs}"

  dnl Prepare environment
  tmp_saved_FCFLAGS="${FCFLAGS}"
  tmp_saved_LIBS="${LIBS}"
  FCFLAGS="${FCFLAGS} ${abi_trio_etsf_io_incs}"
  if test "${with_etsf_io_libs}" = ""; then
    AC_MSG_CHECKING([for ETSF_IO libraries to try])
    LIBS="${abi_trio_etsf_io_default_libs} ${LIBS}"
    AC_MSG_RESULT([${abi_trio_etsf_io_default_libs}])
  else
    LIBS="${abi_trio_etsf_io_libs} ${LIBS}"
  fi

  dnl Look for includes
  ABI_FC_MOD_INCS([etsf_io])
  FCFLAGS="${FCFLAGS} ${fc_mod_incs}"
  if test "${abi_fc_mod_incs_ok}" != "unknown"; then
    abi_trio_etsf_io_has_incs="yes"
  fi

  dnl Look for libraries and routines
  if test "${abi_trio_etsf_io_has_incs}" = "yes"; then
    AC_MSG_CHECKING([whether ETSF_IO libraries work])
    AC_LINK_IFELSE([AC_LANG_PROGRAM([],
      [[
        use etsf_io_low_level
        use etsf_io
        use etsf_io_tools
        character(len=etsf_charlen),allocatable :: atoms(:)
        integer :: ncid
        logical :: lstat
        type(etsf_io_low_error) :: err
        call etsf_io_tools_get_atom_names(ncid,atoms,lstat,err)
      ]])], [abi_trio_etsf_io_has_libs="yes"], [abi_trio_etsf_io_has_libs="no"])
    AC_MSG_RESULT([${abi_trio_etsf_io_has_libs}])
  fi

  dnl Take final decision for the serial case
  if test "${abi_trio_etsf_io_has_incs}" = "yes" -a \
          "${abi_trio_etsf_io_has_libs}" = "yes"; then
    abi_trio_etsf_io_serial="yes"
    if test "${with_etsf_io_libs}" = ""; then
      abi_trio_etsf_io_libs="${abi_trio_etsf_io_default_libs}"
    fi
  fi

  dnl Check for MPI support
  if test "${enable_mpi}" = "yes" -a \
          "${abi_trio_etsf_io_serial}" = "yes"; then
    abi_trio_etsf_io_mpi="yes"
  fi

  dnl Restore environment
  FCFLAGS="${tmp_saved_FCFLAGS}"
  LIBS="${tmp_saved_LIBS}"
])
m4trace:config/m4/conn-trio.m4:96: -1- AC_DEFUN([_ABI_TRIO_CHECK_PSML], [
  dnl Init
  abi_trio_psml_default_libs="-lpsml"
  abi_trio_psml_has_incs="no"
  abi_trio_psml_has_libs="no"
  abi_trio_psml_serial="no"
  abi_trio_psml_mpi="no"
  abi_trio_psml_fcflags=""
  abi_trio_psml_ldflags=""
  abi_trio_psml_incs="${with_psml_incs}"
  abi_trio_psml_libs="${with_psml_libs}"

  dnl Prepare environment
  tmp_saved_FCFLAGS="${FCFLAGS}"
  tmp_saved_LIBS="${LIBS}"
  FCFLAGS="${FCFLAGS} ${abi_trio_psml_incs}"
  if test "${abi_trio_psml_libs}" = ""; then
    AC_MSG_CHECKING([for PSML libraries to try])
    LIBS="${abi_trio_psml_default_libs} ${LIBS}"
    AC_MSG_RESULT([${abi_trio_psml_default_libs}])
  else
    LIBS="${abi_trio_psml_libs} ${LIBS}"
  fi

  dnl Look for includes
  ABI_FC_MOD_INCS([m_psml])
  FCFLAGS="${FCFLAGS} ${fc_mod_incs}"
  if test "${abi_fc_mod_incs_ok}" != "unknown"; then
    abi_trio_psml_has_incs="yes"
  fi

  dnl Look for libraries and routines
  if test "${abi_trio_psml_has_incs}" = "yes"; then
    AC_MSG_CHECKING([whether PSML libraries work])

    AC_LINK_IFELSE( AC_LANG_SOURCE([[
        subroutine psml_die(str)
          character, intent(in) :: str 
          STOP 
        end subroutine psml_die 

        program test
        use m_psml
        type(ps_t) :: psxml
        call ps_destroy(psxml)
        end program
      ]]), [abi_trio_psml_has_libs="yes"], [abi_trio_psml_has_libs="no"])
    AC_MSG_RESULT([${abi_trio_psml_has_libs}])
  fi

  dnl Take final decision for the serial case
  if test "${abi_trio_psml_has_incs}" = "yes" -a \
          "${abi_trio_psml_has_libs}" = "yes"; then
    abi_trio_psml_serial="yes"
    if test "${with_psml_libs}" = ""; then
      abi_trio_psml_libs="${abi_trio_psml_default_libs}"
    fi
  fi

  dnl Check for MPI support
  if test "${enable_mpi_io}" = "yes" -a \
          "${abi_trio_psml_serial}" = "yes"; then
    abi_trio_psml_mpi="yes"
  fi

  dnl Restore environment
  FCFLAGS="${tmp_saved_FCFLAGS}"
  LIBS="${tmp_saved_LIBS}"
])
m4trace:config/m4/conn-trio.m4:173: -1- AC_DEFUN([_ABI_TRIO_CHECK_NETCDF], [
  dnl Init
  abi_trio_netcdf_has_incs="no"
  abi_trio_netcdf_has_libs="no"
  abi_trio_netcdf_serial="no"
  abi_trio_netcdf_mpi="no"
  abi_trio_netcdf_fcflags=""
  abi_trio_netcdf_ldflags=""
  abi_trio_netcdf_incs="${with_netcdf_incs}"
  abi_trio_netcdf_libs="${with_netcdf_libs}"

  dnl Prepare environment
  tmp_saved_CPPFLAGS="${CPPFLAGS}"
  tmp_saved_FCFLAGS="${FCFLAGS}"
  tmp_saved_LIBS="${LIBS}"
  CPPFLAGS="${CPPFLAGS} ${abi_trio_netcdf_incs}"
  FCFLAGS="${FCFLAGS} ${abi_trio_netcdf_incs}"

  dnl Look for C includes
  AC_LANG_PUSH([C])
  AC_CHECK_HEADERS([netcdf.h],[abi_trio_netcdf_has_incs="yes"],[abi_trio_netcdf_has_incs="no"])
  AC_LANG_POP([C])

  dnl Look for libraries and routines
  if test "${abi_trio_netcdf_libs}" = ""; then
    AC_LANG_PUSH([C])
    AC_SEARCH_LIBS([nc_open],[netcdf])
    AC_LANG_POP([C])
    if test "${ac_cv_search_nc_open}" != "no"; then
      if test "${ac_cv_search_nc_open}" != "none required"; then
        abi_trio_netcdf_libs="${ac_cv_search_nc_open}"
        LIBS="${abi_trio_netcdf_libs} ${LIBS}"
      fi
      AC_SEARCH_LIBS([nf_open],[netcdf netcdff],
        [abi_trio_netcdf_has_libs="yes"],[abi_trio_netcdf_has_libs="no"])
      if test "${abi_trio_netcdf_has_libs}" = "yes"; then
        if test "${ac_cv_search_nf_open}" != "none required"; then
          abi_trio_netcdf_libs="${ac_cv_search_nf_open} ${abi_trio_netcdf_libs}"
        fi
      fi
    fi
  else
    LIBS="${abi_trio_netcdf_libs} ${LIBS}"
  fi

  dnl Look for Fortran includes
  dnl Note: must be done after the libraries have been discovered
  ABI_FC_MOD_INCS([netcdf])
  FCFLAGS="${FCFLAGS} ${fc_mod_incs}"
  if test "${abi_fc_mod_incs_ok}" = "unknown"; then
    abi_trio_netcdf_has_incs="no"
  fi

  dnl Check Fortran support
  if test "${abi_trio_netcdf_has_incs}" = "yes"; then
    AC_MSG_CHECKING([whether NetCDF Fortran wrappers work])
    AC_LINK_IFELSE([AC_LANG_PROGRAM([],
      [[
        use netcdf
        character(len=*), parameter :: path = "dummy"
        integer :: mode, ncerr, ncid
        ncerr = nf90_open(path,mode,ncid)
      ]])], [abi_trio_netcdf_has_libs="yes"], [abi_trio_netcdf_has_libs="no"])
    AC_MSG_RESULT([${abi_trio_netcdf_has_libs}])
  fi

  dnl Take final decision for the serial case
  if test "${abi_trio_netcdf_has_incs}" = "yes" -a \
          "${abi_trio_netcdf_has_libs}" = "yes"; then
    abi_trio_netcdf_serial="yes"
  fi

  dnl Check for MPI support
  if test "${enable_mpi_io}" = "yes" -a \
          "${abi_trio_netcdf_serial}" = "yes"; then
    AC_MSG_CHECKING([whether NetCDF supports MPI I/O])
    AC_LINK_IFELSE([AC_LANG_PROGRAM([],
      [[
        use netcdf
        character(len=*), parameter :: path = "dummy"
        integer :: cmode, comm, info, ncerr, ncid
        ncerr = nf90_open_par(path, cmode, comm, info, ncid)
      ]])], [abi_trio_netcdf_mpi="yes"], [abi_trio_netcdf_mpi="no"])
    AC_MSG_RESULT([${abi_trio_netcdf_mpi}])
  fi

  dnl Restore environment
  CPPFLAGS="${tmp_saved_CPPFLAGS}"
  FCFLAGS="${tmp_saved_FCFLAGS}"
  LIBS="${tmp_saved_LIBS}"

  dnl Make sure LIBS are properly set for ETSF_IO
  if test "${abi_trio_netcdf_serial}" = "yes"; then
    CPPFLAGS="${CPPFLAGS} ${abi_trio_netcdf_incs}"
    FCFLAGS="${FCFLAGS} ${abi_trio_netcdf_incs}"
    LIBS="${abi_trio_netcdf_libs} ${LIBS}"
  fi
])
m4trace:config/m4/conn-trio.m4:279: -1- AC_DEFUN([_ABI_TRIO_CHECK_YAML], [
  dnl Init
  abi_trio_yaml_default_libs="-lfyaml"
  abi_trio_yaml_has_incs="no"
  abi_trio_yaml_has_libs="no"
  abi_trio_yaml_serial="no"
  abi_trio_yaml_mpi="no"
  abi_trio_yaml_fcflags=""
  abi_trio_yaml_ldflags=""
  abi_trio_yaml_incs="${with_yaml_incs}"
  abi_trio_yaml_libs="${with_yaml_libs}"

  dnl Prepare environment
  tmp_saved_FCFLAGS="${FCFLAGS}"
  tmp_saved_LIBS="${LIBS}"
  FCFLAGS="${FCFLAGS} ${abi_trio_yaml_incs}"
  if test "${with_yaml_libs}" = ""; then
    AC_MSG_CHECKING([for YAML libraries to try])
    LIBS="${abi_trio_yaml_default_libs} ${LIBS}"
    AC_MSG_RESULT([${abi_trio_yaml_default_libs}])
  else
    LIBS="${abi_trio_yaml_libs} ${LIBS}"
  fi

  dnl Look for includes
  ABI_FC_MOD_INCS([yaml_output])
  FCFLAGS="${FCFLAGS} ${fc_mod_incs}"
  if test "${abi_fc_mod_incs_ok}" != "unknown"; then
    abi_trio_yaml_has_incs="yes"
  fi

  dnl Look for libraries and routines
  if test "${abi_trio_yaml_has_incs}" = "yes"; then
    AC_MSG_CHECKING([whether the YAML library works])
    AC_LINK_IFELSE([AC_LANG_PROGRAM([],
      [[
        use yaml_output
        use dictionaries
        type(dictionary), pointer :: dict
        call yaml_new_document()
        call dict_init(dict)
        call set(dict//'tot_ncpus', 4)
      ]])], [abi_trio_yaml_has_libs="yes"], [abi_trio_yaml_has_libs="no"])
    AC_MSG_RESULT([${abi_trio_yaml_has_libs}])
  fi

  dnl Take final decision for the serial case
  if test "${abi_trio_yaml_has_incs}" = "yes" -a \
          "${abi_trio_yaml_has_libs}" = "yes"; then
    abi_trio_yaml_serial="yes"
    if test "${with_yaml_libs}" = ""; then
      abi_trio_yaml_libs="${abi_trio_yaml_default_libs}"
    fi
  fi

  dnl Check for MPI support
  if test "${enable_mpi}" = "yes" -a \
          "${abi_trio_yaml_serial}" = "yes"; then
    abi_trio_yaml_mpi="yes"
  fi

  dnl Restore environment
  FCFLAGS="${tmp_saved_FCFLAGS}"
  LIBS="${tmp_saved_LIBS}"
])
m4trace:config/m4/conn-trio.m4:352: -1- AC_DEFUN([ABI_CONNECT_TRIO], [
  dnl Initial setup
  abi_test_etsf_io="no"
  abi_test_netcdf="no"
  lib_trio_flavor="${with_trio_flavor}"

  dnl Prepare environment
  ABI_ENV_BACKUP
  abi_saved_LIBS="${LIBS}"
  LDFLAGS="${FC_LDFLAGS}"
  AC_LANG_PUSH([Fortran])

  dnl Display requested flavor
  AC_MSG_CHECKING([for the requested transferable I/O support])
  AC_MSG_RESULT([${with_trio_flavor}])

  dnl Look for external I/O libraries
  if test "${with_trio_flavor}" != "none"; then

    dnl Make sure NetCDF is looked for before ETSF_IO
    abi_trio_iter=`echo "${lib_trio_flavor}" | tr '+' '\n' | sort -u | awk '{printf " %s",[$]1}'`
    abi_trio_tmp="${abi_trio_iter}"
    for abi_trio_flavor in ${abi_trio_iter}; do
      if test "${abi_trio_flavor}" = "netcdf"; then
        abi_trio_tmp=`echo "${abi_trio_iter}" | sed -e 's/netcdf//'`
        abi_trio_tmp="netcdf ${abi_trio_tmp}"
      fi
      if test "${abi_trio_flavor}" = "netcdf-fallback"; then
        abi_trio_tmp=`echo "${abi_trio_iter}" | sed -e 's/netcdf-fallback//'`
        abi_trio_tmp="netcdf-fallback ${abi_trio_tmp}"
      fi
    done
    abi_trio_iter="${abi_trio_tmp}"

    for abi_trio_flavor in ${abi_trio_iter}; do

      dnl Check if the user has requested a fallback
      tmp_trio_base_flavor=`echo "${abi_trio_flavor}" | cut -d- -f1`
      AC_MSG_CHECKING([whether to select a fallback for ${tmp_trio_base_flavor}])
      tmp_trio_fallback=`echo "${abi_trio_flavor}" | cut -s -d- -f2`
      if test "${tmp_trio_fallback}" = "fallback"; then
        tmp_trio_fallback="yes"
      else
        tmp_trio_fallback="no"
      fi
      AC_MSG_RESULT([${tmp_trio_fallback}])
      if test "${tmp_trio_fallback}" = "yes" -a \
              "${enable_fallbacks}" = "no"; then
        AC_MSG_ERROR([fallback requested while fallbacks have been globally disabled])
      fi

      dnl Look for TRIO libraries
      case "${abi_trio_flavor}" in

        etsf_io)
          if test "${abi_trio_netcdf_serial}" = "yes"; then
            abi_trio_etsf_io_prereqs="yes"
            _ABI_TRIO_CHECK_ETSF_IO
          else
            AC_MSG_WARN([ETSF_IO requires missing NetCDF support])
            if test "${abi_trio_netcdf_fallback}" != "yes"; then
              abi_trio_etsf_io_prereqs="no"
            fi
            abi_trio_etsf_io_serial="no"
            abi_trio_etsf_io_mpi="no"
          fi
          if test "${abi_trio_etsf_io_serial}" = "yes" -o \
                  "${enable_fallbacks}" = "yes"; then
            AC_DEFINE([HAVE_ETSF_IO],1,
              [Define to 1 if you have the ETSF_IO library.])
            abi_test_etsf_io="yes"
          fi
          if test "${abi_trio_etsf_io_serial}" = "yes"; then
            lib_etsf_io_incs="${abi_trio_etsf_io_incs}"
            lib_etsf_io_libs="${abi_trio_etsf_io_libs}"
          fi
          ;;

        etsf_io-fallback)
          if test "${abi_trio_netcdf_serial}" != "yes" -a \
                  "${abi_trio_netcdf_fallback}" != "yes"; then
            AC_MSG_WARN([ETSF_IO requires missing NetCDF support])
            abi_trio_etsf_io_prereqs="no"
            abi_trio_etsf_io_serial="no"
            abi_trio_etsf_io_mpi="no"
          fi
          ;;

        psml)
          _ABI_TRIO_CHECK_PSML
          if test "${abi_trio_psml_serial}" = "yes" -o \
                  "${enable_fallbacks}" = "yes"; then
            AC_DEFINE([HAVE_PSML],1,
              [Define to 1 if you have the PSML library.])
            abi_test_psml="yes"
          fi
          if test "${abi_trio_psml_serial}" = "yes"; then
            lib_psml_incs="${abi_trio_psml_incs}"
            lib_psml_libs="${abi_trio_psml_libs}"
          else
            ABI_MSG_NOTICE([connectors-failure],[Connector detection failure])
            AC_ERROR([no working version of psml has been found])
          fi
          ;;

        netcdf)
          _ABI_TRIO_CHECK_NETCDF
          if test "${abi_trio_netcdf_serial}" = "yes" -o \
                  "${enable_fallbacks}" = "yes"; then
            AC_DEFINE([HAVE_NETCDF],1,
              [Define to 1 if you have the NetCDF library.])
            abi_test_netcdf="yes"
          fi
          if test "${abi_trio_netcdf_serial}" = "yes"; then
            lib_netcdf_incs="${abi_trio_netcdf_incs}"
            lib_netcdf_libs="${abi_trio_netcdf_libs}"
          elif test "${enable_fallbacks}" = "yes"; then
            abi_trio_netcdf_fallback="yes"
          fi

          if test "${abi_trio_netcdf_mpi}" = "yes"; then
            AC_DEFINE([HAVE_NETCDF_MPI],1,
              [Define to 1 if you have MPI-IO support in the NetCDF library.])
          fi
          ;;

        yaml)
          _ABI_TRIO_CHECK_YAML
          if test "${abi_trio_yaml_serial}" = "yes"; then
            AC_DEFINE([HAVE_YAML],1,
              [Define to 1 if you have the YAML library.])
            abi_test_yaml="yes"
            lib_yaml_incs="${abi_trio_yaml_incs}"
            lib_yaml_libs="${abi_trio_yaml_libs}"
          else
            ABI_MSG_NOTICE([connectors-failure],[Connector detection failure])
            AC_MSG_ERROR([the YAML library is absent or unusable])
          fi
          ;;

        *)
          if test "${tmp_trio_fallback}" = "no"; then
            AC_MSG_ERROR([unknown transferable I/O flavor '${abi_trio_flavor}'])
          fi
          ;;

      esac

      dnl Rebuild actual flavor
      if test "${tmp_trio_fallback}" = "yes"; then
        eval abi_trio_${tmp_trio_base_flavor}_fallback="yes"
        abi_fallbacks="${abi_fallbacks} ${tmp_trio_base_flavor}"
        tmp_trio_flavor="${tmp_trio_flavor}+${abi_trio_flavor}"
        tmp_trio_prereqs=`eval echo \$\{abi_trio_${tmp_trio_base_flavor}_prereqs\}`
        if test "${tmp_trio_prereqs}" = "no"; then
          ABI_MSG_NOTICE([connectors-failure],[Connector detection failure])
          AC_MSG_ERROR([prerequisites for ${abi_trio_flavor} not found])
        fi
      else
        tmp_trio_prereqs=`eval echo \$\{abi_trio_${abi_trio_flavor}_prereqs\}`
        tmp_trio_serial=`eval echo \$\{abi_trio_${abi_trio_flavor}_serial\}`
        tmp_trio_libs=`eval echo \$\{with_${abi_trio_flavor}_libs\}`
        if test "${tmp_trio_serial}" = "no"; then
          if test "${tmp_trio_libs}" = "" -a "${tmp_trio_prereqs}" != "no"; then
            AC_MSG_WARN([falling back to internal ${abi_trio_flavor} version])
            abi_fallbacks="${abi_fallbacks} ${abi_trio_flavor}"
            tmp_trio_flavor="${tmp_trio_flavor}+${abi_trio_flavor}-fallback"
          else
            ABI_MSG_NOTICE([connectors-failure],[Connector detection failure])
            AC_MSG_ERROR([external ${abi_trio_flavor} support does not work])
          fi
        else
          tmp_trio_flavor="${tmp_trio_flavor}+${abi_trio_flavor}"
        fi
      fi

    done

  fi

  dnl Restore environment
  AC_LANG_POP([Fortran])
  LIBS="${abi_saved_LIBS}"
  ABI_ENV_RESTORE

  dnl Output final flavor
  lib_trio_flavor=`echo "${tmp_trio_flavor}" | sed -e 's/^\+//;s/\+[$]//'`
  if test "${lib_trio_flavor}" = ""; then
    lib_trio_flavor="none"
  fi
  AC_MSG_CHECKING([for the actual transferable I/O support])
  AC_MSG_RESULT([${lib_trio_flavor}])

  dnl Substitute variables needed for the use of the library
  AC_SUBST(lib_trio_flavor)
  AC_SUBST(lib_etsf_io_fcflags)
  AC_SUBST(lib_etsf_io_incs)
  AC_SUBST(lib_etsf_io_ldflags)
  AC_SUBST(lib_etsf_io_libs)
  AC_SUBST(lib_psml_fcflags)
  AC_SUBST(lib_psml_incs)
  AC_SUBST(lib_psml_ldflags)
  AC_SUBST(lib_psml_libs)
  AC_SUBST(lib_netcdf_fcflags)
  AC_SUBST(lib_netcdf_incs)
  AC_SUBST(lib_netcdf_ldflags)
  AC_SUBST(lib_netcdf_libs)
  AC_SUBST(lib_yaml_fcflags)
  AC_SUBST(lib_yaml_incs)
  AC_SUBST(lib_yaml_ldflags)
  AC_SUBST(lib_yaml_libs)
])
m4trace:config/m4/conn-triqs.m4:21: -1- AC_DEFUN([ABI_CONNECT_TRIQS], [
  dnl Init
  lib_triqs_incs=""
  lib_triqs_libs=""

  if test "${enable_triqs_v2_0}" = "yes" || test "${enable_triqs_v1_4}" = "yes"; then

    lib_triqs_incs="${with_triqs_incs}"
    lib_triqs_libs="${with_triqs_libs}"

    dnl FIXME: M4 code to detect external libraries should go here

  fi

  dnl Inform Automake
  AM_CONDITIONAL([DO_BUILD_67_TRIQS_EXT], [test "${enable_triqs_v2_0}" = "yes" || test "${enable_triqs_v1_4}" = "yes"])

  dnl Substitute variables
  AC_SUBST(lib_triqs_incs)
  AC_SUBST(lib_triqs_libs)
  AC_SUBST(lib_triqs_fcflags)
  AC_SUBST(lib_triqs_ldflags)

])
m4trace:config/m4/lang-c++.m4:23: -1- AC_DEFUN([_ABI_CHECK_CXX_COMPAQ], [
  dnl Do some sanity checking of the arguments
  m4_if([$1], , [AC_FATAL([$0: missing argument 1])])dnl

  dnl AC_MSG_CHECKING([if we are using the Compaq C++ compiler])
  cxx_info_string=`$1 -V 2>&1 | head -n 1`
  abi_result=`echo "${cxx_info_string}" | grep '^Compaq C++'`
  if test "${abi_result}" = ""; then
    abi_result="no"
    cxx_info_string=""
    abi_cxx_vendor="unknown"
    abi_cxx_version="unknown"
  else
    AC_DEFINE([CXX_COMPAQ],1,[Define to 1 if you are using the COMPAQ C++ compiler.])
    abi_cxx_vendor="compaq"
    abi_cxx_version=`echo "${cxx_info_string}" | grep '^Compiler Driver' | sed -e 's/Compiler Driver V//; s/-.*//'`
    if test "${abi_cxx_version}" = "${cxx_info_string}"; then
      abi_cxx_version="unknown"
    fi
    abi_result="yes"
  fi
  dnl AC_MSG_RESULT(${abi_result})
])
m4trace:config/m4/lang-c++.m4:56: -1- AC_DEFUN([_ABI_CHECK_CXX_GNU], [
  dnl Do some sanity checking of the arguments
  m4_if([$1], , [AC_FATAL([$0: missing argument 1])])dnl

  dnl AC_MSG_CHECKING([if we are using the GNU C++ compiler])
  cxx_info_string=`$1 --version 2>&1 | head -n 1`
  if test "${ac_cv_cxx_compiler_gnu}" != "yes"; then
    cxx_info_string=""
    abi_cxx_vendor="unknown"
    abi_cxx_version="unknown"
    abi_result="no"
  else
    AC_DEFINE([CXX_GNU],1,[Define to 1 if you are using the GNU C++ compiler.])
    abi_cxx_vendor="gnu"
    abi_cxx_version=`echo ${cxx_info_string} | sed -e 's/.*([[^)]]*) //; s/ .*//'`
    if test "${abi_cxx_version}" = "${cxx_info_string}"; then
      abi_result=`echo "${cxx_info_string}" | grep ' '`
      if test "${abi_result}" != ""; then
        abi_cxx_version="unknown"
      fi
    fi
    abi_result="yes"
  fi
  dnl AC_MSG_RESULT(${abi_result})
])
m4trace:config/m4/lang-c++.m4:91: -1- AC_DEFUN([_ABI_CHECK_CXX_IBM], [
  dnl Do some sanity checking of the arguments
  m4_if([$1], , [AC_FATAL([$0: missing argument 1])])dnl

  dnl AC_MSG_CHECKING([if we are using the IBM XL C++ compiler])
  cxx_info_string=`$1 -qversion 2>&1 | head -n 1`
  cxx_garbage=`$1 -qversion 2>&1 | wc -l | sed -e 's/ //g'`
  abi_result=`echo "${cc_info_string}" | grep 'IBM XL C/C++'`
  if test "${abi_result}" = ""; then
    abi_result=`echo "${cxx_info_string}" | grep 'IBM(R) XL C/C++'`
  fi
  if test "${abi_result}" = ""; then
    abi_result=`echo "${cxx_info_string}" | grep 'C for AIX'`
  fi
  if test "${abi_result}" = ""; then
    abi_result="no"
    cxx_info_string=""
    abi_cxx_vendor="unknown"
    abi_cxx_version="unknown"
    if test "${cxx_garbage}" -gt 50; then
      AC_DEFINE([CXX_IBM],1,[Define to 1 if you are using the IBM XL C++ compiler.])
      abi_cxx_vendor="ibm"
      abi_cxx_version="unknown"
      abi_result="yes"
    fi
  else
    AC_DEFINE([CXX_IBM],1,[Define to 1 if you are using the IBM XL C++ compiler.])
    abi_cxx_vendor="ibm"
    abi_cxx_version=`echo "${cxx_info_string}" | sed -e 's/.* V//; s/ .*//'`
    if test "${abi_cxx_version}" = "${cxx_info_string}"; then
      abi_cxx_version=`echo "${cxx_info_string}" | sed -e 's/C for AIX version //'`
    fi
    if test "${abi_cxx_version}" = "${cxx_info_string}"; then
      abi_cxx_version="unknown"
    fi
    abi_result="yes"
  fi
  dnl AC_MSG_RESULT(${abi_result})
])
m4trace:config/m4/lang-c++.m4:140: -1- AC_DEFUN([_ABI_CHECK_CXX_INTEL], [
  dnl Do some sanity checking of the arguments
  m4_if([$1], , [AC_FATAL([$0: missing argument 1])])dnl

  dnl AC_MSG_CHECKING([if we are using the Intel C++ compiler])
  cxx_info_string=`$1 -v -V 2>&1 | head -n 1`
  abi_result=`echo "${cxx_info_string}" | grep '^Intel(R) C++'`
  if test "${abi_result}" = ""; then
    abi_result="no"
    cxx_info_string=""
    abi_cxx_vendor="unknown"
    abi_cxx_version="unknown"
  else
    AC_DEFINE([CXX_INTEL],1,[Define to 1 if you are using the Intel C++ compiler.])
    abi_cxx_vendor="intel"
    abi_cxx_version=`echo "${abi_result}" | sed -e 's/.*Version //; s/ .*//'`
    if test "${abi_cxx_version}" = "${abi_result}"; then
      abi_cxx_version="unknown"
    fi
    abi_result="yes"
  fi
  dnl AC_MSG_RESULT(${abi_result})
])
m4trace:config/m4/lang-c++.m4:172: -1- AC_DEFUN([_ABI_CHECK_CXX_OPEN64], [
  dnl Do some sanity checking of the arguments
  m4_if([$1], , [AC_FATAL([$0: missing argument 1])])dnl

  dnl AC_MSG_CHECKING([if we are using the Open64 C++ compiler])
  cxx_info_string=`$1 --version 2>&1 | head -n 1`
  abi_result=`echo "${cxx_info_string}" | grep '^Open64'`
  if test "${abi_result}" = ""; then
    abi_result="no"
    cxx_info_string=""
    abi_cxx_vendor="unknown"
    abi_cxx_version="unknown"
  else
    AC_DEFINE([CXX_OPEN64],1,[Define to 1 if you are using the Open64 C++ compiler.])
    abi_cxx_vendor="open64"
    abi_cxx_version=`echo "${abi_result}" | sed -e 's/.* Version //; s/ .*//'`
    if test "${abi_cxx_version}" = "${abi_result}"; then
      abi_cxx_version="unknown"
    fi
    abi_result="yes"
  fi
  dnl AC_MSG_RESULT(${abi_result})
])
m4trace:config/m4/lang-c++.m4:203: -1- AC_DEFUN([_ABI_CHECK_CXX_PATHSCALE], [
  dnl Do some sanity checking of the arguments
  m4_if([$1], , [AC_FATAL([$0: missing argument 1])])dnl

  dnl AC_MSG_CHECKING([if we are using the PathScale C++ compiler])
  cxx_info_string=`$1 --version 2>&1 | head -n 1`
  abi_result=`echo "${cxx_info_string}" | grep '^PathScale'`
  if test "${abi_result}" = ""; then
    abi_result="no"
    cxx_info_string=""
    abi_cxx_vendor="unknown"
    abi_cxx_version="unknown"
  else
    AC_DEFINE([CXX_PATHSCALE],1,[Define to 1 if you are using the PathScale C++ compiler.])
    abi_cxx_vendor="pathscale"
    abi_cxx_version=`echo "${abi_result}" | sed -e 's/.* Version //; s/ .*//'`
    if test "${abi_cxx_version}" = "${abi_result}"; then
      abi_cxx_version="unknown"
    fi
    abi_result="yes"
  fi
  dnl AC_MSG_RESULT(${abi_result})
])
m4trace:config/m4/lang-c++.m4:236: -1- AC_DEFUN([_ABI_CHECK_CXX_PGI], [
  dnl Do some sanity checking of the arguments
  m4_if([$1], , [AC_FATAL([$0: missing argument 1])])dnl

  dnl AC_MSG_CHECKING([if we are using the Portland Group C++ compiler])
  cxx_info_string=`$1 -v -V 2>&1 | sed -e '/^$/d' | head -n 1`
  abi_result=`echo "${cxx_info_string}" | grep '^pgCC'`
  if test "${abi_result}" = ""; then
    abi_result="no"
    cxx_info_string=""
    abi_cxx_vendor="unknown"
    abi_cxx_version="unknown"
  else
    AC_DEFINE([CXX_PGI],1,[Define to 1 if you are using the Portland Group C++ compiler.])
    abi_cxx_vendor="pgi"
    abi_cxx_version=`echo "${abi_result}" | sed -e 's/.* //; s/-.*//'`
    if test "${abi_cxx_version}" = "${abi_result}"; then
      abi_cxx_version="unknown"
    fi
    abi_result="yes"
  fi
  dnl AC_MSG_RESULT(${abi_result})
])
m4trace:config/m4/lang-c++.m4:269: -1- AC_DEFUN([_ABI_CHECK_CXX_SUN], [
  dnl Do some sanity checking of the arguments
  m4_if([$1], , [AC_FATAL([$0: missing argument 1])])dnl

  dnl AC_MSG_CHECKING([if we are using the Sun C++ compiler])
  cxx_info_string=`$1 -V 2>&1 | head -n 1`
  abi_result=`echo "${cxx_info_string}" | grep 'Sun' | grep ' C++ '`
  if test "${abi_result}" = ""; then
    abi_result="no"
    cxx_info_string=""
    abi_cxx_vendor="unknown"
    abi_cxx_version="unknown"
  else
    AC_DEFINE([CXX_SUN],1,[Define to 1 if you are using the Sun C++ compiler.])
    abi_cxx_vendor="sun"
    abi_cxx_version=`echo "${abi_result}" | sed -e 's/.* C++ //; s/ .*//'`
    if test "${abi_cxx_version}" = "${abi_result}"; then
      abi_cxx_version="unknown"
    fi
    abi_result="yes"
  fi
  dnl AC_MSG_RESULT(${abi_result})
])
m4trace:config/m4/lang-c++.m4:300: -1- AC_DEFUN([ABI_PROG_CXX], [
  dnl Init
  if test "${abi_cxx_vendor}" = ""; then
    abi_cxx_vendor="unknown"
  fi

  dnl Determine C++ compiler type (the order is important)
  AC_MSG_CHECKING([which type of C++ compiler we have])

  dnl Get rid of that one as early as possible
  if test "${abi_cxx_vendor}" = "unknown"; then
    _ABI_CHECK_CXX_IBM(${CXX})
  fi

  if test "${abi_cxx_vendor}" = "unknown"; then
    _ABI_CHECK_CXX_COMPAQ(${CXX})
  fi
  if test "${abi_cxx_vendor}" = "unknown"; then
    _ABI_CHECK_CXX_INTEL(${CXX})
  fi
  if test "${abi_cxx_vendor}" = "unknown"; then
    _ABI_CHECK_CXX_OPEN64(${CXX})
  fi
  if test "${abi_cxx_vendor}" = "unknown"; then
    _ABI_CHECK_CXX_PATHSCALE(${CXX})
  fi
  if test "${abi_cxx_vendor}" = "unknown"; then
    _ABI_CHECK_CXX_PGI(${CXX})
  fi
  if test "${abi_cxx_vendor}" = "unknown"; then
    _ABI_CHECK_CXX_SUN(${CXX})
  fi

  dnl Check the GNU compiler last, because other compilers are cloning
  dnl its CLI
  if test "${abi_cxx_vendor}" = "unknown"; then
    _ABI_CHECK_CXX_GNU(${CXX})
  fi

  dnl Fall back to generic when detection fails
  if test "${abi_cxx_vendor}" = "unknown"; then
    abi_cxx_vendor="generic"
    abi_cxx_version="0.0"
  fi

  dnl Normalize C++ compiler version
  abi_cxx_version=`echo ${abi_cxx_version} | cut -d. -f1-2`

  dnl Display final result
  AC_MSG_RESULT([${abi_cxx_vendor} ${abi_cxx_version}])

  dnl Schedule compiler info for substitution
  AC_SUBST(abi_cxx_vendor)
  AC_SUBST(abi_cxx_version)
  AC_SUBST(cxx_info_string)
])
m4trace:config/m4/lang-c.m4:23: -1- AC_DEFUN([_ABI_CHECK_CC_COMPAQ], [
  dnl Do some sanity checking of the arguments
  m4_if([$1], , [AC_FATAL([$0: missing argument 1])])dnl

  dnl AC_MSG_CHECKING([if we are using the Compaq C compiler])
  cc_info_string=`$1 -V 2>&1 | head -n 1`
  abi_result=`echo "${cc_info_string}" | grep '^Compaq C '`
  if test "${abi_result}" = ""; then
    abi_result="no"
    cc_info_string=""
    abi_cc_vendor="unknown"
    abi_cc_version="unknown"
  else
    AC_DEFINE([CC_COMPAQ],1,[Define to 1 if you are using the COMPAQ C compiler.])
    abi_cc_vendor="compaq"
    cc_info_string=`$1 -V 2>&1 | grep '^Compiler Driver' | head -n 1`
    abi_cc_version=`echo "${cc_info_string}" | sed -e 's/Compiler Driver V//; s/ .*//'`
    if test "${abi_cc_version}" = "${cc_info_string}"; then
      abi_cc_version="unknown"
    fi
    abi_result="yes"
  fi
  dnl AC_MSG_RESULT(${abi_result})
])
m4trace:config/m4/lang-c.m4:59: -1- AC_DEFUN([_ABI_CHECK_CC_GNU], [
  dnl Do some sanity checking of the arguments
  m4_if([$1], , [AC_FATAL([$0: missing argument 1])])dnl

  dnl AC_MSG_CHECKING([if we are using the GNU C compiler])
  cc_info_string=`$1 --version 2>&1 | ${EGREP} '^g?cc' | head -n 1`
  if test "${ac_cv_c_compiler_gnu}" != "yes"; then
    abi_cc_vendor="unknown"
    abi_cc_version="unknown"
    abi_result="no"
  else
    AC_DEFINE([CC_GNU],1,[Define to 1 if you are using the GNU C compiler.])
    abi_cc_vendor="gnu"
    abi_cc_version=`echo ${cc_info_string} | sed -e 's/.*([[^)]]*) //; s/ .*//'`
    if test "${abi_cc_version}" = "${cc_info_string}"; then
      abi_result=`echo "${cc_info_string}" | grep ' '`
      if test "${abi_result}" != ""; then
        abi_cc_version="unknown"
      fi
    fi
    abi_result="yes"
  fi
  dnl AC_MSG_RESULT(${abi_result})
])
m4trace:config/m4/lang-c.m4:93: -1- AC_DEFUN([_ABI_CHECK_CC_IBM], [
  dnl Do some sanity checking of the arguments
  m4_if([$1], , [AC_FATAL([$0: missing argument 1])])dnl

  dnl AC_MSG_CHECKING([if we are using the IBM XL C compiler])
  cc_info_string=`$1 -qversion 2>&1 | head -n 1`
  cc_garbage=`$1 -qversion 2>&1 | wc -l | sed -e 's/ //g'`
  abi_result=`echo "${cc_info_string}" | grep 'IBM XL C/C++'`
  if test "${abi_result}" = ""; then
    abi_result=`echo "${cc_info_string}" | grep 'IBM(R) XL C/C++'`
  fi
  if test "${abi_result}" = ""; then
    abi_result=`echo "${cc_info_string}" | grep 'C for AIX'`
  fi
  if test "${abi_result}" = ""; then
    abi_result="no"
    cc_info_string=""
    abi_cc_vendor="unknown"
    abi_cc_version="unknown"
    if test "${cc_garbage}" -gt 50; then
      AC_DEFINE([CC_IBM],1,[Define to 1 if you are using the IBM XL C compiler.])
      abi_cc_vendor="ibm"
      abi_cc_version="unknown"
      abi_result="yes"
    fi
  else
    AC_DEFINE([CC_IBM],1,[Define to 1 if you are using the IBM XL C compiler.])
    abi_cc_vendor="ibm"
    abi_cc_version=`echo "${abi_result}" | sed -e 's/.* V//; s/ .*//'`
    if test "${abi_cc_version}" = "${abi_result}"; then
      abi_cc_version=`echo "${abi_result}" | sed -e 's/C for AIX version //'`
    fi
    if test "${abi_cc_version}" = "${abi_result}"; then
      abi_cc_version="unknown"
    fi
    abi_result="yes"
  fi
  dnl AC_MSG_RESULT(${abi_result})
])
m4trace:config/m4/lang-c.m4:142: -1- AC_DEFUN([_ABI_CHECK_CC_INTEL], [
  dnl Do some sanity checking of the arguments
  m4_if([$1], , [AC_FATAL([$0: missing argument 1])])dnl

  dnl AC_MSG_CHECKING([if we are using the Intel C compiler])
  cc_info_string=`$1 -V 2>&1 | head -n 1`
  abi_result=`echo "${cc_info_string}" | grep '^Intel(R) C'`
  if test "${abi_result}" = ""; then
    abi_result="no"
    cc_info_string=""
    abi_cc_vendor="unknown"
    abi_cc_version="unknown"
  else
    AC_DEFINE([CC_INTEL],1,[Define to 1 if you are using the Intel C compiler.])
    abi_cc_vendor="intel"
    abi_cc_version=`echo "${abi_result}" | sed -e 's/.*Version //; s/ .*//'`
    if test "${abi_cc_version}" = "${abi_result}"; then
      abi_cc_version="unknown"
    fi
    abi_result="yes"
  fi
  dnl AC_MSG_RESULT(${abi_result})
])
m4trace:config/m4/lang-c.m4:175: -1- AC_DEFUN([_ABI_CHECK_CC_PATHSCALE], [
  dnl Do some sanity checking of the arguments
  m4_if([$1], , [AC_FATAL([$0: missing argument 1])])dnl

  dnl AC_MSG_CHECKING([if we are using the PathScale C compiler])
  cc_info_string=`$1 --version 2>&1 | head -n 1`
  abi_result=`echo "${cc_info_string}" | grep '^PathScale'`
  if test "${abi_result}" = ""; then
    abi_result="no"
    cc_info_string=""
    abi_cc_vendor="unknown"
    abi_cc_version="unknown"
  else
    AC_DEFINE([CC_PATHSCALE],1,[Define to 1 if you are using the PathScale C compiler.])
    abi_cc_vendor="pathscale"
    abi_cc_version=`echo "${abi_result}" | sed -e 's/.* Version //; s/ .*//'`
    if test "${abi_cc_version}" = "${abi_result}"; then
      abi_cc_version="unknown"
    fi
    abi_result="yes"
  fi
  dnl AC_MSG_RESULT(${abi_result})
])
m4trace:config/m4/lang-c.m4:207: -1- AC_DEFUN([_ABI_CHECK_CC_OPEN64], [
  dnl Do some sanity checking of the arguments
  m4_if([$1], , [AC_FATAL([$0: missing argument 1])])dnl

  dnl AC_MSG_CHECKING([if we are using the Open64 C compiler])
  cc_info_string=`$1 --version 2>&1 | head -n 1`
  abi_result=`echo "${cc_info_string}" | grep '^Open64'`
  if test "${abi_result}" = ""; then
    abi_result="no"
    cc_info_string=""
    abi_cc_vendor="unknown"
    abi_cc_version="unknown"
  else
    AC_DEFINE([CC_OPEN64],1,[Define to 1 if you are using the Open64 C compiler.])
    abi_cc_vendor="open64"
    abi_cc_version=`echo "${abi_result}" | sed -e 's/.* Version //; s/ .*//'`
    if test "${abi_cc_version}" = "${abi_result}"; then
      abi_cc_version="unknown"
    fi
    abi_result="yes"
  fi
  dnl AC_MSG_RESULT(${abi_result})
])
m4trace:config/m4/lang-c.m4:238: -1- AC_DEFUN([_ABI_CHECK_CC_PGI], [
  dnl Do some sanity checking of the arguments
  m4_if([$1], , [AC_FATAL([$0: missing argument 1])])dnl

  dnl AC_MSG_CHECKING([if we are using the PGI C compiler])
  cc_info_string=`$1 -V 2>&1 | sed -e '/^$/d' | head -n 1`
  abi_result=`echo "${cc_info_string}" | grep '^pgcc'`
  if test "${abi_result}" = ""; then
    abi_result="no"
    cc_info_string=""
    abi_cc_vendor="unknown"
    abi_cc_version="unknown"
  else
    AC_DEFINE([CC_PGI],1,[Define to 1 if you are using the Portland Group C compiler.])
    abi_cc_vendor="pgi"
    abi_cc_version=`echo "${abi_result}" | sed -e 's/.* //; s/-.*//'`
    if test "${abi_cc_version}" = "${abi_result}"; then
      abi_cc_version="unknown"
    fi
    abi_result="yes"
  fi
  dnl AC_MSG_RESULT(${abi_result})
])
m4trace:config/m4/lang-c.m4:271: -1- AC_DEFUN([_ABI_CHECK_CC_SUN], [
  dnl Do some sanity checking of the arguments
  m4_if([$1], , [AC_FATAL([$0: missing argument 1])])dnl

  dnl AC_MSG_CHECKING([if we are using the Sun C compiler])
  cc_info_string=`$1 -V 2>&1 | head -n 1`
  abi_result=`echo "${cc_info_string}" | grep 'Sun' | grep ' C '`
  if test "${abi_result}" = ""; then
    abi_result="no"
    cc_info_string=""
    abi_cc_vendor="unknown"
    abi_cc_version="unknown"
  else
    AC_DEFINE([CC_SUN],1,[Define to 1 if you are using the Sun C compiler.])
    abi_cc_vendor="sun"
    abi_cc_version=`echo "${abi_result}" | sed -e 's/.* C //; s/ .*//'`
    if test "${abi_cc_version}" = "${abi_result}"; then
      abi_cc_version="unknown"
    fi
    abi_result="yes"
  fi
  dnl AC_MSG_RESULT(${abi_result})
])
m4trace:config/m4/lang-c.m4:306: -1- AC_DEFUN([_ABI_CHECK_CC_HEADERS], [
  dnl Init AC_MSG_CHECKING([for C header files])
  
  dnl The following line causes trouble to aclocal
  dnl AC_HEADER_STDC
  AC_CHECK_HEADERS([stddef.h stdarg.h])
  dnl AC_CHECK_HEADERS([stdlib.h])
  AC_CHECK_HEADERS([stdio.h math.h termios.h])
  AC_CHECK_HEADERS([errno.h])
  AC_CHECK_HEADERS([malloc.h sys/malloc.h])
  AC_CHECK_HEADERS([mcheck.h])
  AC_CHECK_HEADERS([sys/time.h])
  AC_CHECK_HEADERS([sys/resource.h])
  dnl AC_CHECK_HEADERS([sys/ioctl.h sys/sysctl.h])
  dnl AC_CHECK_HEADERS([sys/stat.h])
  dnl AC_CHECK_HEADERS([string.h])
  dnl AC_CHECK_HEADERS([strings.h])
  dnl AC_CHECK_HEADERS([unistd.h])
  dnl AC_CHECK_HEADERS([limits.h])

])
m4trace:config/m4/lang-c.m4:335: -1- AC_DEFUN([_ABI_CHECK_CC_FUNCTIONS], [
  dnl Init AC_MSG_CHECKING([for library functions])

  dnl AC_CHECK_FUNCS([BSDgettimeofday gettimeofday gethrtime]) 
  AC_CHECK_FUNCS([abort])
  AC_CHECK_FUNCS([mallinfo])

])
m4trace:config/m4/lang-c.m4:351: -1- AC_DEFUN([_ABI_CHECK_CC_FEATURES], [
  dnl Init AC_MSG_CHECKING([for C compiler characteristics])

  AC_CHECK_SIZEOF(char)
  AC_CHECK_SIZEOF(short)
  AC_CHECK_SIZEOF(int)
  AC_CHECK_SIZEOF(long)
  AC_CHECK_SIZEOF(long long)
  AC_CHECK_SIZEOF(unsigned int)
  AC_CHECK_SIZEOF(unsigned long)
  AC_CHECK_SIZEOF(unsigned long long)
  AC_CHECK_SIZEOF(float)
  AC_CHECK_SIZEOF(double)
  AC_CHECK_SIZEOF(long double)
  AC_CHECK_SIZEOF(size_t)
  AC_CHECK_SIZEOF(ptrdiff_t)

  AC_C_CONST
  AC_TYPE_SIZE_T
  dnl AC_TYPE_PID_T

])
m4trace:config/m4/lang-c.m4:385: -1- AC_DEFUN([ABI_CC_FEATURES], [
  dnl Explore compiler peculiarities
  _ABI_CHECK_CC_HEADERS
  _ABI_CHECK_CC_FUNCTIONS
  _ABI_CHECK_CC_FEATURES
])
m4trace:config/m4/lang-c.m4:399: -1- AC_DEFUN([ABI_PROG_CC], [
  dnl Init
  if test "${abi_cc_vendor}" = ""; then
    abi_cc_vendor="unknown"
  fi

  dnl Determine C compiler type (the order is important)
  AC_MSG_CHECKING([which type of compiler we have])

  dnl Always get rid of that one as early as possible
  if test "${abi_cc_vendor}" = "unknown"; then
    _ABI_CHECK_CC_IBM(${CC})
  fi

  if test "${abi_cc_vendor}" = "unknown"; then
    _ABI_CHECK_CC_COMPAQ(${CC})
  fi
  if test "${abi_cc_vendor}" = "unknown"; then
    _ABI_CHECK_CC_INTEL(${CC})
  fi
  if test "${abi_cc_vendor}" = "unknown"; then
    _ABI_CHECK_CC_PATHSCALE(${CC})
  fi
  if test "${abi_cc_vendor}" = "unknown"; then
    _ABI_CHECK_CC_OPEN64(${CC})
  fi
  if test "${abi_cc_vendor}" = "unknown"; then
    _ABI_CHECK_CC_PGI(${CC})
  fi
  if test "${abi_cc_vendor}" = "unknown"; then
    _ABI_CHECK_CC_SUN(${CC})
  fi

  dnl Check the GNU compiler last, because other compilers are cloning
  dnl its CLI
  if test "${abi_cc_vendor}" = "unknown"; then
    _ABI_CHECK_CC_GNU(${CC})
  fi

  dnl Fall back to generic when detection fails
  if test "${abi_cc_vendor}" = "unknown"; then
    abi_cc_vendor="generic"
    abi_cc_version="0.0"
  fi

  dnl Normalize C compiler version
  abi_cc_version=`echo ${abi_cc_version} | cut -d. -f1-2`

  dnl Display final result
  AC_MSG_RESULT([${abi_cc_vendor} ${abi_cc_version}])

  dnl Schedule compiler info for substitution
  AC_SUBST(abi_cc_vendor)
  AC_SUBST(abi_cc_version)
  AC_SUBST(cc_info_string)
])
m4trace:config/m4/lang-fortran-import.m4:28: -1- AC_DEFUN([AX_F90_MODULE_EXTENSION], [
AC_CACHE_CHECK([fortran 90 modules extension],
ax_cv_f90_modext,
[AC_LANG_PUSH(Fortran)
i=0
while test \( -f tmpdir_$i \) -o \( -d tmpdir_$i \) ; do
    i=`expr $i + 1`
done
mkdir tmpdir_$i
cd tmpdir_$i
AC_COMPILE_IFELSE([
!234567
            module conftest_module
            contains
            subroutine conftest_routine
            write(*,'(a)') 'gotcha!'
            end subroutine conftest_routine
            end module conftest_module
    ],
    [ax_cv_f90_modext=`ls | sed -n 's,conftest_module\.,,p'`
      if test x$ax_cv_f90_modext = x ; then
dnl Some F90 compilers put module filename in uppercase letters
          ax_cv_f90_modext=`ls | sed -n 's,CONFTEST_MODULE\.,,p'`
          if test x$ax_cv_f90_modext = x ; then
              ax_cv_f90_modext=""
          fi
      fi
    ],
    [ax_cv_f90_modext=""])
cd ..
rm -fr tmpdir_$i
AC_LANG_POP(Fortran)
])])
m4trace:config/m4/lang-fortran.m4:23: -1- AC_DEFUN([_ABI_CHECK_FC_ABSOFT], [
  dnl Do some sanity checking of the arguments
  m4_if([$1], , [AC_FATAL([$0: missing argument 1])])dnl

  dnl AC_MSG_CHECKING([if we are using the ABSoft Fortran compiler])
  fc_info_string=`$1 -V 2>/dev/null | head -n 1`
  abi_result=`echo "${fc_info_string}" | grep '^Pro Fortran'`
  if test "${abi_result}" = ""; then
    abi_result="no"
    fc_info_string=""
    abi_fc_vendor="unknown"
    abi_fc_version="unknown"
  else
    AC_DEFINE([FC_ABSOFT],1,
      [Define to 1 if you are using the ABSOFT Fortran compiler.])
    abi_fc_vendor="absoft"
    abi_fc_version=`echo "${abi_result}" | sed -e 's/Pro Fortran //'`
    if test "${abi_fc_version}" = "${abi_result}"; then
      abi_fc_version="unknown"
    fi
    abi_result="yes"
  fi
  dnl AC_MSG_RESULT(${abi_result})
])
m4trace:config/m4/lang-fortran.m4:57: -1- AC_DEFUN([_ABI_CHECK_FC_COMPAQ], [
  dnl Do some sanity checking of the arguments
  m4_if([$1], , [AC_FATAL([$0: missing argument 1])])dnl

  dnl AC_MSG_CHECKING([if we are using the Compaq Fortran compiler])
  fc_info_string=`$1 -version 2>&1 | sed -e 's/^	//' | grep '^Compaq Fortran Compiler'`
  abi_result="${fc_info_string}"
  if test "${abi_result}" = ""; then
    fc_info_string=`$1 -version 2>&1 | sed -e 's/^	//' | grep '^HP Fortran Compiler'`
    abi_result="${fc_info_string}"
  fi
  if test "${abi_result}" = ""; then
    abi_result="no"
    fc_info_string=""
    abi_fc_vendor="unknown"
    abi_fc_version="unknown"
  else
    AC_DEFINE([FC_COMPAQ],1,
      [Define to 1 if you are using the COMPAQ Fortran compiler.])
    abi_fc_vendor="compaq"
    abi_fc_version=`echo "${abi_result}" | sed -e 's/.* V//;s/-.*//'`
    if test "${abi_fc_version}" = "${abi_result}"; then
      abi_fc_version="unknown"
    fi
    abi_result="yes"
  fi
  dnl AC_MSG_RESULT(${abi_result})
])
m4trace:config/m4/lang-fortran.m4:95: -1- AC_DEFUN([_ABI_CHECK_FC_FUJITSU], [
  dnl Do some sanity checking of the arguments
  m4_if([$1], , [AC_FATAL([$0: missing argument 1])])dnl

  dnl AC_MSG_CHECKING([if we are using the Fujitsu Fortran compiler])
  fc_info_string=`$1 -V 2>/dev/null | head -n 1`
  abi_result=`echo "${fc_info_string}" | grep '^Fujitsu Fortran'`
  if test "${abi_result}" = ""; then
    abi_result="no"
    fc_info_string=""
    abi_fc_vendor="unknown"
    abi_fc_version="unknown"
  else
    AC_DEFINE([FC_FUJITSU],1,
      [Define to 1 if you are using the Fujitsu Fortran compiler.])
    abi_fc_vendor="fujitsu"
    abi_fc_version=`echo "${abi_result}" | sed -e 's/.*Driver //;s/ .*//'`
    if test "${abi_fc_version}" = "${abi_result}"; then
      abi_fc_version="unknown"
    fi
    abi_result="yes"
  fi
  dnl AC_MSG_RESULT(${abi_result})
])
m4trace:config/m4/lang-fortran.m4:129: -1- AC_DEFUN([_ABI_CHECK_FC_G95], [
  dnl Do some sanity checking of the arguments
  m4_if([$1], , [AC_FATAL([$0: missing argument 1])])dnl

  dnl AC_MSG_CHECKING([if we are using the G95 Fortran compiler])
  fc_info_string=`$1 --version 2>/dev/null | head -n 1`
  abi_result=`echo "${fc_info_string}" | grep '^G95'`
  if test "${abi_result}" = ""; then
    abi_result="no"
    fc_info_string=""
    abi_fc_vendor="unknown"
    abi_fc_version="unknown"
  else
    AC_DEFINE([FC_G95],1,
      [Define to 1 if you are using the G95 Fortran compiler.])
    abi_fc_vendor="g95"
    abi_fc_version=`echo ${abi_result} | sed -e 's/.*GCC //; s/ .*//'`
    if test "${abi_fc_version}" = "${abi_result}"; then
      abi_fc_version="unknown"
    fi
    abi_result="yes"
  fi
  dnl AC_MSG_RESULT(${abi_result})
])
m4trace:config/m4/lang-fortran.m4:163: -1- AC_DEFUN([_ABI_CHECK_FC_GNU], [
  dnl Do some sanity checking of the arguments
  m4_if([$1], , [AC_FATAL([$0: missing argument 1])])dnl

  dnl AC_MSG_CHECKING([if we are using the GNU Fortran compiler])
  fc_info_string=`$1 --version 2>/dev/null | head -n 1`
  abi_result=`echo "${fc_info_string}" | grep '^GNU Fortran'`
  if test "${abi_result}" = ""; then
    abi_result="no"
    fc_info_string=""
    abi_fc_vendor="unknown"
    abi_fc_version="unknown"
  else
    AC_DEFINE([FC_GNU],1,
      [Define to 1 if you are using the GNU Fortran compiler.])
    AC_DEFINE([HAVE_FORTRAN2003],1,
      [Define to 1 if your Fortran compiler supports Fortran 2003.])
    abi_fc_vendor="gnu"
    abi_fc_version=`echo ${abi_result} | sed -e 's/^[[^(]]*([[^)]]*) //; s/ .*//'`
    abi_result="yes"
  fi
  dnl AC_MSG_RESULT(${abi_result})
])
m4trace:config/m4/lang-fortran.m4:196: -1- AC_DEFUN([_ABI_CHECK_FC_HITACHI], [
  dnl Do some sanity checking of the arguments
  m4_if([$1], , [AC_FATAL([$0: missing argument 1])])dnl

  dnl AC_MSG_CHECKING([if we are using the Hitachi Fortran compiler])
  fc_info_string=`$1 -V 2>/dev/null | head -n 1`
  abi_result=`echo "${fc_info_string}" | grep '^Hitachi Fortran'`
  if test "${abi_result}" = ""; then
    abi_result="no"
    fc_info_string=""
    abi_fc_vendor="unknown"
    abi_fc_version="unknown"
  else
    AC_DEFINE([FC_HITACHI],1,
      [Define to 1 if you are using the Hitachi Fortran compiler.])
    abi_fc_vendor="hitachi"
    abi_fc_version=`echo "${abi_result}" | sed -e 's/.*Driver //;s/ .*//'`
    if test "${abi_fc_version}" = "${abi_result}"; then
      abi_fc_version="unknown"
    fi
    abi_result="yes"
  fi
  dnl AC_MSG_RESULT(${abi_result})
])
m4trace:config/m4/lang-fortran.m4:230: -1- AC_DEFUN([_ABI_CHECK_FC_IBM], [
  dnl Do some sanity checking of the arguments
  m4_if([$1], , [AC_FATAL([$0: missing argument 1])])dnl

  dnl AC_MSG_CHECKING([if we are using the IBM XL Fortran compiler])
  fc_info_string=`$1 -qversion 2>&1 | head -n 1`
  fc_garbage=`$1 -qversion 2>&1 | wc -l | sed -e 's/ //g'`
  abi_result=`echo "${fc_info_string}" | grep 'IBM XL Fortran'`
  if test "${abi_result}" = ""; then
    abi_result=`echo "${fc_info_string}" | grep 'IBM(R) XL Fortran'`
  fi
  if test "${abi_result}" = ""; then
    abi_result="no"
    fc_info_string=""
    abi_fc_vendor="unknown"
    abi_fc_version="unknown"
    if test "${fc_garbage}" -gt 50; then
      AC_DEFINE([FC_IBM],1,
        [Define to 1 if you are using the IBM XL Fortran compiler.])
      abi_fc_vendor="ibm"
      abi_fc_version="unknown"
      abi_result="yes"
    fi
  else
    AC_DEFINE([FC_IBM],1,
      [Define to 1 if you are using the IBM XL Fortran compiler.])
    abi_fc_vendor="ibm"
    abi_fc_version=`echo "${abi_result}" | sed -e 's/.* V//; s/ .*//'`
    if test "${abi_fc_version}" = "${abi_result}"; then
      abi_fc_version="unknown"
    fi
    abi_result="yes"
  fi
  dnl AC_MSG_RESULT(${abi_result})
])
m4trace:config/m4/lang-fortran.m4:275: -1- AC_DEFUN([_ABI_CHECK_FC_INTEL], [
  dnl Do some sanity checking of the arguments
  m4_if([$1], , [AC_FATAL([$0: missing argument 1])])dnl

  dnl AC_MSG_CHECKING([if we are using the Intel Fortran compiler])
  fc_info_string=`$1 -V 2>&1 | head -n 1`
  abi_result=`echo "${fc_info_string}" | grep '^Intel(R) Fortran'`
  if test "${abi_result}" = ""; then
    abi_result="no"
    fc_info_string=""
    abi_fc_vendor="unknown"
    abi_fc_version="unknown"
  else
    AC_DEFINE([FC_INTEL],1,
      [Define to 1 if you are using the Intel Fortran compiler.])
    abi_fc_vendor="intel"
    abi_fc_version=`echo "${fc_info_string}" | sed -e 's/.*Version //;s/ .*//'`
    if test "${abi_fc_version}" = ""; then
      abi_fc_version="unknown"
    fi
    abi_result="yes"
  fi
  dnl AC_MSG_RESULT(${abi_result})
])
m4trace:config/m4/lang-fortran.m4:310: -1- AC_DEFUN([_ABI_CHECK_FC_MIPSPRO], [
  dnl Do some sanity checking of the arguments
  m4_if([$1], , [AC_FATAL([$0: missing argument 1])])dnl

  dnl AC_MSG_CHECKING([if we are using the MIPSpro Fortran compiler])
  fc_info_string=`$1 -version 2>&1 | head -n 1`
  abi_result=`echo "${fc_info_string}" | grep '^MIPSpro'`
  if test "${abi_result}" = ""; then
    abi_result="no"
    fc_info_string=""
    abi_fc_vendor="unknown"
    abi_fc_version="unknown"
  else
    AC_DEFINE([FC_MIPSPRO],1,
      [Define to 1 if you are using the MIPSpro Fortran compiler.])
    abi_fc_vendor="mipspro"
    abi_fc_version=`echo "${abi_result}" | sed -e 's/.*Version //'`
    if test "${abi_fc_version}" = "${abi_result}"; then
      abi_fc_version="unknown"
    fi
    abi_result="yes"
  fi
  dnl AC_MSG_RESULT(${abi_result})
])
m4trace:config/m4/lang-fortran.m4:344: -1- AC_DEFUN([_ABI_CHECK_FC_NAG], [
  dnl Do some sanity checking of the arguments
  m4_if([$1], , [AC_FATAL([$0: missing argument 1])])dnl

  dnl AC_MSG_CHECKING([if we are using the NAGWare Fortran 95 compiler])
  fc_info_string=`$1 -V 2>&1 | head -n 1`
  abi_result=`echo "${fc_info_string}" | grep '^NAG'`
  if test "${abi_result}" = ""; then
    abi_result="no"
    fc_info_string=""
    abi_fc_vendor="unknown"
    abi_fc_version="unknown"
  else
    AC_DEFINE([FC_NAG],1,
      [Define to 1 if you are using the NAGWare Fortran 95 compiler.])
    abi_fc_vendor="nag"
    abi_fc_version=`echo "${fc_info_string}" | sed -e 's/.*Release //;s/[[( ]].*//'`
    if test "${abi_fc_version}" = ""; then
      abi_fc_version="unknown"
    fi
    abi_result="yes"
  fi
  dnl AC_MSG_RESULT(${abi_result})
])
m4trace:config/m4/lang-fortran.m4:379: -1- AC_DEFUN([_ABI_CHECK_FC_OPEN64], [
  dnl Do some sanity checking of the arguments
  m4_if([$1], , [AC_FATAL([$0: missing argument 1])])dnl

  dnl AC_MSG_CHECKING([if we are using the Open64 Fortran compiler])
  fc_info_string=`$1 --version 2>&1 | head -n 1`
  abi_result=`echo "${fc_info_string}" | grep '^Open64'`
  if test "${abi_result}" = ""; then
    abi_result="no"
    fc_info_string=""
    abi_fc_vendor="unknown"
    abi_fc_version="unknown"
  else
    AC_DEFINE([FC_OPEN64],1,
      [Define to 1 if you are using the Open64 Fortran compiler.])
    abi_fc_vendor="open64"
    abi_fc_version=`echo "${abi_result}" | sed -e 's/.* Version //; s/ .*//'`
    if test "${abi_fc_version}" = "${abi_result}"; then
      abi_fc_version="unknown"
    fi
    abi_result="yes"
  fi
  dnl AC_MSG_RESULT(${abi_result})
])
m4trace:config/m4/lang-fortran.m4:414: -1- AC_DEFUN([_ABI_CHECK_FC_PATHSCALE], [
  dnl Do some sanity checking of the arguments
  m4_if([$1], , [AC_FATAL([$0: missing argument 1])])dnl

  dnl AC_MSG_CHECKING([if we are using the PathScale Fortran compiler])
  fc_info_string=`$1 -version 2>&1 | head -n 1`
  abi_result=`echo "${fc_info_string}" | grep '^PathScale'`
  if test "${abi_result}" = ""; then
    abi_result="no"
    fc_info_string=""
    abi_fc_vendor="unknown"
    abi_fc_version="unknown"
  else
    AC_DEFINE([FC_PATHSCALE],1,
      [Define to 1 if you are using the PathScale Fortran compiler.])
    abi_fc_vendor="pathscale"
    abi_fc_version=`echo "${abi_result}" | sed -e 's/.* Version //; s/ .*//'`
    if test "${abi_fc_version}" = "${abi_result}"; then
      abi_fc_version="unknown"
    fi
    abi_result="yes"
  fi
  dnl AC_MSG_RESULT(${abi_result})
])
m4trace:config/m4/lang-fortran.m4:449: -1- AC_DEFUN([_ABI_CHECK_FC_PGI], [
  dnl Do some sanity checking of the arguments
  m4_if([$1], , [AC_FATAL([$0: missing argument 1])])dnl

  dnl AC_MSG_CHECKING([if we are using the Portland Group Fortran compiler])
  fc_info_string=`$1 -V 2>&1 | head -n 2 | grep -v "^$"`
  abi_result=`echo "${fc_info_string}" | grep '^pgf9[[05]]'`
  if test "${abi_result}" = ""; then
    abi_result="no"
    fc_info_string=""
    abi_fc_vendor="unknown"
    abi_fc_version="unknown"
  else
    AC_DEFINE([FC_PGI],1,
      [Define to 1 if you are using the Portland Group Fortran compiler.])
    abi_fc_vendor="pgi"
    abi_fc_version=`echo "${abi_result}" | sed -e 's/^pgf9[[05]] //' | sed -e 's/-.*//'`
    if test "${abi_fc_version}" = "${abi_result}"; then
      abi_fc_version="unknown"
    fi
    abi_result="yes"
  fi
  dnl AC_MSG_RESULT(${abi_result})
])
m4trace:config/m4/lang-fortran.m4:483: -1- AC_DEFUN([_ABI_CHECK_FC_SUN], [
  dnl Do some sanity checking of the arguments
  m4_if([$1], , [AC_FATAL([$0: missing argument 1])])dnl

  dnl AC_MSG_CHECKING([if we are using the Sun Fortran compiler])
  fc_info_string=`$1 -V 2>&1 | head -n 1`
  abi_result=`echo "${fc_info_string}" | grep 'Sun' | grep 'Fortran 95'`
  if test "${abi_result}" = ""; then
    abi_result="no"
    fc_info_string=""
    abi_fc_vendor="unknown"
    abi_fc_version="unknown"
  else
    AC_DEFINE([FC_SUN],1,
      [Define to 1 if you are using the Sun Fortran compiler.])
    abi_fc_vendor="sun"
    abi_fc_version=`echo "${abi_result}" | sed -e 's/.* Fortran 95 //;s/ .*//'`
    if test "${abi_fc_version}" = "${abi_result}" -o "${abi_fc_version}" = ""; then
      abi_fc_version="unknown"
    fi
    abi_result="yes"
  fi
  dnl AC_MSG_RESULT(${abi_result})
])
m4trace:config/m4/lang-fortran.m4:515: -1- AC_DEFUN([_ABI_CHECK_FC_ASYNC], [
  dnl Init
  fc_has_async="no"

  AC_MSG_CHECKING([whether the Fortran compiler accepts the ASYNCHRONOUS attribute])

  dnl Try to compile a program using asynchronous arrays (F2003)
  AC_LANG_PUSH([Fortran])
  AC_LINK_IFELSE([AC_LANG_PROGRAM([],
    [[
     INTEGER, ASYNCHRONOUS :: int_array(10)
    ]])], [fc_has_async="yes"])
  AC_LANG_POP()

  if test "${fc_has_async}" = "yes"; then
    AC_DEFINE([HAVE_FC_ASYNC],1,
      [Define to 1 if your Fortran compiler supports the asynchronous attribute.])
  fi

  AC_MSG_RESULT(${fc_has_async})
])
m4trace:config/m4/lang-fortran.m4:545: -1- AC_DEFUN([_ABI_CHECK_FC_BACKTRACE], [
  dnl Init
  fc_has_backtrace="no"

  AC_MSG_CHECKING([whether the Gfortran compiler supports BACKTRACE])

  dnl Try to compile a piece of code that calls BACKTRACE.
  AC_LANG_PUSH([Fortran])
  AC_LINK_IFELSE([AC_LANG_PROGRAM([], 
    [[
      call backtrace()
      
    ]])], [fc_has_backtrace="yes"])
  AC_LANG_POP()

  if test "${fc_has_backtrace}" = "yes"; then
    AC_DEFINE([HAVE_FC_BACKTRACE],1, 
      [Define to 1 if your Fortran compiler supports BACKTRACE.])
  fi

  AC_MSG_RESULT(${fc_has_backtrace})
])
m4trace:config/m4/lang-fortran.m4:576: -1- AC_DEFUN([_ABI_CHECK_FC_COMMAND_ARGUMENT], [
  dnl Init
  fc_has_command_argument="no"

  AC_MSG_CHECKING([whether the Fortran compiler supports GET_COMMAND_ARGUMENT])

  dnl Try to compile a piece of code that calls get_command_argument.
  AC_LANG_PUSH([Fortran])
  AC_LINK_IFELSE([AC_LANG_PROGRAM([], 
    [[
      integer :: ii
      character(len=500) :: arg

      call get_command(arg)

      do ii=1,command_argument_count()
        call get_command_argument(ii, arg)
      end do
      
    ]])], [fc_has_command_argument="yes"])
  AC_LANG_POP()

  if test "${fc_has_command_argument}" = "yes"; then
    AC_DEFINE([HAVE_FC_COMMAND_ARGUMENT],1, 
      [Define to 1 if your Fortran compiler supports GET_COMMAND_ARGUMENT.])
  fi

  AC_MSG_RESULT(${fc_has_command_argument})
])
m4trace:config/m4/lang-fortran.m4:614: -1- AC_DEFUN([_ABI_CHECK_FC_COMMAND_LINE], [
  dnl Init
  fc_has_command_line="no"

  AC_MSG_CHECKING([whether the Fortran compiler supports EXECUTE_COMMAND_LINE])

  dnl Try to compile a piece of code that calls execute_command_line.
  AC_LANG_PUSH([Fortran])
  AC_LINK_IFELSE([AC_LANG_PROGRAM([], 
    [[
      integer :: i
      
      call execute_command_line ("external_prog.exe", exitstat=i)
      print *, "Exit status of external_prog.exe was ", i
      
      call execute_command_line ("reindex_files.exe", wait=.false.)
      print *, "Now reindexing files in the background"
    ]])], [fc_has_command_line="yes"])
  AC_LANG_POP()

  if test "${fc_has_command_line}" = "yes"; then
    AC_DEFINE([HAVE_FC_COMMAND_LINE],1, 
      [Define to 1 if your Fortran compiler supports EXECUTE_COMMAND_LINE.])
  fi

  AC_MSG_RESULT(${fc_has_command_line})
])
m4trace:config/m4/lang-fortran.m4:650: -1- AC_DEFUN([_ABI_CHECK_FC_SYSTEM], [
  dnl Init
  fc_has_system="no"

  AC_MSG_CHECKING([whether the Fortran compiler supports SYSTEM])

  dnl Try to compile a piece of code that calls system.
  AC_LANG_PUSH([Fortran])
  AC_LINK_IFELSE([AC_LANG_PROGRAM([], 
    [[
      call system ("ls -l")
    ]])], [fc_has_system="yes"])
  AC_LANG_POP()

  if test "${fc_has_system}" = "yes"; then
    AC_DEFINE([HAVE_FC_SYSTEM],1, 
      [Define to 1 if your Fortran compiler supports SYSTEM.])
  fi

  AC_MSG_RESULT(${fc_has_system})
])
m4trace:config/m4/lang-fortran.m4:678: -1- AC_DEFUN([_ABI_CHECK_FC_CONTIGUOUS], [
  dnl Init
  fc_has_contiguous="no"

  AC_MSG_CHECKING([whether the Fortran compiler accepts the CONTIGUOUS attribute])

  dnl Try to compile a program using contiguous (F2008)
  AC_LANG_PUSH([Fortran])
  AC_LINK_IFELSE([AC_LANG_PROGRAM([],
    [[
     integer, parameter :: dp=kind(1.0d0)
     integer, parameter :: dpc=kind((1.0_dp,1.0_dp)) 

     integer,contiguous,pointer :: i_ptr(:)
     real(dp),contiguous,pointer :: r_ptr(:,:)
     complex(dpc),contiguous,pointer :: c_ptr(:,:,:)
    ]])], [fc_has_contiguous="yes"])
  AC_LANG_POP()

  if test "${fc_has_contiguous}" = "yes"; then
    AC_DEFINE([HAVE_FC_CONTIGUOUS],1,
      [Define to 1 if your Fortran compiler supports the contiguous attribute.])
  fi

  AC_MSG_RESULT(${fc_has_contiguous})
])
m4trace:config/m4/lang-fortran.m4:711: -1- AC_DEFUN([_ABI_CHECK_FC_EXIT], [
  dnl Init
  fc_has_exit="no"

  AC_MSG_CHECKING([whether the Fortran compiler accepts exit()])

  dnl Try to compile a program calling exit()
  AC_LANG_PUSH([Fortran])
  AC_LINK_IFELSE([AC_LANG_PROGRAM([],
    [[
            call exit(1)
    ]])], [fc_has_exit="yes"])
  AC_LANG_POP()

  if test "${fc_has_exit}" = "yes"; then
    AC_DEFINE([HAVE_FC_EXIT],1,
      [Define to 1 if your Fortran compiler supports exit().])
  fi

  AC_MSG_RESULT(${fc_has_exit})
])
m4trace:config/m4/lang-fortran.m4:740: -1- AC_DEFUN([_ABI_CHECK_FC_FLUSH], [
  dnl Init
  fc_has_flush="no"

  AC_MSG_CHECKING([whether the Fortran compiler accepts flush()])

  dnl Try to compile a program calling flush()
  AC_LANG_PUSH([Fortran])
  AC_LINK_IFELSE([AC_LANG_PROGRAM([],
    [[
            call flush(1)
    ]])], [fc_has_flush="yes"])
  AC_LANG_POP()

  if test "${fc_has_flush}" = "yes"; then
    AC_DEFINE([HAVE_FC_FLUSH],1,
      [Define to 1 if your Fortran compiler supports flush().])
  fi

  AC_MSG_RESULT(${fc_has_flush})
])
m4trace:config/m4/lang-fortran.m4:768: -1- AC_DEFUN([_ABI_CHECK_FC_FLUSH_], [
  dnl Init
  fc_has_flush_="no"

  AC_MSG_CHECKING([whether the Fortran compiler accepts flush_()])

  dnl Try to compile a program calling flush_()
  AC_LANG_PUSH([Fortran])
  AC_LINK_IFELSE([AC_LANG_PROGRAM([],
    [[
            call flush_(1)
    ]])], [fc_has_flush_="yes"])
  AC_LANG_POP()

  if test "${fc_has_flush_}" = "yes"; then
    AC_DEFINE([HAVE_FC_FLUSH_],1,
      [Define to 1 if your Fortran compiler supports flush_().])
  fi

  AC_MSG_RESULT(${fc_has_flush_})
])
m4trace:config/m4/lang-fortran.m4:797: -1- AC_DEFUN([_ABI_CHECK_FC_GAMMA], [
  dnl Init
  fc_has_gamma="no"

  AC_MSG_CHECKING([whether the Fortran compiler accepts gamma()])

  dnl Try to compile a program using gamma()
  AC_LANG_PUSH([Fortran])
  AC_LINK_IFELSE([AC_LANG_PROGRAM([],
    [[
            real :: x
            x = gamma(1.5)
    ]])], [fc_has_gamma="yes"])
  AC_LANG_POP()

  if test "${fc_has_gamma}" = "yes"; then
    AC_DEFINE([HAVE_FC_GAMMA],1,
      [Define to 1 if your Fortran compiler supports gamma().])
  fi

  AC_MSG_RESULT(${fc_has_gamma})
])
m4trace:config/m4/lang-fortran.m4:828: -1- AC_DEFUN([_ABI_CHECK_FC_GETENV], [
  dnl Init
  fc_has_getenv="no"

  AC_MSG_CHECKING([whether the Fortran compiler accepts getenv()])

  dnl Try to compile a call to getenv
  AC_LANG_PUSH([Fortran])
  AC_LINK_IFELSE([AC_LANG_PROGRAM([], 
    [[
      character(len=255) :: homedir
      call getenv("HOME", homedir)

    ]])], [fc_has_getenv="yes"])
  AC_LANG_POP()

  if test "${fc_has_getenv}" = "yes"; then
    AC_DEFINE([HAVE_FC_GETENV],1, 
      [Define to 1 if your Fortran compiler supports getenv().])
  fi

  AC_MSG_RESULT(${fc_has_getenv})
])
m4trace:config/m4/lang-fortran.m4:859: -1- AC_DEFUN([_ABI_CHECK_FC_INT_QUAD], [
  dnl Init
  fc_has_int_quad="no"

  AC_MSG_CHECKING([whether the Fortran compiler accepts quadruple integers])

  dnl Try to compile a program defining a quadruple integer
  dnl Note: xlf "works around" the problem by changing the integer length
  if test "${abi_fc_vendor}" != "ibm"; then
    AC_LANG_PUSH([Fortran])
    AC_LINK_IFELSE([AC_LANG_PROGRAM([],
      [[
              integer*16 my_int
      ]])], [fc_has_int_quad="yes"])
    AC_LANG_POP()
  fi

  if test "${fc_has_int_quad}" = "yes"; then
    AC_DEFINE([HAVE_FC_INT_QUAD],1,
      [Define to 1 if your Fortran compiler accepts quadruple integers.])
  fi

  AC_MSG_RESULT(${fc_has_int_quad})
])
m4trace:config/m4/lang-fortran.m4:890: -1- AC_DEFUN([_ABI_CHECK_FC_ISO_FORTRAN_2008], [
  dnl Init
  fc_has_iso_fortran_2008="no"

  AC_MSG_CHECKING([whether the Fortran compiler supports 2008 standard in ISO_FORTRAN_ENV])

  dnl Try to compile a program using ISO_FORTRAN_ENV with int16,int32,int64
  AC_LANG_PUSH([Fortran])
  AC_LINK_IFELSE([AC_LANG_PROGRAM([],
    [[
          use ISO_FORTRAN_ENV, only : int16,int32,int64
      ]])], [fc_has_iso_fortran_2008="yes"])
  AC_LANG_POP()

  if test "${fc_has_iso_fortran_2008}" = "yes"; then
    AC_DEFINE([HAVE_FC_ISO_FORTRAN_2008],1,
      [Define to 1 if your Fortran compiler supports 2008 standard in ISO_FORTRAN_ENV.])
  fi

  AC_MSG_RESULT(${fc_has_iso_fortran_2008})
])
m4trace:config/m4/lang-fortran.m4:918: -1- AC_DEFUN([_ABI_CHECK_FC_DTARRAYS], [
  dnl Init
  fc_has_dtarrays="no"

  AC_MSG_CHECKING([whether the Fortran compiler supports allocatable arrays in datatypes])

  dnl Try to compile a type with an allocatable array
  AC_LANG_PUSH([Fortran])
  AC_LINK_IFELSE([AC_LANG_PROGRAM([], 
    [[

         integer, parameter :: dp=kind(1.0d0)
         integer, parameter :: dpc=kind((1.0_dp,1.0_dp))  

         type test_type
           integer,allocatable :: i(:) 
           real(dp),allocatable :: r(:,:) 
           complex(dpc),allocatable :: c(:,:,:) 
         end type test_type

    ]])], [fc_has_dtarrays="yes"])
  AC_LANG_POP()

  if test "${fc_has_dtarrays}" = "yes"; then
    AC_DEFINE([HAVE_FC_ALLOCATABLE_DTARRAYS],1, 
      [Define to 1 if your Fortran compiler supports allocatable arrays in datatypes.])
  fi

  AC_MSG_RESULT(${fc_has_dtarrays})
])
m4trace:config/m4/lang-fortran.m4:957: -1- AC_DEFUN([_ABI_CHECK_FC_IEEE_EXCEPTIONS], [
  dnl Init
  fc_has_ieee_exceptions="no"

  AC_MSG_CHECKING([whether the Fortran compiler supports IEEE_EXCEPTIONS])

  dnl Try to compile a piece of code that uses the module.
  AC_LANG_PUSH([Fortran])
  AC_LINK_IFELSE([AC_LANG_PROGRAM([], 
    [[
      use, intrinsic :: ieee_exceptions 
      type(ieee_status_type) :: status_value

      call ieee_get_status(status_value)   ! Get the flags
      call ieee_set_flag(ieee_all,.false.) ! Set the flags quiet
      call ieee_set_status(status_value)   ! Restore the flags
      
    ]])], [fc_has_ieee_exceptions="yes"])
  AC_LANG_POP()

  if test "${fc_has_ieee_exceptions}" = "yes"; then
    AC_DEFINE([HAVE_FC_IEEE_EXCEPTIONS],1, 
      [Define to 1 if your Fortran compiler supports IEEE_EXCEPTIONS.])
  fi

  AC_MSG_RESULT(${fc_has_ieee_exceptions})
])
m4trace:config/m4/lang-fortran.m4:991: -1- AC_DEFUN([_ABI_CHECK_FC_IOMSG], [
  dnl Init
  fc_has_iomsg="no"

  AC_MSG_CHECKING([whether the Fortran compiler supports IOMSG])

  dnl Try to compile a piece of code that opens, reads, writes and closes a file using iomsg.
  AC_LANG_PUSH([Fortran])
  AC_LINK_IFELSE([AC_LANG_PROGRAM([], 
    [[
         IMPLICIT NONE
         CHARACTER(len=500) :: ERRMSG, DUMMY

         OPEN(UNIT=11, FILE="iomsg.demo", STATUS="NEW", IOMSG=ERRMSG)
         WRITE(11,IOMSG=ERRMSG) "first"
         READ(11, IOMSG=ERRMSG) DUMMY
         CLOSE(UNIT=11, IOMSG=ERRMSG)

    ]])], [fc_has_iomsg="yes"])
  AC_LANG_POP()

  if test "${fc_has_iomsg}" = "yes"; then
    AC_DEFINE([HAVE_FC_IOMSG],1, 
      [Define to 1 if your Fortran compiler supports IOMSG.])
  fi

  AC_MSG_RESULT(${fc_has_iomsg})
])
m4trace:config/m4/lang-fortran.m4:1026: -1- AC_DEFUN([_ABI_CHECK_FC_ISO_C_BINDING], [
  dnl Init
  fc_has_iso_c_binding="no"

  AC_MSG_CHECKING([whether the Fortran compiler provides the iso_c_binding module])

  dnl Try to compile a simple piece of code using iso_c_binding
  AC_LANG_PUSH([Fortran])
  AC_LINK_IFELSE([AC_LANG_PROGRAM([], 
    [[
         use iso_c_binding
         implicit none
         integer(c_int) :: ii
         logical :: lbool
         type(c_ptr) :: ptr
         ptr = c_null_ptr
         lbool = c_associated(ptr) 

    ]])], [fc_has_iso_c_binding="yes"])
  AC_LANG_POP()

  if test "${fc_has_iso_c_binding}" = "yes"; then
    AC_DEFINE([HAVE_FC_ISO_C_BINDING],1, 
      [Define to 1 if your Fortran compiler provides the iso_c_binding module.])
  else
    AC_MSG_ERROR([Fortran compiler does not provide iso_c_binding module. Use a more recent version or a different compiler])
  fi

  AC_MSG_RESULT(${fc_has_iso_c_binding})
])
m4trace:config/m4/lang-fortran.m4:1064: -1- AC_DEFUN([_ABI_CHECK_FC_LONG_LINES], [
  dnl Init
  fc_has_long_lines="no"

  AC_MSG_CHECKING([whether the Fortran compiler accepts long lines])

  dnl Try to compile a single line exceeding 136 columns.
  AC_LANG_PUSH([Fortran])
  AC_LINK_IFELSE([AC_LANG_PROGRAM([], 
    [[
         write(*,*)"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa" !142
    ]])], [fc_has_long_lines="yes"])
  AC_LANG_POP()

  if test "${fc_has_long_lines}" = "yes"; then
    AC_DEFINE([HAVE_FC_LONG_LINES],1, 
      [Define to 1 if your Fortran compiler supports long lines.])
  fi

  AC_MSG_RESULT(${fc_has_long_lines})

  dnl Official macro added in autoconf ??
  dnl AC_FC_LINE_LENGTH ([length], [action-if-success], [action-if-failure = AC_MSG_FAILURE])

])
m4trace:config/m4/lang-fortran.m4:1096: -1- AC_DEFUN([_ABI_CHECK_FC_MACRO_NEWLINE], [
  dnl Init
  fc_has_macro_newline="no"

  AC_MSG_CHECKING([whether the Fortran compiler supports \newline in CPP macros])

  dnl Try to compile a piece of code that opens a file using \newline in a macro (has to use F90 ext).
  AC_LANG_PUSH([Fortran])
  AC_LINK_IFELSE([AC_LANG_PROGRAM([], 
    [[
#        define NEWLINE \newline
         print *,"foo1" NEWLINE print *,"foo2"

    ]])], [fc_has_macro_newline="yes"])
  AC_LANG_POP()

  if test "${fc_has_macro_newline}" = "yes"; then
    AC_DEFINE([HAVE_FC_MACRO_NEWLINE],1,
      [Define to 1 if your Fortran compiler supports \newline in a macros.])
  fi

  AC_MSG_RESULT(${fc_has_macro_newline})
])
m4trace:config/m4/lang-fortran.m4:1128: -1- AC_DEFUN([_ABI_CHECK_FC_MOVE_ALLOC], [
  dnl Init
  fc_has_move_alloc="no"

  AC_MSG_CHECKING([whether the Fortran compiler supports MOVE_ALLOC (F2003)])

  dnl Try to compile a piece of code that uses move_alloc (F2003)
  AC_LANG_PUSH([Fortran])
  AC_LINK_IFELSE([AC_LANG_PROGRAM([], 
    [[
     integer, allocatable :: a(:), b(:)
     allocate(a(3))
     a = (/1, 2, 3/)
     call move_alloc(a, b)
    ]])], [fc_has_move_alloc="yes"])
  AC_LANG_POP()

  if test "${fc_has_move_alloc}" = "yes"; then
    AC_DEFINE([HAVE_FC_MOVE_ALLOC],1,
      [Define to 1 if your Fortran compiler supports MOVE_ALLOC (F2003).])
  fi

  AC_MSG_RESULT(${fc_has_move_alloc})
])
m4trace:config/m4/lang-fortran.m4:1161: -1- AC_DEFUN([_ABI_CHECK_FC_PRIVATE], [
  dnl Init
  fc_has_private="no"

  AC_MSG_CHECKING([whether the Fortran compiler accepts the PRIVATE attribute])

  dnl Try to compile a program using private entities (F2003)
  AC_LANG_PUSH([Fortran])
  AC_COMPILE_IFELSE([
     module foo
       type, public :: bar_t
         integer :: pub
         integer,private :: priv
       end type bar_t
     end module foo
    ], [fc_has_private="yes"])
  AC_LANG_POP()

  if test "${fc_has_private}" = "yes"; then
    AC_DEFINE([HAVE_FC_PRIVATE],1,
      [Define to 1 if your Fortran compiler supports the private attribute.])
  fi

  dnl remove the module.
  if test -f "FOO.${MODEXT}"; then
    rm -f "FOO.${MODEXT}"; 
  elif test -f "foo.${MODEXT}"; then
    rm -f "foo.${MODEXT}"; 
  fi

  AC_MSG_RESULT(${fc_has_private})
])
m4trace:config/m4/lang-fortran.m4:1202: -1- AC_DEFUN([_ABI_CHECK_FC_PROTECTED], [
  dnl Init
  fc_has_protected="no"

  AC_MSG_CHECKING([whether the Fortran compiler accepts the PROTECTED attribute])

  dnl Try to compile a program using protected module entities (F2003)
  AC_LANG_PUSH([Fortran])
  AC_COMPILE_IFELSE([
    module foo
     real,save,protected :: aprot(10)
    end module foo
    ], [fc_has_protected="yes"])
  AC_LANG_POP()

  if test "${fc_has_protected}" = "yes"; then
    AC_DEFINE([HAVE_FC_PROTECTED],1,
      [Define to 1 if your Fortran compiler supports the protected attribute.])
  fi

  dnl remove the module.
  if test -f "FOO.${MODEXT}"; then
    rm -f "FOO.${MODEXT}"; 
  elif test -f "foo.${MODEXT}"; then
    rm -f "foo.${MODEXT}"; 
  fi

  AC_MSG_RESULT(${fc_has_protected})
])
m4trace:config/m4/lang-fortran.m4:1238: -1- AC_DEFUN([_ABI_CHECK_FC_STREAM_IO], [
  dnl Init
  fc_has_stream_io="no"

  AC_MSG_CHECKING([whether the Fortran compiler supports stream IO])

  dnl Try to compile a piece of code that opens a file using unformatted stream access.
  AC_LANG_PUSH([Fortran])
  AC_LINK_IFELSE([AC_LANG_PROGRAM([],
    [[
         IMPLICIT NONE
         INTEGER :: myvalue = 12345, mypos
         OPEN(UNIT=11, FILE="ustream.demo", STATUS="NEW", ACCESS="STREAM")
         WRITE(11) "first"
         WRITE(11) "second"
         INQUIRE(UNIT=11, POS=mypos)
         PRINT *, "Myvalue will be written at position ", mypos
         WRITE(11) myvalue
         CLOSE(UNIT=11)

    ]])], [fc_has_stream_io="yes"])
  AC_LANG_POP()

  if test "${fc_has_stream_io}" = "yes"; then
    AC_DEFINE([HAVE_FC_STREAM_IO],1,
      [Define to 1 if your Fortran compiler supports stream IO.])
  fi

  AC_MSG_RESULT(${fc_has_stream_io})
])
m4trace:config/m4/lang-fortran.m4:1275: -1- AC_DEFUN([_ABI_CHECK_FC_TIMING], [
  dnl Init
  fc_timing="standard"
  fc_has_etime="no"

  dnl Look for etime() support
  if test "${fc_timing}" = "standard"; then
    AC_MSG_CHECKING([whether the Fortran compiler accepts etime()])

    dnl Try to compile a program calling etime()
    AC_LANG_PUSH([Fortran])
    AC_LINK_IFELSE([AC_LANG_PROGRAM([],
      [[
            call etime(1)
      ]])], [fc_has_etime="yes"])
    AC_LANG_POP()

    if test "${fc_has_etime}" = "yes"; then
      AC_DEFINE([HAVE_FC_ETIME],1,
        [Define to 1 if your Fortran compiler supports etime().])
    fi

    AC_MSG_RESULT(${fc_has_etime})

  fi

  dnl Determine whether to use C clock for timings
  AC_MSG_CHECKING([whether to use C clock for timings])
  AC_MSG_RESULT([${enable_cclock}])
  if test "${enable_cclock}" = "yes"; then
    AC_DEFINE([HAVE_CCLOCK],1,[Use C clock for timings.])
    fc_timing="cclock"
  fi
  AM_CONDITIONAL(DO_BUILD_CCLOCK,[test "${enable_cclock}" = "yes"])

  dnl Schedule info for substitution
  AC_SUBST(fc_timing)
])
m4trace:config/m4/lang-fortran.m4:1321: -1- AC_DEFUN([_ABI_CHECK_FC_CPUTIME], [
  dnl Init
  fc_has_cputime="no"

  AC_MSG_CHECKING([whether the Fortran compiler accepts cpu_time()])

  dnl Try to compile a call to cpu_time
  AC_LANG_PUSH([Fortran])
  AC_LINK_IFELSE([AC_LANG_PROGRAM([], 
    [[
      real :: second
      call cpu_time(second)

    ]])], [fc_has_cputime="yes"])
  AC_LANG_POP()

  if test "${fc_has_cputime}" = "yes"; then
    AC_DEFINE([HAVE_FC_CPUTIME],1, 
      [Define to 1 if your Fortran compiler supports cpu_time().])
  fi

  AC_MSG_RESULT(${fc_has_cputime})
])
m4trace:config/m4/lang-fortran.m4:1351: -1- AC_DEFUN([_ABI_CHECK_FC_GETPID], [
  dnl Init
  fc_has_getpid="no"

  dnl Look for getpid() support
  AC_LANG_PUSH([Fortran])
  AC_LINK_IFELSE([AC_LANG_PROGRAM([],
    [[
          call getpid()
    ]])], [fc_has_getpid="yes"])
  AC_LANG_POP([Fortran])

  dnl Determine whether to use getpid()
  AC_MSG_CHECKING([whether the Fortran compiler accepts getpid()])
  AC_MSG_RESULT([${fc_has_getpid}])
  if test "${fc_has_getpid}" = "yes"; then
    AC_DEFINE([HAVE_FC_GETPID],1,
      [Define to 1 if your Fortran compiler supports getpid().])
  fi
])
m4trace:config/m4/lang-fortran.m4:1384: -1- AC_DEFUN([ABI_FC_EXTENSIONS], [
  dnl Set Fortran module extension
  AX_F90_MODULE_EXTENSION
  if test "${ax_cv_f90_modext}" != ""; then
    MODEXT="${ax_cv_f90_modext}"
  else
    MODEXT="mod"
    AC_MSG_NOTICE([setting Fortran module extension to ".${MODEXT}"])
  fi

  dnl Change the default Fortran extension for tests
  AC_FC_SRCEXT(F90,[abi_fc_src_ok="yes"],[abi_fc_src_ok="no"])
  if test "${abi_fc_src_ok}" != "yes"; then
    AC_MSG_WARN([Fortran file extension could not be changed])
    AC_MSG_WARN([some advanced Fortran tests may fail])
  fi
])
m4trace:config/m4/lang-fortran.m4:1409: -1- AC_DEFUN([ABI_FC_FEATURES], [
  dnl Explore compiler peculiarities
  _ABI_CHECK_FC_ASYNC
  _ABI_CHECK_FC_BACKTRACE
  _ABI_CHECK_FC_COMMAND_ARGUMENT
  _ABI_CHECK_FC_COMMAND_LINE
  _ABI_CHECK_FC_SYSTEM
  _ABI_CHECK_FC_CONTIGUOUS
  _ABI_CHECK_FC_DTARRAYS
  _ABI_CHECK_FC_IEEE_EXCEPTIONS
  _ABI_CHECK_FC_IOMSG
  _ABI_CHECK_FC_ISO_C_BINDING
  _ABI_CHECK_FC_EXIT
  _ABI_CHECK_FC_FLUSH
  _ABI_CHECK_FC_FLUSH_
  _ABI_CHECK_FC_GAMMA
  _ABI_CHECK_FC_GETENV
  _ABI_CHECK_FC_GETPID
  _ABI_CHECK_FC_INT_QUAD
  _ABI_CHECK_FC_ISO_FORTRAN_2008
  _ABI_CHECK_FC_LONG_LINES
  _ABI_CHECK_FC_MACRO_NEWLINE
  _ABI_CHECK_FC_MOVE_ALLOC
  _ABI_CHECK_FC_PRIVATE
  _ABI_CHECK_FC_PROTECTED
  _ABI_CHECK_FC_STREAM_IO
  _ABI_CHECK_FC_CPUTIME
  _ABI_CHECK_FC_TIMING
])
m4trace:config/m4/lang-fortran.m4:1447: -1- AC_DEFUN([ABI_FC_MOD_CASE], [
  AC_REQUIRE([ABI_FC_EXTENSIONS])

  dnl Init
  fc_mod_lowercase="yes"
  fc_mod_uppercase="no"
  AC_MSG_NOTICE([determining Fortran module case])

  dnl Compile a dummy module
  AC_LANG_PUSH([Fortran])
  AC_COMPILE_IFELSE([[
    module conftest
    end module conftest
  ]],[],[AC_MSG_FAILURE([unable to compile a simple Fortran module])])
  AC_LANG_POP([Fortran])

  dnl Check module file existence
  if test -f "CONFTEST.${MODEXT}"; then
    fc_mod_lowercase="no"
    fc_mod_uppercase="yes"
  elif test ! -f "conftest.${MODEXT}"; then
    AC_MSG_WARN([conftest.${MODEXT} Fortran module could not be found])
  fi

  dnl Output final outcome
  AC_MSG_CHECKING([whether Fortran modules are upper-case])
  AC_MSG_RESULT([${fc_mod_uppercase}])
])
m4trace:config/m4/lang-fortran.m4:1485: -1- AC_DEFUN([ABI_FC_MOD_INCS], [
  AC_MSG_CHECKING([for Fortran module includes])

  if test "${abi_fc_mod_incs_ok}" = "" -o \
          "${abi_fc_mod_incs_ok}" = "unknown"; then

    dnl Init
    fc_mod_incs=""

    dnl Prepare environment
    tmp_saved_FCFLAGS="${FCFLAGS}"
    AC_LANG_PUSH([Fortran])

    dnl Look for module without includes
    AC_COMPILE_IFELSE([AC_LANG_PROGRAM([],
      [[
        use $1
      ]])], [abi_fc_mod_incs_ok="none required"], [abi_fc_mod_incs_ok="unknown"])

    dnl Look for module with includes
    if test "${abi_fc_mod_incs_ok}" = "unknown"; then
      FCFLAGS="${FCFLAGS} -I/usr/include"
      AC_COMPILE_IFELSE([AC_LANG_PROGRAM([],
        [[
          use $1
        ]])],
        [abi_fc_mod_incs_ok="-I/usr/include"; fc_mod_incs="-I/usr/include"],
        [abi_fc_mod_incs_ok="unknown"])
    fi
    AC_MSG_RESULT([${abi_fc_mod_incs_ok}])

    dnl Restore environment
    AC_LANG_POP([Fortran])
    FCFLAGS="${tmp_saved_FCFLAGS}"

  else

    AC_MSG_RESULT([${abi_fc_mod_incs_ok} (cached)])

  fi

  dnl Substitute variables
  AC_SUBST(fc_mod_incs)
])
m4trace:config/m4/lang-fortran.m4:1537: -1- AC_DEFUN([ABI_PROG_FC], [
  dnl Init
  abi_fc_vendor="${with_fc_vendor}"
  abi_fc_version="${with_fc_version}"
  tmp_fc_info_file="${abinit_builddir}/config.fc_info.tmp"

  if test "${abi_fc_vendor}" = ""; then
    abi_fc_vendor="unknown"
  fi
  if test "${abi_fc_version}" = ""; then
    abi_fc_version="unknown"
  fi
  abi_fc_wrap="no"

  dnl Determine Fortran compiler type (the order is important)
  AC_MSG_CHECKING([which type of Fortran compiler we have])

  dnl Clear temporary info file
  rm -f "${tmp_fc_info_file}"

  dnl Get rid of that one as early as possible
  if test "${abi_fc_vendor}" = "unknown"; then
    _ABI_CHECK_FC_IBM(${FC})
  fi
  echo "${fc_info_string}" >>"${tmp_fc_info_file}"

  dnl Should be checked before gfortran because it mimics its behaviour
  if test "${abi_fc_vendor}" = "unknown"; then
    _ABI_CHECK_FC_INTEL(${FC})
  fi
  echo "${fc_info_string}" >>"${tmp_fc_info_file}"

  if test "${abi_fc_vendor}" = "unknown"; then
    _ABI_CHECK_FC_G95(${FC})
  fi
  echo "${fc_info_string}" >>"${tmp_fc_info_file}"

  if test "${abi_fc_vendor}" = "unknown"; then
    _ABI_CHECK_FC_GNU(${FC})
  fi
  echo "${fc_info_string}" >>"${tmp_fc_info_file}"

  if test "${abi_fc_vendor}" = "unknown"; then
    _ABI_CHECK_FC_PATHSCALE(${FC})
  fi
  echo "${fc_info_string}" >>"${tmp_fc_info_file}"

  #if test "${abi_fc_vendor}" = "unknown"; then
  #  _ABI_CHECK_FC_COMPAQ(${FC})
  #fi
  #echo "${fc_info_string}" >>"${tmp_fc_info_file}"

  if test "${abi_fc_vendor}" = "unknown"; then
    _ABI_CHECK_FC_ABSOFT(${FC})
  fi
  echo "${fc_info_string}" >>"${tmp_fc_info_file}"

  if test "${abi_fc_vendor}" = "unknown"; then
    _ABI_CHECK_FC_MIPSPRO(${FC})
  fi
  echo "${fc_info_string}" >>"${tmp_fc_info_file}"

  if test "${abi_fc_vendor}" = "unknown"; then
    _ABI_CHECK_FC_OPEN64(${FC})
  fi
  echo "${fc_info_string}" >>"${tmp_fc_info_file}"

  if test "${abi_fc_vendor}" = "unknown"; then
    _ABI_CHECK_FC_FUJITSU(${FC})
  fi
  echo "${fc_info_string}" >>"${tmp_fc_info_file}"

  if test "${abi_fc_vendor}" = "unknown"; then
    _ABI_CHECK_FC_SUN(${FC})
  fi
  echo "${fc_info_string}" >>"${tmp_fc_info_file}"

  if test "${abi_fc_vendor}" = "unknown"; then
    _ABI_CHECK_FC_HITACHI(${FC})
  fi
  echo "${fc_info_string}" >>"${tmp_fc_info_file}"

  if test "${abi_fc_vendor}" = "unknown"; then
    _ABI_CHECK_FC_NAG(${FC})
  fi
  echo "${fc_info_string}" >>"${tmp_fc_info_file}"

  if test "${abi_fc_vendor}" = "unknown"; then
    _ABI_CHECK_FC_PGI(${FC})
  fi
  echo "${fc_info_string}" >>"${tmp_fc_info_file}"

  dnl Fall back to generic when detection fails
  if test "${abi_fc_vendor}" = "unknown"; then
    abi_fc_vendor="generic"
  #else
  #  rm -f "${tmp_fc_info_file}"
  fi

  dnl Normalize Fortran compiler version
  if test "${abi_fc_version}" = "unknown"; then
    abi_fc_version="0.0"
  else
    abi_fc_version=`echo ${abi_fc_version} | cut -d. -f1-2`
  fi

  dnl Display final result
  AC_MSG_RESULT([${abi_fc_vendor} ${abi_fc_version}])

  dnl Schedule compiler info for substitution
  AC_SUBST(abi_fc_vendor)
  AC_SUBST(abi_fc_version)
  AC_SUBST(abi_fc_wrap)
  AC_SUBST(fc_info_string)
])
m4trace:config/m4/lang-python.m4:21: -1- AC_DEFUN([_ABI_CHECK_NUMPY_HEADERS], [
  dnl Init
  abi_numpy_ok="no"

  dnl Look for a standard implementation
  if test "${abi_numpy_ok}" = "no"; then
    AC_MSG_CHECKING([for numpy/arrayobject.h])
    AC_LANG_PUSH([C])
    AC_COMPILE_IFELSE(
      [AC_LANG_PROGRAM(
        [[
#include <Python.h>
#include <numpy/arrayobject.h>
        ]],
        [[
        ]]
      )],
      [abi_numpy_ok="yes"],[abi_numpy_ok="no"])
    if test "${abi_numpy_ok}" = "yes"; then
      AC_DEFINE([HAVE_NUMPY],1,[Define to 1 if you have a standard implementation of NumPy.])
    fi
    AC_LANG_POP([C])
    AC_MSG_RESULT([${abi_numpy_ok}])
  fi
])
m4trace:config/m4/lang-python.m4:54: -1- AC_DEFUN([ABI_CHECK_PYTHON], [
  dnl Init
  abi_python_ok="no"
  abi_save_CPPFLAGS="${CPPFLAGS}"
  CPPFLAGS="${PYTHON_CPPFLAGS} ${CPPFLAGS}"

  dnl Preliminary Pyton tests
  AC_CHECK_HEADER([Python.h],[abi_python_ok="yes"])

  dnl Look for Python modules
  if test "${abi_python_ok}" = "yes"; then
    _ABI_CHECK_NUMPY_HEADERS
    if test "${abi_numpy_ok}" = "no"; then
      AC_MSG_NOTICE([adding "-I/usr/include/numpy" to CPPFLAGS])
      CPPFLAGS="${CPPFLAGS} -I/usr/include/numpy"
      _ABI_CHECK_NUMPY_HEADERS
      if test "${abi_numpy_ok}" = "yes"; then
        PYTHON_CPPFLAGS="${PYTHON_CPPFLAGS} -I/usr/include/numpy"
      fi
    fi
  else
    AC_MSG_WARN([your Python development environment is not working])
  fi

  dnl Restore environment
  CPPFLAGS="${abi_save_CPPFLAGS}"
])
m4trace:config/m4/misc-display.m4:21: -1- AC_DEFUN([ABI_MSG_END], [[
# Set OpenMP status reports
#
if test "${enable_openmp}" = "yes"; then
  tmp_omp_collapse="${abi_omp_has_collapse}"
else
  tmp_omp_collapse="ignored"
fi

# Set library-related status reports
#
# Timer
if test "${with_timer_libs}" = ""; then
  tmp_rep_timer_libs="auto-detected"
else
  tmp_rep_timer_libs="user-defined"
fi
test "${lib_timer_flavor}" = "none" -o "${lib_timer_flavor}" = "abinit" && \
  tmp_rep_timer_libs="ignored"

# Linalg
if test "${with_linalg_libs}" = ""; then
  tmp_rep_linalg_libs="auto-detected"
else
  tmp_rep_linalg_libs="user-defined"
fi
test "${lib_linalg_flavor}" = "netlib-fallback" && \
  tmp_rep_linalg_libs="internal"
test "${lib_linalg_flavor}" = "none" -o \
     "${lib_linalg_flavor}" = "netlib-fallback" && \
  tmp_rep_linalg_libs="ignored"

# Algo
if test "${with_algo_libs}" = ""; then
  tmp_rep_algo_libs="auto-detected"
else
  tmp_rep_algo_libs="user-defined"
fi
test "${lib_algo_flavor}" = "none" && \
  tmp_rep_algo_libs="ignored"

# FFT
if test "${with_fft_libs}" = ""; then
  tmp_rep_fft_libs="auto-detected"
else
  tmp_rep_fft_libs="user-defined"
fi
test "${lib_fft_flavor}" = "none" -o "${lib_fft_flavor}" = "abinit" && \
  tmp_rep_fft_libs="ignored"

# Math
if test "${with_math_libs}" = ""; then
  tmp_rep_math_libs="auto-detected"
else
  tmp_rep_math_libs="user-defined"
fi
test "${lib_math_flavor}" = "none" -o "${lib_math_flavor}" = "abinit" && \
  tmp_rep_math_libs="ignored"

# Display values of important configure options and ending message
cat <<EOF

Summary of important options:

  * C compiler      : ${abi_cc_vendor} version ${abi_cc_version}
  * Fortran compiler: ${abi_fc_vendor} version ${abi_fc_version}
  * architecture    : ${abi_cpu_vendor} ${abi_cpu_model} (${abi_cpu_bits} bits)

  * debugging       : ${enable_debug}
  * optimizations   : ${enable_optim}

  * OpenMP enabled  : ${enable_openmp} (collapse: ${tmp_omp_collapse})
  * MPI    enabled  : ${enable_mpi}
  * MPI-IO enabled  : ${enable_mpi_io}
  * GPU    enabled  : ${enable_gpu} (flavor: ${lib_gpu_flavor})

  * TRIO   flavor = ${lib_trio_flavor}
  * TIMER  flavor = ${lib_timer_flavor} (libs: ${tmp_rep_timer_libs})
  * LINALG flavor = ${lib_linalg_flavor} (libs: ${tmp_rep_linalg_libs})
  * ALGO   flavor = ${lib_algo_flavor} (libs: ${tmp_rep_algo_libs})
  * FFT    flavor = ${lib_fft_flavor} (libs: ${tmp_rep_fft_libs})
  * MATH   flavor = ${lib_math_flavor} (libs: ${tmp_rep_math_libs})
  * DFT    flavor = ${lib_dft_flavor}

Configuration complete.
You may now type "make" to build ABINIT.
(or, on a SMP machine, "make mj4", or "make multi multi_nprocs=<n>")

EOF
]])
m4trace:config/m4/misc-display.m4:121: -1- AC_DEFUN([ABI_MSG_FC_BUGGY], [
  dnl Do some sanity checking of the arguments
  m4_if([$1], , [AC_FATAL([$0: missing argument 1])])dnl

  case "$1" in

    absoft)
      ABI_MSG_NOTICE([fc-absoft],[About the ABSoft Fortran compiler])
      ;;

    ibm)
      ABI_MSG_NOTICE([fc-ibm],[About the IBM XL Fortran compiler])
      ;;

    intel)
      ABI_MSG_NOTICE([fc-intel],[About the Intel Fortran compiler])
      ;;

  esac
])
m4trace:config/m4/misc-display.m4:149: -1- AC_DEFUN([ABI_MSG_NOTICE], [
  dnl Do some sanity checking of the arguments
  m4_if([$1], , [AC_FATAL([$0: missing argument 1])])dnl

  dnl Init
  abi_msg_file="${abinit_srcdir}/config/messages/$1.msg"
  abi_msg_title="$2"
  test "${abi_msg_title}" = "" && abi_msg_title="IMPORTANT NOTE"

  dnl Format title
  abi_msg_spacer="                                                            "
  abi_msg_tmp1=`echo "${abi_msg_title}" | sed -e 's/./ /g'`
  abi_msg_tmp2=`echo "${abi_msg_tmp1}" | grep "${abi_msg_spacer}"`
  abi_msg_spacer=`echo "${abi_msg_spacer}" | sed -e "s/${abi_msg_tmp1}//"`
  test "${abi_msg_tmp2}" = "" || abi_msg_spacer=""
  abi_msg_title="${abi_msg_title}${abi_msg_spacer}"

  if test -s "${abi_msg_file}"; then

  dnl Print header
  echo ""
  echo "        +--------------------------------------------------------------+"
  echo "        | ${abi_msg_title} |"
  echo "        +--------------------------------------------------------------+"

  dnl Format and write message
  while read abi_msg_line; do
    abi_msg_line=`eval echo ${abi_msg_line}`
    abi_msg_spacer="                                                            "
    abi_msg_tmp1=`echo "${abi_msg_line}" | sed -e 's/./ /g'`
    abi_msg_tmp2=`echo "${abi_msg_tmp1}" | grep "${abi_msg_spacer}"`
    test "${abi_msg_tmp1}" = "" || \
      abi_msg_spacer=`echo "${abi_msg_spacer}" | sed -e "s/${abi_msg_tmp1}//"`
    test "${abi_msg_tmp2}" = "" || abi_msg_spacer=""
    echo "        | ${abi_msg_line}${abi_msg_spacer} |"
  done <"${abi_msg_file}"

  dnl Print footer
  echo "        +--------------------------------------------------------------+"
  echo ""

  else
    AC_MSG_WARN([message file ${abi_msg_file} not found])
  fi
])
m4trace:config/m4/misc-display.m4:201: -1- AC_DEFUN([ABI_MSG_SECTION], [
  dnl Do some sanity checking of the arguments
  m4_if([$1], , [AC_FATAL([$0: missing argument 1])])dnl

  abi_sec_title="$1"

  dnl Calculate amount of space chars needed for pretty-printing
  abi_sec_spaces="                                                                      "
  abi_sec_tmp="${abi_sec_title}"
  while test "${abi_sec_tmp}" != ""; do
    abi_sec_spaces=`echo "${abi_sec_spaces}" | sed -e 's/^.//'`
    abi_sec_tmp=`echo "${abi_sec_tmp}" | sed -e 's/^.//'`
  done

  echo ""
  echo " =============================================================================="
  echo " === ${abi_sec_title}${abi_sec_spaces} ==="
  echo " =============================================================================="
  echo ""
])
m4trace:configure.ac:27: -1- m4_pattern_forbid([^_?A[CHUM]_])
m4trace:configure.ac:27: -1- m4_pattern_forbid([_AC_])
m4trace:configure.ac:27: -1- m4_pattern_forbid([^LIBOBJS$], [do not use LIBOBJS directly, use AC_LIBOBJ (see section `AC_LIBOBJ vs LIBOBJS'])
m4trace:configure.ac:27: -1- m4_pattern_allow([^AS_FLAGS$])
m4trace:configure.ac:27: -1- m4_pattern_forbid([^_?m4_])
m4trace:configure.ac:27: -1- m4_pattern_forbid([^dnl$])
m4trace:configure.ac:27: -1- m4_pattern_forbid([^_?AS_])
m4trace:configure.ac:27: -1- m4_pattern_allow([^SHELL$])
m4trace:configure.ac:27: -1- m4_pattern_allow([^PATH_SEPARATOR$])
m4trace:configure.ac:27: -1- m4_pattern_allow([^PACKAGE_NAME$])
m4trace:configure.ac:27: -1- m4_pattern_allow([^PACKAGE_TARNAME$])
m4trace:configure.ac:27: -1- m4_pattern_allow([^PACKAGE_VERSION$])
m4trace:configure.ac:27: -1- m4_pattern_allow([^PACKAGE_STRING$])
m4trace:configure.ac:27: -1- m4_pattern_allow([^PACKAGE_BUGREPORT$])
m4trace:configure.ac:27: -1- m4_pattern_allow([^PACKAGE_URL$])
m4trace:configure.ac:27: -1- m4_pattern_allow([^exec_prefix$])
m4trace:configure.ac:27: -1- m4_pattern_allow([^prefix$])
m4trace:configure.ac:27: -1- m4_pattern_allow([^program_transform_name$])
m4trace:configure.ac:27: -1- m4_pattern_allow([^bindir$])
m4trace:configure.ac:27: -1- m4_pattern_allow([^sbindir$])
m4trace:configure.ac:27: -1- m4_pattern_allow([^libexecdir$])
m4trace:configure.ac:27: -1- m4_pattern_allow([^datarootdir$])
m4trace:configure.ac:27: -1- m4_pattern_allow([^datadir$])
m4trace:configure.ac:27: -1- m4_pattern_allow([^sysconfdir$])
m4trace:configure.ac:27: -1- m4_pattern_allow([^sharedstatedir$])
m4trace:configure.ac:27: -1- m4_pattern_allow([^localstatedir$])
m4trace:configure.ac:27: -1- m4_pattern_allow([^includedir$])
m4trace:configure.ac:27: -1- m4_pattern_allow([^oldincludedir$])
m4trace:configure.ac:27: -1- m4_pattern_allow([^docdir$])
m4trace:configure.ac:27: -1- m4_pattern_allow([^infodir$])
m4trace:configure.ac:27: -1- m4_pattern_allow([^htmldir$])
m4trace:configure.ac:27: -1- m4_pattern_allow([^dvidir$])
m4trace:configure.ac:27: -1- m4_pattern_allow([^pdfdir$])
m4trace:configure.ac:27: -1- m4_pattern_allow([^psdir$])
m4trace:configure.ac:27: -1- m4_pattern_allow([^libdir$])
m4trace:configure.ac:27: -1- m4_pattern_allow([^localedir$])
m4trace:configure.ac:27: -1- m4_pattern_allow([^mandir$])
m4trace:configure.ac:27: -1- m4_pattern_allow([^PACKAGE_NAME$])
m4trace:configure.ac:27: -1- m4_pattern_allow([^PACKAGE_TARNAME$])
m4trace:configure.ac:27: -1- m4_pattern_allow([^PACKAGE_VERSION$])
m4trace:configure.ac:27: -1- m4_pattern_allow([^PACKAGE_STRING$])
m4trace:configure.ac:27: -1- m4_pattern_allow([^PACKAGE_BUGREPORT$])
m4trace:configure.ac:27: -1- m4_pattern_allow([^PACKAGE_URL$])
m4trace:configure.ac:27: -1- m4_pattern_allow([^DEFS$])
m4trace:configure.ac:27: -1- m4_pattern_allow([^ECHO_C$])
m4trace:configure.ac:27: -1- m4_pattern_allow([^ECHO_N$])
m4trace:configure.ac:27: -1- m4_pattern_allow([^ECHO_T$])
m4trace:configure.ac:27: -1- m4_pattern_allow([^LIBS$])
m4trace:configure.ac:27: -1- m4_pattern_allow([^build_alias$])
m4trace:configure.ac:27: -1- m4_pattern_allow([^host_alias$])
m4trace:configure.ac:27: -1- m4_pattern_allow([^target_alias$])
m4trace:configure.ac:30: -1- AC_CONFIG_MACRO_DIR([config/m4])
m4trace:configure.ac:39: -1- ABI_MSG_SECTION([Overall startup])
m4trace:configure.ac:42: -1- m4_pattern_allow([^build$])
m4trace:configure.ac:42: -1- m4_pattern_allow([^build_cpu$])
m4trace:configure.ac:42: -1- m4_pattern_allow([^build_vendor$])
m4trace:configure.ac:42: -1- m4_pattern_allow([^build_os$])
m4trace:configure.ac:42: -1- m4_pattern_allow([^host$])
m4trace:configure.ac:42: -1- m4_pattern_allow([^host_cpu$])
m4trace:configure.ac:42: -1- m4_pattern_allow([^host_vendor$])
m4trace:configure.ac:42: -1- m4_pattern_allow([^host_os$])
m4trace:configure.ac:42: -1- m4_pattern_allow([^target$])
m4trace:configure.ac:42: -1- m4_pattern_allow([^target_cpu$])
m4trace:configure.ac:42: -1- m4_pattern_allow([^target_vendor$])
m4trace:configure.ac:42: -1- m4_pattern_allow([^target_os$])
m4trace:configure.ac:45: -1- AM_INIT_AUTOMAKE([1.10 tar-ustar])
m4trace:configure.ac:45: -1- m4_pattern_allow([^AM_[A-Z]+FLAGS$])
m4trace:configure.ac:45: -1- AM_SET_CURRENT_AUTOMAKE_VERSION
m4trace:configure.ac:45: -1- AM_AUTOMAKE_VERSION([1.13.4])
m4trace:configure.ac:45: -1- _AM_AUTOCONF_VERSION([2.69])
m4trace:configure.ac:45: -1- m4_pattern_allow([^INSTALL_PROGRAM$])
m4trace:configure.ac:45: -1- m4_pattern_allow([^INSTALL_SCRIPT$])
m4trace:configure.ac:45: -1- m4_pattern_allow([^INSTALL_DATA$])
m4trace:configure.ac:45: -1- m4_pattern_allow([^am__isrc$])
m4trace:configure.ac:45: -1- _AM_SUBST_NOTMAKE([am__isrc])
m4trace:configure.ac:45: -1- m4_pattern_allow([^CYGPATH_W$])
m4trace:configure.ac:45: -1- _AM_SET_OPTIONS([1.10 tar-ustar])
m4trace:configure.ac:45: -1- _AM_SET_OPTION([1.10])
m4trace:configure.ac:45: -2- _AM_MANGLE_OPTION([1.10])
m4trace:configure.ac:45: -1- _AM_SET_OPTION([tar-ustar])
m4trace:configure.ac:45: -2- _AM_MANGLE_OPTION([tar-ustar])
m4trace:configure.ac:45: -1- m4_pattern_allow([^PACKAGE$])
m4trace:configure.ac:45: -1- m4_pattern_allow([^VERSION$])
m4trace:configure.ac:45: -1- _AM_IF_OPTION([no-define], [], [AC_DEFINE_UNQUOTED([PACKAGE], ["$PACKAGE"], [Name of package])
 AC_DEFINE_UNQUOTED([VERSION], ["$VERSION"], [Version number of package])])
m4trace:configure.ac:45: -2- _AM_MANGLE_OPTION([no-define])
m4trace:configure.ac:45: -1- m4_pattern_allow([^PACKAGE$])
m4trace:configure.ac:45: -1- m4_pattern_allow([^VERSION$])
m4trace:configure.ac:45: -1- AM_SANITY_CHECK
m4trace:configure.ac:45: -1- AM_MISSING_PROG([ACLOCAL], [aclocal-${am__api_version}])
m4trace:configure.ac:45: -1- AM_MISSING_HAS_RUN
m4trace:configure.ac:45: -1- AM_AUX_DIR_EXPAND
m4trace:configure.ac:45: -1- m4_pattern_allow([^ACLOCAL$])
m4trace:configure.ac:45: -1- AM_MISSING_PROG([AUTOCONF], [autoconf])
m4trace:configure.ac:45: -1- m4_pattern_allow([^AUTOCONF$])
m4trace:configure.ac:45: -1- AM_MISSING_PROG([AUTOMAKE], [automake-${am__api_version}])
m4trace:configure.ac:45: -1- m4_pattern_allow([^AUTOMAKE$])
m4trace:configure.ac:45: -1- AM_MISSING_PROG([AUTOHEADER], [autoheader])
m4trace:configure.ac:45: -1- m4_pattern_allow([^AUTOHEADER$])
m4trace:configure.ac:45: -1- AM_MISSING_PROG([MAKEINFO], [makeinfo])
m4trace:configure.ac:45: -1- m4_pattern_allow([^MAKEINFO$])
m4trace:configure.ac:45: -1- AM_PROG_INSTALL_SH
m4trace:configure.ac:45: -1- m4_pattern_allow([^install_sh$])
m4trace:configure.ac:45: -1- AM_PROG_INSTALL_STRIP
m4trace:configure.ac:45: -1- m4_pattern_allow([^STRIP$])
m4trace:configure.ac:45: -1- m4_pattern_allow([^INSTALL_STRIP_PROGRAM$])
m4trace:configure.ac:45: -1- m4_pattern_allow([^MKDIR_P$])
m4trace:configure.ac:45: -1- m4_pattern_allow([^mkdir_p$])
m4trace:configure.ac:45: -1- m4_pattern_allow([^AWK$])
m4trace:configure.ac:45: -1- m4_pattern_allow([^SET_MAKE$])
m4trace:configure.ac:45: -1- AM_SET_LEADING_DOT
m4trace:configure.ac:45: -1- m4_pattern_allow([^am__leading_dot$])
m4trace:configure.ac:45: -1- _AM_IF_OPTION([tar-ustar], [_AM_PROG_TAR([ustar])], [_AM_IF_OPTION([tar-pax], [_AM_PROG_TAR([pax])],
			     [_AM_PROG_TAR([v7])])])
m4trace:configure.ac:45: -2- _AM_MANGLE_OPTION([tar-ustar])
m4trace:configure.ac:45: -1- _AM_PROG_TAR([ustar])
m4trace:configure.ac:45: -1- m4_pattern_allow([^AMTAR$])
m4trace:configure.ac:45: -1- AM_RUN_LOG([$_am_tar --version])
m4trace:configure.ac:45: -1- AM_RUN_LOG([tardir=conftest.dir && eval $am__tar_ >conftest.tar])
m4trace:configure.ac:45: -1- AM_RUN_LOG([$am__untar <conftest.tar])
m4trace:configure.ac:45: -1- AM_RUN_LOG([cat conftest.dir/file])
m4trace:configure.ac:45: -1- m4_pattern_allow([^am__tar$])
m4trace:configure.ac:45: -1- m4_pattern_allow([^am__untar$])
m4trace:configure.ac:45: -1- _AM_IF_OPTION([no-dependencies], [], [AC_PROVIDE_IFELSE([AC_PROG_CC],
		  [_AM_DEPENDENCIES([CC])],
		  [m4_define([AC_PROG_CC],
			     m4_defn([AC_PROG_CC])[_AM_DEPENDENCIES([CC])])])dnl
AC_PROVIDE_IFELSE([AC_PROG_CXX],
		  [_AM_DEPENDENCIES([CXX])],
		  [m4_define([AC_PROG_CXX],
			     m4_defn([AC_PROG_CXX])[_AM_DEPENDENCIES([CXX])])])dnl
AC_PROVIDE_IFELSE([AC_PROG_OBJC],
		  [_AM_DEPENDENCIES([OBJC])],
		  [m4_define([AC_PROG_OBJC],
			     m4_defn([AC_PROG_OBJC])[_AM_DEPENDENCIES([OBJC])])])dnl
AC_PROVIDE_IFELSE([AC_PROG_OBJCXX],
		  [_AM_DEPENDENCIES([OBJCXX])],
		  [m4_define([AC_PROG_OBJCXX],
			     m4_defn([AC_PROG_OBJCXX])[_AM_DEPENDENCIES([OBJCXX])])])dnl
])
m4trace:configure.ac:45: -2- _AM_MANGLE_OPTION([no-dependencies])
m4trace:configure.ac:45: -1- AM_SILENT_RULES
m4trace:configure.ac:45: -1- m4_pattern_allow([^AM_V$])
m4trace:configure.ac:45: -1- AM_SUBST_NOTMAKE([AM_V])
m4trace:configure.ac:45: -1- _AM_SUBST_NOTMAKE([AM_V])
m4trace:configure.ac:45: -1- m4_pattern_allow([^AM_DEFAULT_V$])
m4trace:configure.ac:45: -1- AM_SUBST_NOTMAKE([AM_DEFAULT_V])
m4trace:configure.ac:45: -1- _AM_SUBST_NOTMAKE([AM_DEFAULT_V])
m4trace:configure.ac:45: -1- m4_pattern_allow([^AM_DEFAULT_VERBOSITY$])
m4trace:configure.ac:45: -1- m4_pattern_allow([^AM_BACKSLASH$])
m4trace:configure.ac:45: -1- _AM_SUBST_NOTMAKE([AM_BACKSLASH])
m4trace:configure.ac:50: -1- ABI_INIT_DIRS
m4trace:configure.ac:50: -1- m4_pattern_allow([^abinit_srcdir$])
m4trace:configure.ac:50: -1- m4_pattern_allow([^abinit_builddir$])
m4trace:configure.ac:50: -1- m4_pattern_allow([^abinit_moddir$])
m4trace:configure.ac:51: -1- ABI_INIT_VERSION
m4trace:configure.ac:51: -1- m4_pattern_allow([^ABINIT_VERSION$])
m4trace:configure.ac:51: -1- m4_pattern_allow([^ABINIT_VERSION_MAJOR$])
m4trace:configure.ac:51: -1- m4_pattern_allow([^ABINIT_VERSION_MINOR$])
m4trace:configure.ac:51: -1- m4_pattern_allow([^ABINIT_VERSION_MICRO$])
m4trace:configure.ac:51: -1- m4_pattern_allow([^ABINIT_VERSION_BUILD$])
m4trace:configure.ac:51: -1- m4_pattern_allow([^ABINIT_VERSION_BASE$])
m4trace:configure.ac:51: -1- m4_pattern_allow([^ABINIT_VERSION$])
m4trace:configure.ac:51: -1- m4_pattern_allow([^ABINIT_VERSION_MAJOR$])
m4trace:configure.ac:51: -1- m4_pattern_allow([^ABINIT_VERSION_MINOR$])
m4trace:configure.ac:51: -1- m4_pattern_allow([^ABINIT_VERSION_MICRO$])
m4trace:configure.ac:51: -1- m4_pattern_allow([^ABINIT_VERSION_BUILD$])
m4trace:configure.ac:51: -1- m4_pattern_allow([^ABINIT_VERSION_BASE$])
m4trace:configure.ac:52: -1- ABI_INIT_CPU_INFO
m4trace:configure.ac:52: -1- m4_pattern_allow([^abi_cpu_platform$])
m4trace:configure.ac:52: -1- m4_pattern_allow([^abi_cpu_vendor$])
m4trace:configure.ac:52: -1- m4_pattern_allow([^abi_cpu_model$])
m4trace:configure.ac:52: -1- m4_pattern_allow([^abi_cpu_spec$])
m4trace:configure.ac:52: -1- m4_pattern_allow([^abi_cpu_64bits$])
m4trace:configure.ac:52: -1- m4_pattern_allow([^abi_cpu_bits$])
m4trace:configure.ac:52: -1- m4_pattern_allow([^abi_sys_spec$])
m4trace:configure.ac:53: -1- ABI_INIT_OS_INFO
m4trace:configure.ac:53: -1- m4_pattern_allow([^HAVE_OS_LINUX$])
m4trace:configure.ac:53: -1- m4_pattern_allow([^HAVE_OS_MACOSX$])
m4trace:configure.ac:53: -1- m4_pattern_allow([^HAVE_OS_WINDOWS$])
m4trace:configure.ac:54: -1- ABI_INIT_HEADER
m4trace:configure.ac:55: -1- ABI_INIT_ARCH
m4trace:configure.ac:58: -1- m4_pattern_allow([^SET_MAKE$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^LN_S$])
m4trace:configure.ac:61: -1- m4_pattern_allow([^SED$])
m4trace:configure.ac:62: -1- m4_pattern_allow([^AWK$])
m4trace:configure.ac:63: -1- m4_pattern_allow([^GREP$])
m4trace:configure.ac:66: -1- AC_PROG_EGREP
m4trace:configure.ac:66: -1- m4_pattern_allow([^EGREP$])
m4trace:configure.ac:69: -1- ABI_PROG_MKDIR_P
m4trace:configure.ac:72: -1- m4_pattern_allow([^REALPATH$])
m4trace:configure.ac:76: -1- ABI_OPTIONS_DEFINE
m4trace:configure.ac:76: -2- _m4_warn([obsolete], [The macro `AC_HELP_STRING' is obsolete.
You should run autoupdate.], [../../lib/autoconf/general.m4:207: AC_HELP_STRING is expanded from...
config/m4/auto-options.m4:31: ABI_OPTIONS_DEFINE is expanded from...
configure.ac:76: the top level])
m4trace:configure.ac:76: -1- m4_pattern_allow([^enable_64bit_flags$])
m4trace:configure.ac:76: -2- _m4_warn([obsolete], [The macro `AC_HELP_STRING' is obsolete.
You should run autoupdate.], [../../lib/autoconf/general.m4:207: AC_HELP_STRING is expanded from...
config/m4/auto-options.m4:31: ABI_OPTIONS_DEFINE is expanded from...
configure.ac:76: the top level])
m4trace:configure.ac:76: -1- m4_pattern_allow([^enable_avx_safe_mode$])
m4trace:configure.ac:76: -2- _m4_warn([obsolete], [The macro `AC_HELP_STRING' is obsolete.
You should run autoupdate.], [../../lib/autoconf/general.m4:207: AC_HELP_STRING is expanded from...
config/m4/auto-options.m4:31: ABI_OPTIONS_DEFINE is expanded from...
configure.ac:76: the top level])
m4trace:configure.ac:76: -1- m4_pattern_allow([^enable_bse_unpacked$])
m4trace:configure.ac:76: -2- _m4_warn([obsolete], [The macro `AC_HELP_STRING' is obsolete.
You should run autoupdate.], [../../lib/autoconf/general.m4:207: AC_HELP_STRING is expanded from...
config/m4/auto-options.m4:31: ABI_OPTIONS_DEFINE is expanded from...
configure.ac:76: the top level])
m4trace:configure.ac:76: -1- m4_pattern_allow([^enable_cclock$])
m4trace:configure.ac:76: -2- _m4_warn([obsolete], [The macro `AC_HELP_STRING' is obsolete.
You should run autoupdate.], [../../lib/autoconf/general.m4:207: AC_HELP_STRING is expanded from...
config/m4/auto-options.m4:31: ABI_OPTIONS_DEFINE is expanded from...
configure.ac:76: the top level])
m4trace:configure.ac:76: -1- m4_pattern_allow([^enable_config_file$])
m4trace:configure.ac:76: -2- _m4_warn([obsolete], [The macro `AC_HELP_STRING' is obsolete.
You should run autoupdate.], [../../lib/autoconf/general.m4:207: AC_HELP_STRING is expanded from...
config/m4/auto-options.m4:31: ABI_OPTIONS_DEFINE is expanded from...
configure.ac:76: the top level])
m4trace:configure.ac:76: -1- m4_pattern_allow([^enable_connectors$])
m4trace:configure.ac:76: -2- _m4_warn([obsolete], [The macro `AC_HELP_STRING' is obsolete.
You should run autoupdate.], [../../lib/autoconf/general.m4:207: AC_HELP_STRING is expanded from...
config/m4/auto-options.m4:31: ABI_OPTIONS_DEFINE is expanded from...
configure.ac:76: the top level])
m4trace:configure.ac:76: -1- m4_pattern_allow([^enable_debug$])
m4trace:configure.ac:76: -2- _m4_warn([obsolete], [The macro `AC_HELP_STRING' is obsolete.
You should run autoupdate.], [../../lib/autoconf/general.m4:207: AC_HELP_STRING is expanded from...
config/m4/auto-options.m4:31: ABI_OPTIONS_DEFINE is expanded from...
configure.ac:76: the top level])
m4trace:configure.ac:76: -1- m4_pattern_allow([^enable_exports$])
m4trace:configure.ac:76: -2- _m4_warn([obsolete], [The macro `AC_HELP_STRING' is obsolete.
You should run autoupdate.], [../../lib/autoconf/general.m4:207: AC_HELP_STRING is expanded from...
config/m4/auto-options.m4:31: ABI_OPTIONS_DEFINE is expanded from...
configure.ac:76: the top level])
m4trace:configure.ac:76: -1- m4_pattern_allow([^enable_fallbacks$])
m4trace:configure.ac:76: -2- _m4_warn([obsolete], [The macro `AC_HELP_STRING' is obsolete.
You should run autoupdate.], [../../lib/autoconf/general.m4:207: AC_HELP_STRING is expanded from...
config/m4/auto-options.m4:31: ABI_OPTIONS_DEFINE is expanded from...
configure.ac:76: the top level])
m4trace:configure.ac:76: -1- m4_pattern_allow([^enable_fast_check$])
m4trace:configure.ac:76: -2- _m4_warn([obsolete], [The macro `AC_HELP_STRING' is obsolete.
You should run autoupdate.], [../../lib/autoconf/general.m4:207: AC_HELP_STRING is expanded from...
config/m4/auto-options.m4:31: ABI_OPTIONS_DEFINE is expanded from...
configure.ac:76: the top level])
m4trace:configure.ac:76: -1- m4_pattern_allow([^enable_fc_wrapper$])
m4trace:configure.ac:76: -2- _m4_warn([obsolete], [The macro `AC_HELP_STRING' is obsolete.
You should run autoupdate.], [../../lib/autoconf/general.m4:207: AC_HELP_STRING is expanded from...
config/m4/auto-options.m4:31: ABI_OPTIONS_DEFINE is expanded from...
configure.ac:76: the top level])
m4trace:configure.ac:76: -1- m4_pattern_allow([^enable_gpu$])
m4trace:configure.ac:76: -2- _m4_warn([obsolete], [The macro `AC_HELP_STRING' is obsolete.
You should run autoupdate.], [../../lib/autoconf/general.m4:207: AC_HELP_STRING is expanded from...
config/m4/auto-options.m4:31: ABI_OPTIONS_DEFINE is expanded from...
configure.ac:76: the top level])
m4trace:configure.ac:76: -1- m4_pattern_allow([^enable_gw_dpc$])
m4trace:configure.ac:76: -2- _m4_warn([obsolete], [The macro `AC_HELP_STRING' is obsolete.
You should run autoupdate.], [../../lib/autoconf/general.m4:207: AC_HELP_STRING is expanded from...
config/m4/auto-options.m4:31: ABI_OPTIONS_DEFINE is expanded from...
configure.ac:76: the top level])
m4trace:configure.ac:76: -1- m4_pattern_allow([^enable_hints$])
m4trace:configure.ac:76: -2- _m4_warn([obsolete], [The macro `AC_HELP_STRING' is obsolete.
You should run autoupdate.], [../../lib/autoconf/general.m4:207: AC_HELP_STRING is expanded from...
config/m4/auto-options.m4:31: ABI_OPTIONS_DEFINE is expanded from...
configure.ac:76: the top level])
m4trace:configure.ac:76: -1- m4_pattern_allow([^enable_lotf$])
m4trace:configure.ac:76: -2- _m4_warn([obsolete], [The macro `AC_HELP_STRING' is obsolete.
You should run autoupdate.], [../../lib/autoconf/general.m4:207: AC_HELP_STRING is expanded from...
config/m4/auto-options.m4:31: ABI_OPTIONS_DEFINE is expanded from...
configure.ac:76: the top level])
m4trace:configure.ac:76: -1- m4_pattern_allow([^enable_macroave$])
m4trace:configure.ac:76: -2- _m4_warn([obsolete], [The macro `AC_HELP_STRING' is obsolete.
You should run autoupdate.], [../../lib/autoconf/general.m4:207: AC_HELP_STRING is expanded from...
config/m4/auto-options.m4:31: ABI_OPTIONS_DEFINE is expanded from...
configure.ac:76: the top level])
m4trace:configure.ac:76: -1- m4_pattern_allow([^enable_maintainer_checks$])
m4trace:configure.ac:76: -2- _m4_warn([obsolete], [The macro `AC_HELP_STRING' is obsolete.
You should run autoupdate.], [../../lib/autoconf/general.m4:207: AC_HELP_STRING is expanded from...
config/m4/auto-options.m4:31: ABI_OPTIONS_DEFINE is expanded from...
configure.ac:76: the top level])
m4trace:configure.ac:76: -1- m4_pattern_allow([^enable_memory_profiling$])
m4trace:configure.ac:76: -2- _m4_warn([obsolete], [The macro `AC_HELP_STRING' is obsolete.
You should run autoupdate.], [../../lib/autoconf/general.m4:207: AC_HELP_STRING is expanded from...
config/m4/auto-options.m4:31: ABI_OPTIONS_DEFINE is expanded from...
configure.ac:76: the top level])
m4trace:configure.ac:76: -1- m4_pattern_allow([^enable_mpi$])
m4trace:configure.ac:76: -2- _m4_warn([obsolete], [The macro `AC_HELP_STRING' is obsolete.
You should run autoupdate.], [../../lib/autoconf/general.m4:207: AC_HELP_STRING is expanded from...
config/m4/auto-options.m4:31: ABI_OPTIONS_DEFINE is expanded from...
configure.ac:76: the top level])
m4trace:configure.ac:76: -1- m4_pattern_allow([^enable_mpi_inplace$])
m4trace:configure.ac:76: -2- _m4_warn([obsolete], [The macro `AC_HELP_STRING' is obsolete.
You should run autoupdate.], [../../lib/autoconf/general.m4:207: AC_HELP_STRING is expanded from...
config/m4/auto-options.m4:31: ABI_OPTIONS_DEFINE is expanded from...
configure.ac:76: the top level])
m4trace:configure.ac:76: -1- m4_pattern_allow([^enable_mpi_io$])
m4trace:configure.ac:76: -2- _m4_warn([obsolete], [The macro `AC_HELP_STRING' is obsolete.
You should run autoupdate.], [../../lib/autoconf/general.m4:207: AC_HELP_STRING is expanded from...
config/m4/auto-options.m4:31: ABI_OPTIONS_DEFINE is expanded from...
configure.ac:76: the top level])
m4trace:configure.ac:76: -1- m4_pattern_allow([^enable_mpi_io_default$])
m4trace:configure.ac:76: -2- _m4_warn([obsolete], [The macro `AC_HELP_STRING' is obsolete.
You should run autoupdate.], [../../lib/autoconf/general.m4:207: AC_HELP_STRING is expanded from...
config/m4/auto-options.m4:31: ABI_OPTIONS_DEFINE is expanded from...
configure.ac:76: the top level])
m4trace:configure.ac:76: -1- m4_pattern_allow([^enable_netcdf_default$])
m4trace:configure.ac:76: -2- _m4_warn([obsolete], [The macro `AC_HELP_STRING' is obsolete.
You should run autoupdate.], [../../lib/autoconf/general.m4:207: AC_HELP_STRING is expanded from...
config/m4/auto-options.m4:31: ABI_OPTIONS_DEFINE is expanded from...
configure.ac:76: the top level])
m4trace:configure.ac:76: -1- m4_pattern_allow([^enable_openmp$])
m4trace:configure.ac:76: -2- _m4_warn([obsolete], [The macro `AC_HELP_STRING' is obsolete.
You should run autoupdate.], [../../lib/autoconf/general.m4:207: AC_HELP_STRING is expanded from...
config/m4/auto-options.m4:31: ABI_OPTIONS_DEFINE is expanded from...
configure.ac:76: the top level])
m4trace:configure.ac:76: -1- m4_pattern_allow([^enable_optim$])
m4trace:configure.ac:76: -2- _m4_warn([obsolete], [The macro `AC_HELP_STRING' is obsolete.
You should run autoupdate.], [../../lib/autoconf/general.m4:207: AC_HELP_STRING is expanded from...
config/m4/auto-options.m4:31: ABI_OPTIONS_DEFINE is expanded from...
configure.ac:76: the top level])
m4trace:configure.ac:76: -1- m4_pattern_allow([^enable_stdin$])
m4trace:configure.ac:76: -2- _m4_warn([obsolete], [The macro `AC_HELP_STRING' is obsolete.
You should run autoupdate.], [../../lib/autoconf/general.m4:207: AC_HELP_STRING is expanded from...
config/m4/auto-options.m4:31: ABI_OPTIONS_DEFINE is expanded from...
configure.ac:76: the top level])
m4trace:configure.ac:76: -1- m4_pattern_allow([^enable_triqs_v1_4$])
m4trace:configure.ac:76: -2- _m4_warn([obsolete], [The macro `AC_HELP_STRING' is obsolete.
You should run autoupdate.], [../../lib/autoconf/general.m4:207: AC_HELP_STRING is expanded from...
config/m4/auto-options.m4:31: ABI_OPTIONS_DEFINE is expanded from...
configure.ac:76: the top level])
m4trace:configure.ac:76: -1- m4_pattern_allow([^enable_triqs_v2_0$])
m4trace:configure.ac:76: -2- _m4_warn([obsolete], [The macro `AC_HELP_STRING' is obsolete.
You should run autoupdate.], [../../lib/autoconf/general.m4:207: AC_HELP_STRING is expanded from...
config/m4/auto-options.m4:31: ABI_OPTIONS_DEFINE is expanded from...
configure.ac:76: the top level])
m4trace:configure.ac:76: -1- m4_pattern_allow([^enable_wannier90_v1$])
m4trace:configure.ac:76: -2- _m4_warn([obsolete], [The macro `AC_HELP_STRING' is obsolete.
You should run autoupdate.], [../../lib/autoconf/general.m4:207: AC_HELP_STRING is expanded from...
config/m4/auto-options.m4:31: ABI_OPTIONS_DEFINE is expanded from...
configure.ac:76: the top level])
m4trace:configure.ac:76: -1- m4_pattern_allow([^enable_xml$])
m4trace:configure.ac:76: -2- _m4_warn([obsolete], [The macro `AC_HELP_STRING' is obsolete.
You should run autoupdate.], [../../lib/autoconf/general.m4:207: AC_HELP_STRING is expanded from...
config/m4/auto-options.m4:31: ABI_OPTIONS_DEFINE is expanded from...
configure.ac:76: the top level])
m4trace:configure.ac:76: -1- m4_pattern_allow([^enable_zdot_bugfix$])
m4trace:configure.ac:76: -2- _m4_warn([obsolete], [The macro `AC_HELP_STRING' is obsolete.
You should run autoupdate.], [../../lib/autoconf/general.m4:207: AC_HELP_STRING is expanded from...
config/m4/auto-options.m4:31: ABI_OPTIONS_DEFINE is expanded from...
configure.ac:76: the top level])
m4trace:configure.ac:76: -1- m4_pattern_allow([^with_algo_flavor$])
m4trace:configure.ac:76: -2- _m4_warn([obsolete], [The macro `AC_HELP_STRING' is obsolete.
You should run autoupdate.], [../../lib/autoconf/general.m4:207: AC_HELP_STRING is expanded from...
config/m4/auto-options.m4:31: ABI_OPTIONS_DEFINE is expanded from...
configure.ac:76: the top level])
m4trace:configure.ac:76: -1- m4_pattern_allow([^with_algo_incs$])
m4trace:configure.ac:76: -2- _m4_warn([obsolete], [The macro `AC_HELP_STRING' is obsolete.
You should run autoupdate.], [../../lib/autoconf/general.m4:207: AC_HELP_STRING is expanded from...
config/m4/auto-options.m4:31: ABI_OPTIONS_DEFINE is expanded from...
configure.ac:76: the top level])
m4trace:configure.ac:76: -1- m4_pattern_allow([^with_algo_libs$])
m4trace:configure.ac:76: -2- _m4_warn([obsolete], [The macro `AC_HELP_STRING' is obsolete.
You should run autoupdate.], [../../lib/autoconf/general.m4:207: AC_HELP_STRING is expanded from...
config/m4/auto-options.m4:31: ABI_OPTIONS_DEFINE is expanded from...
configure.ac:76: the top level])
m4trace:configure.ac:76: -1- m4_pattern_allow([^with_atompaw_bins$])
m4trace:configure.ac:76: -2- _m4_warn([obsolete], [The macro `AC_HELP_STRING' is obsolete.
You should run autoupdate.], [../../lib/autoconf/general.m4:207: AC_HELP_STRING is expanded from...
config/m4/auto-options.m4:31: ABI_OPTIONS_DEFINE is expanded from...
configure.ac:76: the top level])
m4trace:configure.ac:76: -1- m4_pattern_allow([^with_atompaw_incs$])
m4trace:configure.ac:76: -2- _m4_warn([obsolete], [The macro `AC_HELP_STRING' is obsolete.
You should run autoupdate.], [../../lib/autoconf/general.m4:207: AC_HELP_STRING is expanded from...
config/m4/auto-options.m4:31: ABI_OPTIONS_DEFINE is expanded from...
configure.ac:76: the top level])
m4trace:configure.ac:76: -1- m4_pattern_allow([^with_atompaw_libs$])
m4trace:configure.ac:76: -2- _m4_warn([obsolete], [The macro `AC_HELP_STRING' is obsolete.
You should run autoupdate.], [../../lib/autoconf/general.m4:207: AC_HELP_STRING is expanded from...
config/m4/auto-options.m4:31: ABI_OPTIONS_DEFINE is expanded from...
configure.ac:76: the top level])
m4trace:configure.ac:76: -1- m4_pattern_allow([^with_bigdft_incs$])
m4trace:configure.ac:76: -2- _m4_warn([obsolete], [The macro `AC_HELP_STRING' is obsolete.
You should run autoupdate.], [../../lib/autoconf/general.m4:207: AC_HELP_STRING is expanded from...
config/m4/auto-options.m4:31: ABI_OPTIONS_DEFINE is expanded from...
configure.ac:76: the top level])
m4trace:configure.ac:76: -1- m4_pattern_allow([^with_bigdft_libs$])
m4trace:configure.ac:76: -2- _m4_warn([obsolete], [The macro `AC_HELP_STRING' is obsolete.
You should run autoupdate.], [../../lib/autoconf/general.m4:207: AC_HELP_STRING is expanded from...
config/m4/auto-options.m4:31: ABI_OPTIONS_DEFINE is expanded from...
configure.ac:76: the top level])
m4trace:configure.ac:76: -1- m4_pattern_allow([^with_config_file$])
m4trace:configure.ac:76: -2- _m4_warn([obsolete], [The macro `AC_HELP_STRING' is obsolete.
You should run autoupdate.], [../../lib/autoconf/general.m4:207: AC_HELP_STRING is expanded from...
config/m4/auto-options.m4:31: ABI_OPTIONS_DEFINE is expanded from...
configure.ac:76: the top level])
m4trace:configure.ac:76: -1- m4_pattern_allow([^with_dft_flavor$])
m4trace:configure.ac:76: -2- _m4_warn([obsolete], [The macro `AC_HELP_STRING' is obsolete.
You should run autoupdate.], [../../lib/autoconf/general.m4:207: AC_HELP_STRING is expanded from...
config/m4/auto-options.m4:31: ABI_OPTIONS_DEFINE is expanded from...
configure.ac:76: the top level])
m4trace:configure.ac:76: -1- m4_pattern_allow([^with_fc_vendor$])
m4trace:configure.ac:76: -2- _m4_warn([obsolete], [The macro `AC_HELP_STRING' is obsolete.
You should run autoupdate.], [../../lib/autoconf/general.m4:207: AC_HELP_STRING is expanded from...
config/m4/auto-options.m4:31: ABI_OPTIONS_DEFINE is expanded from...
configure.ac:76: the top level])
m4trace:configure.ac:76: -1- m4_pattern_allow([^with_fc_version$])
m4trace:configure.ac:76: -2- _m4_warn([obsolete], [The macro `AC_HELP_STRING' is obsolete.
You should run autoupdate.], [../../lib/autoconf/general.m4:207: AC_HELP_STRING is expanded from...
config/m4/auto-options.m4:31: ABI_OPTIONS_DEFINE is expanded from...
configure.ac:76: the top level])
m4trace:configure.ac:76: -1- m4_pattern_allow([^with_fft_flavor$])
m4trace:configure.ac:76: -2- _m4_warn([obsolete], [The macro `AC_HELP_STRING' is obsolete.
You should run autoupdate.], [../../lib/autoconf/general.m4:207: AC_HELP_STRING is expanded from...
config/m4/auto-options.m4:31: ABI_OPTIONS_DEFINE is expanded from...
configure.ac:76: the top level])
m4trace:configure.ac:76: -1- m4_pattern_allow([^with_fft_incs$])
m4trace:configure.ac:76: -2- _m4_warn([obsolete], [The macro `AC_HELP_STRING' is obsolete.
You should run autoupdate.], [../../lib/autoconf/general.m4:207: AC_HELP_STRING is expanded from...
config/m4/auto-options.m4:31: ABI_OPTIONS_DEFINE is expanded from...
configure.ac:76: the top level])
m4trace:configure.ac:76: -1- m4_pattern_allow([^with_fft_libs$])
m4trace:configure.ac:76: -2- _m4_warn([obsolete], [The macro `AC_HELP_STRING' is obsolete.
You should run autoupdate.], [../../lib/autoconf/general.m4:207: AC_HELP_STRING is expanded from...
config/m4/auto-options.m4:31: ABI_OPTIONS_DEFINE is expanded from...
configure.ac:76: the top level])
m4trace:configure.ac:76: -1- m4_pattern_allow([^with_gpu_cflags$])
m4trace:configure.ac:76: -2- _m4_warn([obsolete], [The macro `AC_HELP_STRING' is obsolete.
You should run autoupdate.], [../../lib/autoconf/general.m4:207: AC_HELP_STRING is expanded from...
config/m4/auto-options.m4:31: ABI_OPTIONS_DEFINE is expanded from...
configure.ac:76: the top level])
m4trace:configure.ac:76: -1- m4_pattern_allow([^with_gpu_cppflags$])
m4trace:configure.ac:76: -2- _m4_warn([obsolete], [The macro `AC_HELP_STRING' is obsolete.
You should run autoupdate.], [../../lib/autoconf/general.m4:207: AC_HELP_STRING is expanded from...
config/m4/auto-options.m4:31: ABI_OPTIONS_DEFINE is expanded from...
configure.ac:76: the top level])
m4trace:configure.ac:76: -1- m4_pattern_allow([^with_gpu_flavor$])
m4trace:configure.ac:76: -2- _m4_warn([obsolete], [The macro `AC_HELP_STRING' is obsolete.
You should run autoupdate.], [../../lib/autoconf/general.m4:207: AC_HELP_STRING is expanded from...
config/m4/auto-options.m4:31: ABI_OPTIONS_DEFINE is expanded from...
configure.ac:76: the top level])
m4trace:configure.ac:76: -1- m4_pattern_allow([^with_gpu_incs$])
m4trace:configure.ac:76: -2- _m4_warn([obsolete], [The macro `AC_HELP_STRING' is obsolete.
You should run autoupdate.], [../../lib/autoconf/general.m4:207: AC_HELP_STRING is expanded from...
config/m4/auto-options.m4:31: ABI_OPTIONS_DEFINE is expanded from...
configure.ac:76: the top level])
m4trace:configure.ac:76: -1- m4_pattern_allow([^with_gpu_ldflags$])
m4trace:configure.ac:76: -2- _m4_warn([obsolete], [The macro `AC_HELP_STRING' is obsolete.
You should run autoupdate.], [../../lib/autoconf/general.m4:207: AC_HELP_STRING is expanded from...
config/m4/auto-options.m4:31: ABI_OPTIONS_DEFINE is expanded from...
configure.ac:76: the top level])
m4trace:configure.ac:76: -1- m4_pattern_allow([^with_gpu_libs$])
m4trace:configure.ac:76: -2- _m4_warn([obsolete], [The macro `AC_HELP_STRING' is obsolete.
You should run autoupdate.], [../../lib/autoconf/general.m4:207: AC_HELP_STRING is expanded from...
config/m4/auto-options.m4:31: ABI_OPTIONS_DEFINE is expanded from...
configure.ac:76: the top level])
m4trace:configure.ac:76: -1- m4_pattern_allow([^with_gpu_prefix$])
m4trace:configure.ac:76: -2- _m4_warn([obsolete], [The macro `AC_HELP_STRING' is obsolete.
You should run autoupdate.], [../../lib/autoconf/general.m4:207: AC_HELP_STRING is expanded from...
config/m4/auto-options.m4:31: ABI_OPTIONS_DEFINE is expanded from...
configure.ac:76: the top level])
m4trace:configure.ac:76: -1- m4_pattern_allow([^with_libxc_incs$])
m4trace:configure.ac:76: -2- _m4_warn([obsolete], [The macro `AC_HELP_STRING' is obsolete.
You should run autoupdate.], [../../lib/autoconf/general.m4:207: AC_HELP_STRING is expanded from...
config/m4/auto-options.m4:31: ABI_OPTIONS_DEFINE is expanded from...
configure.ac:76: the top level])
m4trace:configure.ac:76: -1- m4_pattern_allow([^with_libxc_libs$])
m4trace:configure.ac:76: -2- _m4_warn([obsolete], [The macro `AC_HELP_STRING' is obsolete.
You should run autoupdate.], [../../lib/autoconf/general.m4:207: AC_HELP_STRING is expanded from...
config/m4/auto-options.m4:31: ABI_OPTIONS_DEFINE is expanded from...
configure.ac:76: the top level])
m4trace:configure.ac:76: -1- m4_pattern_allow([^with_linalg_flavor$])
m4trace:configure.ac:76: -2- _m4_warn([obsolete], [The macro `AC_HELP_STRING' is obsolete.
You should run autoupdate.], [../../lib/autoconf/general.m4:207: AC_HELP_STRING is expanded from...
config/m4/auto-options.m4:31: ABI_OPTIONS_DEFINE is expanded from...
configure.ac:76: the top level])
m4trace:configure.ac:76: -1- m4_pattern_allow([^with_linalg_incs$])
m4trace:configure.ac:76: -2- _m4_warn([obsolete], [The macro `AC_HELP_STRING' is obsolete.
You should run autoupdate.], [../../lib/autoconf/general.m4:207: AC_HELP_STRING is expanded from...
config/m4/auto-options.m4:31: ABI_OPTIONS_DEFINE is expanded from...
configure.ac:76: the top level])
m4trace:configure.ac:76: -1- m4_pattern_allow([^with_linalg_libs$])
m4trace:configure.ac:76: -2- _m4_warn([obsolete], [The macro `AC_HELP_STRING' is obsolete.
You should run autoupdate.], [../../lib/autoconf/general.m4:207: AC_HELP_STRING is expanded from...
config/m4/auto-options.m4:31: ABI_OPTIONS_DEFINE is expanded from...
configure.ac:76: the top level])
m4trace:configure.ac:76: -1- m4_pattern_allow([^with_math_flavor$])
m4trace:configure.ac:76: -2- _m4_warn([obsolete], [The macro `AC_HELP_STRING' is obsolete.
You should run autoupdate.], [../../lib/autoconf/general.m4:207: AC_HELP_STRING is expanded from...
config/m4/auto-options.m4:31: ABI_OPTIONS_DEFINE is expanded from...
configure.ac:76: the top level])
m4trace:configure.ac:76: -1- m4_pattern_allow([^with_math_incs$])
m4trace:configure.ac:76: -2- _m4_warn([obsolete], [The macro `AC_HELP_STRING' is obsolete.
You should run autoupdate.], [../../lib/autoconf/general.m4:207: AC_HELP_STRING is expanded from...
config/m4/auto-options.m4:31: ABI_OPTIONS_DEFINE is expanded from...
configure.ac:76: the top level])
m4trace:configure.ac:76: -1- m4_pattern_allow([^with_math_libs$])
m4trace:configure.ac:76: -2- _m4_warn([obsolete], [The macro `AC_HELP_STRING' is obsolete.
You should run autoupdate.], [../../lib/autoconf/general.m4:207: AC_HELP_STRING is expanded from...
config/m4/auto-options.m4:31: ABI_OPTIONS_DEFINE is expanded from...
configure.ac:76: the top level])
m4trace:configure.ac:76: -1- m4_pattern_allow([^with_mpi_incs$])
m4trace:configure.ac:76: -2- _m4_warn([obsolete], [The macro `AC_HELP_STRING' is obsolete.
You should run autoupdate.], [../../lib/autoconf/general.m4:207: AC_HELP_STRING is expanded from...
config/m4/auto-options.m4:31: ABI_OPTIONS_DEFINE is expanded from...
configure.ac:76: the top level])
m4trace:configure.ac:76: -1- m4_pattern_allow([^with_mpi_level$])
m4trace:configure.ac:76: -2- _m4_warn([obsolete], [The macro `AC_HELP_STRING' is obsolete.
You should run autoupdate.], [../../lib/autoconf/general.m4:207: AC_HELP_STRING is expanded from...
config/m4/auto-options.m4:31: ABI_OPTIONS_DEFINE is expanded from...
configure.ac:76: the top level])
m4trace:configure.ac:76: -1- m4_pattern_allow([^with_mpi_libs$])
m4trace:configure.ac:76: -2- _m4_warn([obsolete], [The macro `AC_HELP_STRING' is obsolete.
You should run autoupdate.], [../../lib/autoconf/general.m4:207: AC_HELP_STRING is expanded from...
config/m4/auto-options.m4:31: ABI_OPTIONS_DEFINE is expanded from...
configure.ac:76: the top level])
m4trace:configure.ac:76: -1- m4_pattern_allow([^with_mpi_prefix$])
m4trace:configure.ac:76: -2- _m4_warn([obsolete], [The macro `AC_HELP_STRING' is obsolete.
You should run autoupdate.], [../../lib/autoconf/general.m4:207: AC_HELP_STRING is expanded from...
config/m4/auto-options.m4:31: ABI_OPTIONS_DEFINE is expanded from...
configure.ac:76: the top level])
m4trace:configure.ac:76: -1- m4_pattern_allow([^with_netcdf_incs$])
m4trace:configure.ac:76: -2- _m4_warn([obsolete], [The macro `AC_HELP_STRING' is obsolete.
You should run autoupdate.], [../../lib/autoconf/general.m4:207: AC_HELP_STRING is expanded from...
config/m4/auto-options.m4:31: ABI_OPTIONS_DEFINE is expanded from...
configure.ac:76: the top level])
m4trace:configure.ac:76: -1- m4_pattern_allow([^with_netcdf_libs$])
m4trace:configure.ac:76: -2- _m4_warn([obsolete], [The macro `AC_HELP_STRING' is obsolete.
You should run autoupdate.], [../../lib/autoconf/general.m4:207: AC_HELP_STRING is expanded from...
config/m4/auto-options.m4:31: ABI_OPTIONS_DEFINE is expanded from...
configure.ac:76: the top level])
m4trace:configure.ac:76: -1- m4_pattern_allow([^with_psml_incs$])
m4trace:configure.ac:76: -2- _m4_warn([obsolete], [The macro `AC_HELP_STRING' is obsolete.
You should run autoupdate.], [../../lib/autoconf/general.m4:207: AC_HELP_STRING is expanded from...
config/m4/auto-options.m4:31: ABI_OPTIONS_DEFINE is expanded from...
configure.ac:76: the top level])
m4trace:configure.ac:76: -1- m4_pattern_allow([^with_psml_libs$])
m4trace:configure.ac:76: -2- _m4_warn([obsolete], [The macro `AC_HELP_STRING' is obsolete.
You should run autoupdate.], [../../lib/autoconf/general.m4:207: AC_HELP_STRING is expanded from...
config/m4/auto-options.m4:31: ABI_OPTIONS_DEFINE is expanded from...
configure.ac:76: the top level])
m4trace:configure.ac:76: -1- m4_pattern_allow([^with_tardir$])
m4trace:configure.ac:76: -2- _m4_warn([obsolete], [The macro `AC_HELP_STRING' is obsolete.
You should run autoupdate.], [../../lib/autoconf/general.m4:207: AC_HELP_STRING is expanded from...
config/m4/auto-options.m4:31: ABI_OPTIONS_DEFINE is expanded from...
configure.ac:76: the top level])
m4trace:configure.ac:76: -1- m4_pattern_allow([^with_timer_flavor$])
m4trace:configure.ac:76: -2- _m4_warn([obsolete], [The macro `AC_HELP_STRING' is obsolete.
You should run autoupdate.], [../../lib/autoconf/general.m4:207: AC_HELP_STRING is expanded from...
config/m4/auto-options.m4:31: ABI_OPTIONS_DEFINE is expanded from...
configure.ac:76: the top level])
m4trace:configure.ac:76: -1- m4_pattern_allow([^with_timer_incs$])
m4trace:configure.ac:76: -2- _m4_warn([obsolete], [The macro `AC_HELP_STRING' is obsolete.
You should run autoupdate.], [../../lib/autoconf/general.m4:207: AC_HELP_STRING is expanded from...
config/m4/auto-options.m4:31: ABI_OPTIONS_DEFINE is expanded from...
configure.ac:76: the top level])
m4trace:configure.ac:76: -1- m4_pattern_allow([^with_timer_libs$])
m4trace:configure.ac:76: -2- _m4_warn([obsolete], [The macro `AC_HELP_STRING' is obsolete.
You should run autoupdate.], [../../lib/autoconf/general.m4:207: AC_HELP_STRING is expanded from...
config/m4/auto-options.m4:31: ABI_OPTIONS_DEFINE is expanded from...
configure.ac:76: the top level])
m4trace:configure.ac:76: -1- m4_pattern_allow([^with_trio_flavor$])
m4trace:configure.ac:76: -2- _m4_warn([obsolete], [The macro `AC_HELP_STRING' is obsolete.
You should run autoupdate.], [../../lib/autoconf/general.m4:207: AC_HELP_STRING is expanded from...
config/m4/auto-options.m4:31: ABI_OPTIONS_DEFINE is expanded from...
configure.ac:76: the top level])
m4trace:configure.ac:76: -1- m4_pattern_allow([^with_triqs_incs$])
m4trace:configure.ac:76: -2- _m4_warn([obsolete], [The macro `AC_HELP_STRING' is obsolete.
You should run autoupdate.], [../../lib/autoconf/general.m4:207: AC_HELP_STRING is expanded from...
config/m4/auto-options.m4:31: ABI_OPTIONS_DEFINE is expanded from...
configure.ac:76: the top level])
m4trace:configure.ac:76: -1- m4_pattern_allow([^with_triqs_libs$])
m4trace:configure.ac:76: -2- _m4_warn([obsolete], [The macro `AC_HELP_STRING' is obsolete.
You should run autoupdate.], [../../lib/autoconf/general.m4:207: AC_HELP_STRING is expanded from...
config/m4/auto-options.m4:31: ABI_OPTIONS_DEFINE is expanded from...
configure.ac:76: the top level])
m4trace:configure.ac:76: -1- m4_pattern_allow([^with_wannier90_bins$])
m4trace:configure.ac:76: -2- _m4_warn([obsolete], [The macro `AC_HELP_STRING' is obsolete.
You should run autoupdate.], [../../lib/autoconf/general.m4:207: AC_HELP_STRING is expanded from...
config/m4/auto-options.m4:31: ABI_OPTIONS_DEFINE is expanded from...
configure.ac:76: the top level])
m4trace:configure.ac:76: -1- m4_pattern_allow([^with_wannier90_incs$])
m4trace:configure.ac:76: -2- _m4_warn([obsolete], [The macro `AC_HELP_STRING' is obsolete.
You should run autoupdate.], [../../lib/autoconf/general.m4:207: AC_HELP_STRING is expanded from...
config/m4/auto-options.m4:31: ABI_OPTIONS_DEFINE is expanded from...
configure.ac:76: the top level])
m4trace:configure.ac:76: -1- m4_pattern_allow([^with_wannier90_libs$])
m4trace:configure.ac:76: -2- _m4_warn([obsolete], [The macro `AC_HELP_STRING' is obsolete.
You should run autoupdate.], [../../lib/autoconf/general.m4:207: AC_HELP_STRING is expanded from...
config/m4/auto-options.m4:31: ABI_OPTIONS_DEFINE is expanded from...
configure.ac:76: the top level])
m4trace:configure.ac:76: -1- m4_pattern_allow([^with_yaml_incs$])
m4trace:configure.ac:76: -2- _m4_warn([obsolete], [The macro `AC_HELP_STRING' is obsolete.
You should run autoupdate.], [../../lib/autoconf/general.m4:207: AC_HELP_STRING is expanded from...
config/m4/auto-options.m4:31: ABI_OPTIONS_DEFINE is expanded from...
configure.ac:76: the top level])
m4trace:configure.ac:76: -1- m4_pattern_allow([^with_yaml_libs$])
m4trace:configure.ac:79: -1- ABI_ENV_BACKUP
m4trace:configure.ac:80: -1- ABI_OPTIONS_BACKUP
m4trace:configure.ac:82: -1- ABI_LOAD_OPTIONS
m4trace:configure.ac:82: -1- m4_pattern_allow([^abi_ac_distcheck$])
m4trace:configure.ac:83: -1- ABI_OPTIONS_RECALL
m4trace:configure.ac:84: -1- ABI_ENV_RECALL
m4trace:configure.ac:87: -1- ABI_OPTIONS_SETUP
m4trace:configure.ac:90: -1- ABI_ENV_INIT
m4trace:configure.ac:90: -1- m4_pattern_allow([^ABI_CPPFLAGS$])
m4trace:configure.ac:90: -1- m4_pattern_allow([^ARFLAGS_64BITS$])
m4trace:configure.ac:90: -1- m4_pattern_allow([^ARFLAGS_CMD$])
m4trace:configure.ac:90: -1- m4_pattern_allow([^ARFLAGS_DEBUG$])
m4trace:configure.ac:90: -1- m4_pattern_allow([^ARFLAGS_DEBUG$])
m4trace:configure.ac:90: -1- m4_pattern_allow([^ARFLAGS_EXTRA$])
m4trace:configure.ac:90: -1- m4_pattern_allow([^ARFLAGS_EXTRA$])
m4trace:configure.ac:90: -1- m4_pattern_allow([^ARFLAGS_HINTS$])
m4trace:configure.ac:90: -1- m4_pattern_allow([^ARFLAGS_OPTIM$])
m4trace:configure.ac:90: -1- m4_pattern_allow([^ARFLAGS_OPTIM$])
m4trace:configure.ac:90: -1- m4_pattern_allow([^CC_LDFLAGS$])
m4trace:configure.ac:90: -1- m4_pattern_allow([^CC_LDFLAGS$])
m4trace:configure.ac:90: -1- m4_pattern_allow([^CC_LDFLAGS_64BITS$])
m4trace:configure.ac:90: -1- m4_pattern_allow([^CC_LDFLAGS_DEBUG$])
m4trace:configure.ac:90: -1- m4_pattern_allow([^CC_LDFLAGS_DEBUG$])
m4trace:configure.ac:90: -1- m4_pattern_allow([^CC_LDFLAGS_EXTRA$])
m4trace:configure.ac:90: -1- m4_pattern_allow([^CC_LDFLAGS_GPU$])
m4trace:configure.ac:90: -1- m4_pattern_allow([^CC_LDFLAGS_HINTS$])
m4trace:configure.ac:90: -1- m4_pattern_allow([^CC_LDFLAGS_OPTIM$])
m4trace:configure.ac:90: -1- m4_pattern_allow([^CC_LDFLAGS_OPTIM$])
m4trace:configure.ac:90: -1- m4_pattern_allow([^CC_LIBS$])
m4trace:configure.ac:90: -1- m4_pattern_allow([^CC_LIBS$])
m4trace:configure.ac:90: -1- m4_pattern_allow([^CC_LIBS_64BITS$])
m4trace:configure.ac:90: -1- m4_pattern_allow([^CC_LIBS_DEBUG$])
m4trace:configure.ac:90: -1- m4_pattern_allow([^CC_LIBS_DEBUG$])
m4trace:configure.ac:90: -1- m4_pattern_allow([^CC_LIBS_EXTRA$])
m4trace:configure.ac:90: -1- m4_pattern_allow([^CC_LIBS_GPU$])
m4trace:configure.ac:90: -1- m4_pattern_allow([^CC_LIBS_HINTS$])
m4trace:configure.ac:90: -1- m4_pattern_allow([^CC_LIBS_OPTIM$])
m4trace:configure.ac:90: -1- m4_pattern_allow([^CC_LIBS_OPTIM$])
m4trace:configure.ac:90: -1- m4_pattern_allow([^CFLAGS_64BITS$])
m4trace:configure.ac:90: -1- m4_pattern_allow([^CFLAGS_DEBUG$])
m4trace:configure.ac:90: -1- m4_pattern_allow([^CFLAGS_DEBUG$])
m4trace:configure.ac:90: -1- m4_pattern_allow([^CFLAGS_EXTRA$])
m4trace:configure.ac:90: -1- m4_pattern_allow([^CFLAGS_EXTRA$])
m4trace:configure.ac:90: -1- m4_pattern_allow([^CFLAGS_GPU$])
m4trace:configure.ac:90: -1- m4_pattern_allow([^CFLAGS_HINTS$])
m4trace:configure.ac:90: -1- m4_pattern_allow([^CFLAGS_OPTIM$])
m4trace:configure.ac:90: -1- m4_pattern_allow([^CFLAGS_OPTIM$])
m4trace:configure.ac:90: -1- m4_pattern_allow([^CPPFLAGS_64BITS$])
m4trace:configure.ac:90: -1- m4_pattern_allow([^CPPFLAGS_DEBUG$])
m4trace:configure.ac:90: -1- m4_pattern_allow([^CPPFLAGS_DEBUG$])
m4trace:configure.ac:90: -1- m4_pattern_allow([^CPPFLAGS_EXTRA$])
m4trace:configure.ac:90: -1- m4_pattern_allow([^CPPFLAGS_EXTRA$])
m4trace:configure.ac:90: -1- m4_pattern_allow([^CPPFLAGS_GPU$])
m4trace:configure.ac:90: -1- m4_pattern_allow([^CPPFLAGS_HINTS$])
m4trace:configure.ac:90: -1- m4_pattern_allow([^CPPFLAGS_OPTIM$])
m4trace:configure.ac:90: -1- m4_pattern_allow([^CPPFLAGS_OPTIM$])
m4trace:configure.ac:90: -1- m4_pattern_allow([^CXXFLAGS_64BITS$])
m4trace:configure.ac:90: -1- m4_pattern_allow([^CXXFLAGS_DEBUG$])
m4trace:configure.ac:90: -1- m4_pattern_allow([^CXXFLAGS_DEBUG$])
m4trace:configure.ac:90: -1- m4_pattern_allow([^CXXFLAGS_EXTRA$])
m4trace:configure.ac:90: -1- m4_pattern_allow([^CXXFLAGS_EXTRA$])
m4trace:configure.ac:90: -1- m4_pattern_allow([^CXXFLAGS_GPU$])
m4trace:configure.ac:90: -1- m4_pattern_allow([^CXXFLAGS_HINTS$])
m4trace:configure.ac:90: -1- m4_pattern_allow([^CXXFLAGS_OPTIM$])
m4trace:configure.ac:90: -1- m4_pattern_allow([^CXXFLAGS_OPTIM$])
m4trace:configure.ac:90: -1- m4_pattern_allow([^CXX_LDFLAGS$])
m4trace:configure.ac:90: -1- m4_pattern_allow([^CXX_LDFLAGS_64BITS$])
m4trace:configure.ac:90: -1- m4_pattern_allow([^CXX_LDFLAGS_DEBUG$])
m4trace:configure.ac:90: -1- m4_pattern_allow([^CXX_LDFLAGS_DEBUG$])
m4trace:configure.ac:90: -1- m4_pattern_allow([^CXX_LDFLAGS_EXTRA$])
m4trace:configure.ac:90: -1- m4_pattern_allow([^CXX_LDFLAGS_EXTRA$])
m4trace:configure.ac:90: -1- m4_pattern_allow([^CXX_LDFLAGS_GPU$])
m4trace:configure.ac:90: -1- m4_pattern_allow([^CXX_LDFLAGS_HINTS$])
m4trace:configure.ac:90: -1- m4_pattern_allow([^CXX_LDFLAGS_OPTIM$])
m4trace:configure.ac:90: -1- m4_pattern_allow([^CXX_LDFLAGS_OPTIM$])
m4trace:configure.ac:90: -1- m4_pattern_allow([^CXX_LIBS$])
m4trace:configure.ac:90: -1- m4_pattern_allow([^CXX_LIBS$])
m4trace:configure.ac:90: -1- m4_pattern_allow([^CXX_LIBS_64BITS$])
m4trace:configure.ac:90: -1- m4_pattern_allow([^CXX_LIBS_DEBUG$])
m4trace:configure.ac:90: -1- m4_pattern_allow([^CXX_LIBS_DEBUG$])
m4trace:configure.ac:90: -1- m4_pattern_allow([^CXX_LIBS_EXTRA$])
m4trace:configure.ac:90: -1- m4_pattern_allow([^CXX_LIBS_GPU$])
m4trace:configure.ac:90: -1- m4_pattern_allow([^CXX_LIBS_HINTS$])
m4trace:configure.ac:90: -1- m4_pattern_allow([^CXX_LIBS_OPTIM$])
m4trace:configure.ac:90: -1- m4_pattern_allow([^CXX_LIBS_OPTIM$])
m4trace:configure.ac:90: -1- m4_pattern_allow([^FCFLAGS$])
m4trace:configure.ac:90: -1- m4_pattern_allow([^FCFLAGS_64BITS$])
m4trace:configure.ac:90: -1- m4_pattern_allow([^FCFLAGS_DEBUG$])
m4trace:configure.ac:90: -1- m4_pattern_allow([^FCFLAGS_DEBUG$])
m4trace:configure.ac:90: -1- m4_pattern_allow([^FCFLAGS_EXTRA$])
m4trace:configure.ac:90: -1- m4_pattern_allow([^FCFLAGS_EXTRA$])
m4trace:configure.ac:90: -1- m4_pattern_allow([^FCFLAGS_FIXEDFORM$])
m4trace:configure.ac:90: -1- m4_pattern_allow([^FCFLAGS_FIXEDFORM$])
m4trace:configure.ac:90: -1- m4_pattern_allow([^FCFLAGS_FREEFORM$])
m4trace:configure.ac:90: -1- m4_pattern_allow([^FCFLAGS_FREEFORM$])
m4trace:configure.ac:90: -1- m4_pattern_allow([^FCFLAGS_HINTS$])
m4trace:configure.ac:90: -1- m4_pattern_allow([^FCFLAGS_HINTS$])
m4trace:configure.ac:90: -1- m4_pattern_allow([^FCFLAGS_MODDIR$])
m4trace:configure.ac:90: -1- m4_pattern_allow([^FCFLAGS_MODDIR$])
m4trace:configure.ac:90: -1- m4_pattern_allow([^FCFLAGS_OPENMP$])
m4trace:configure.ac:90: -1- m4_pattern_allow([^FCFLAGS_OPENMP$])
m4trace:configure.ac:90: -1- m4_pattern_allow([^FCFLAGS_OPTIM$])
m4trace:configure.ac:90: -1- m4_pattern_allow([^FCFLAGS_OPTIM$])
m4trace:configure.ac:90: -1- m4_pattern_allow([^FC_LDFLAGS$])
m4trace:configure.ac:90: -1- m4_pattern_allow([^FC_LDFLAGS_64BITS$])
m4trace:configure.ac:90: -1- m4_pattern_allow([^FC_LDFLAGS_DEBUG$])
m4trace:configure.ac:90: -1- m4_pattern_allow([^FC_LDFLAGS_DEBUG$])
m4trace:configure.ac:90: -1- m4_pattern_allow([^FC_LDFLAGS_EXTRA$])
m4trace:configure.ac:90: -1- m4_pattern_allow([^FC_LDFLAGS_EXTRA$])
m4trace:configure.ac:90: -1- m4_pattern_allow([^FC_LDFLAGS_HINTS$])
m4trace:configure.ac:90: -1- m4_pattern_allow([^FC_LDFLAGS_OPTIM$])
m4trace:configure.ac:90: -1- m4_pattern_allow([^FC_LDFLAGS_OPTIM$])
m4trace:configure.ac:90: -1- m4_pattern_allow([^FC_LIBS$])
m4trace:configure.ac:90: -1- m4_pattern_allow([^FC_LIBS$])
m4trace:configure.ac:90: -1- m4_pattern_allow([^FC_LIBS_64BITS$])
m4trace:configure.ac:90: -1- m4_pattern_allow([^FC_LIBS_DEBUG$])
m4trace:configure.ac:90: -1- m4_pattern_allow([^FC_LIBS_DEBUG$])
m4trace:configure.ac:90: -1- m4_pattern_allow([^FC_LIBS_EXTRA$])
m4trace:configure.ac:90: -1- m4_pattern_allow([^FC_LIBS_HINTS$])
m4trace:configure.ac:90: -1- m4_pattern_allow([^FC_LIBS_OPTIM$])
m4trace:configure.ac:90: -1- m4_pattern_allow([^FC_LIBS_OPTIM$])
m4trace:configure.ac:90: -1- m4_pattern_allow([^FPP$])
m4trace:configure.ac:90: -1- m4_pattern_allow([^FPP$])
m4trace:configure.ac:90: -1- m4_pattern_allow([^FPPFLAGS$])
m4trace:configure.ac:90: -1- m4_pattern_allow([^FPPFLAGS$])
m4trace:configure.ac:90: -1- m4_pattern_allow([^FPPFLAGS_DEBUG$])
m4trace:configure.ac:90: -1- m4_pattern_allow([^FPPFLAGS_DEBUG$])
m4trace:configure.ac:90: -1- m4_pattern_allow([^FPPFLAGS_EXTRA$])
m4trace:configure.ac:90: -1- m4_pattern_allow([^FPPFLAGS_EXTRA$])
m4trace:configure.ac:90: -1- m4_pattern_allow([^FPPFLAGS_HINTS$])
m4trace:configure.ac:90: -1- m4_pattern_allow([^FPPFLAGS_OPTIM$])
m4trace:configure.ac:90: -1- m4_pattern_allow([^FPPFLAGS_OPTIM$])
m4trace:configure.ac:90: -1- m4_pattern_allow([^LTXFLAGS$])
m4trace:configure.ac:90: -1- m4_pattern_allow([^MDFLAGS$])
m4trace:configure.ac:90: -1- m4_pattern_allow([^MODEXT$])
m4trace:configure.ac:90: -1- m4_pattern_allow([^MPI_RUNNER$])
m4trace:configure.ac:90: -1- m4_pattern_allow([^MPI_RUNNER$])
m4trace:configure.ac:90: -1- m4_pattern_allow([^NVCC$])
m4trace:configure.ac:90: -1- m4_pattern_allow([^NVCC_CFLAGS$])
m4trace:configure.ac:90: -1- m4_pattern_allow([^NVCC_CPPFLAGS$])
m4trace:configure.ac:90: -1- m4_pattern_allow([^NVCC_LDFLAGS$])
m4trace:configure.ac:90: -1- m4_pattern_allow([^NVCC_LIBS$])
m4trace:configure.ac:90: -1- m4_pattern_allow([^PDFFLAGS$])
m4trace:configure.ac:90: -1- m4_pattern_allow([^PYFLAGS$])
m4trace:configure.ac:90: -1- m4_pattern_allow([^PYFLAGS$])
m4trace:configure.ac:90: -1- m4_pattern_allow([^PYTHON_CPPFLAGS$])
m4trace:configure.ac:90: -1- m4_pattern_allow([^PYTHON_CPPFLAGS$])
m4trace:configure.ac:90: -1- m4_pattern_allow([^SERIAL_RUNNER$])
m4trace:configure.ac:90: -1- m4_pattern_allow([^SERIAL_RUNNER$])
m4trace:configure.ac:90: -1- m4_pattern_allow([^XPP$])
m4trace:configure.ac:90: -1- m4_pattern_allow([^XPP$])
m4trace:configure.ac:90: -1- m4_pattern_allow([^XPPFLAGS$])
m4trace:configure.ac:90: -1- m4_pattern_allow([^XPPFLAGS$])
m4trace:configure.ac:90: -1- m4_pattern_allow([^XPPFLAGS_DEBUG$])
m4trace:configure.ac:90: -1- m4_pattern_allow([^XPPFLAGS_DEBUG$])
m4trace:configure.ac:90: -1- m4_pattern_allow([^XPPFLAGS_EXTRA$])
m4trace:configure.ac:90: -1- m4_pattern_allow([^XPPFLAGS_EXTRA$])
m4trace:configure.ac:90: -1- m4_pattern_allow([^XPPFLAGS_OPTIM$])
m4trace:configure.ac:90: -1- m4_pattern_allow([^XPPFLAGS_OPTIM$])
m4trace:configure.ac:92: -1- m4_pattern_allow([^CC_LDFLAGS$])
m4trace:configure.ac:93: -1- m4_pattern_allow([^CC_LIBS$])
m4trace:configure.ac:94: -1- m4_pattern_allow([^CXX_LDFLAGS$])
m4trace:configure.ac:95: -1- m4_pattern_allow([^CXX_LIBS$])
m4trace:configure.ac:96: -1- m4_pattern_allow([^FC_LDFLAGS$])
m4trace:configure.ac:97: -1- m4_pattern_allow([^FC_LIBS$])
m4trace:configure.ac:100: -1- ABI_INIT_INSTALL_DIRS
m4trace:configure.ac:100: -1- m4_pattern_allow([^abinit_prefix$])
m4trace:configure.ac:100: -1- m4_pattern_allow([^abinit_bindir$])
m4trace:configure.ac:100: -1- m4_pattern_allow([^abinit_chkdir$])
m4trace:configure.ac:100: -1- m4_pattern_allow([^abinit_datdir$])
m4trace:configure.ac:100: -1- m4_pattern_allow([^abinit_docdir$])
m4trace:configure.ac:100: -1- m4_pattern_allow([^abinit_incdir$])
m4trace:configure.ac:100: -1- m4_pattern_allow([^abinit_libdir$])
m4trace:configure.ac:100: -1- m4_pattern_allow([^abinit_mandir$])
m4trace:configure.ac:112: -1- ABI_CORELIBS_INIT
m4trace:configure.ac:112: -1- m4_pattern_allow([^src_01_gsl_ext_incs$])
m4trace:configure.ac:112: -1- m4_pattern_allow([^src_02_clib_incs$])
m4trace:configure.ac:112: -1- m4_pattern_allow([^src_10_defs_incs$])
m4trace:configure.ac:112: -1- m4_pattern_allow([^src_10_dumpinfo_incs$])
m4trace:configure.ac:112: -1- m4_pattern_allow([^src_11_memory_mpi_incs$])
m4trace:configure.ac:112: -1- m4_pattern_allow([^src_12_hide_mpi_incs$])
m4trace:configure.ac:112: -1- m4_pattern_allow([^src_14_hidewrite_incs$])
m4trace:configure.ac:112: -1- m4_pattern_allow([^src_15_gpu_toolbox_incs$])
m4trace:configure.ac:112: -1- m4_pattern_allow([^src_16_hideleave_incs$])
m4trace:configure.ac:112: -1- m4_pattern_allow([^src_17_libtetra_ext_incs$])
m4trace:configure.ac:112: -1- m4_pattern_allow([^src_18_timing_incs$])
m4trace:configure.ac:112: -1- m4_pattern_allow([^src_21_hashfuncs_incs$])
m4trace:configure.ac:112: -1- m4_pattern_allow([^src_27_toolbox_oop_incs$])
m4trace:configure.ac:112: -1- m4_pattern_allow([^src_28_numeric_noabirule_incs$])
m4trace:configure.ac:112: -1- m4_pattern_allow([^src_29_kpoints_incs$])
m4trace:configure.ac:112: -1- m4_pattern_allow([^src_32_util_incs$])
m4trace:configure.ac:112: -1- m4_pattern_allow([^src_41_geometry_incs$])
m4trace:configure.ac:112: -1- m4_pattern_allow([^src_41_xc_lowlevel_incs$])
m4trace:configure.ac:112: -1- m4_pattern_allow([^src_42_libpaw_incs$])
m4trace:configure.ac:112: -1- m4_pattern_allow([^src_42_nlstrain_incs$])
m4trace:configure.ac:112: -1- m4_pattern_allow([^src_42_parser_incs$])
m4trace:configure.ac:112: -1- m4_pattern_allow([^src_43_ptgroups_incs$])
m4trace:configure.ac:112: -1- m4_pattern_allow([^src_43_wvl_wrappers_incs$])
m4trace:configure.ac:112: -1- m4_pattern_allow([^src_44_abitools_incs$])
m4trace:configure.ac:112: -1- m4_pattern_allow([^src_44_abitypes_defs_incs$])
m4trace:configure.ac:112: -1- m4_pattern_allow([^src_45_geomoptim_incs$])
m4trace:configure.ac:112: -1- m4_pattern_allow([^src_45_xgTools_incs$])
m4trace:configure.ac:112: -1- m4_pattern_allow([^src_46_diago_incs$])
m4trace:configure.ac:112: -1- m4_pattern_allow([^src_49_gw_toolbox_oop_incs$])
m4trace:configure.ac:112: -1- m4_pattern_allow([^src_51_manage_mpi_incs$])
m4trace:configure.ac:112: -1- m4_pattern_allow([^src_52_fft_mpi_noabirule_incs$])
m4trace:configure.ac:112: -1- m4_pattern_allow([^src_52_manage_cuda_incs$])
m4trace:configure.ac:112: -1- m4_pattern_allow([^src_53_ffts_incs$])
m4trace:configure.ac:112: -1- m4_pattern_allow([^src_54_spacepar_incs$])
m4trace:configure.ac:112: -1- m4_pattern_allow([^src_55_abiutil_incs$])
m4trace:configure.ac:112: -1- m4_pattern_allow([^src_56_io_mpi_incs$])
m4trace:configure.ac:112: -1- m4_pattern_allow([^src_56_mixing_incs$])
m4trace:configure.ac:112: -1- m4_pattern_allow([^src_56_recipspace_incs$])
m4trace:configure.ac:112: -1- m4_pattern_allow([^src_56_xc_incs$])
m4trace:configure.ac:112: -1- m4_pattern_allow([^src_57_iopsp_parser_incs$])
m4trace:configure.ac:112: -1- m4_pattern_allow([^src_57_iovars_incs$])
m4trace:configure.ac:112: -1- m4_pattern_allow([^src_59_ionetcdf_incs$])
m4trace:configure.ac:112: -1- m4_pattern_allow([^src_61_occeig_incs$])
m4trace:configure.ac:112: -1- m4_pattern_allow([^src_62_cg_noabirule_incs$])
m4trace:configure.ac:112: -1- m4_pattern_allow([^src_62_ctqmc_incs$])
m4trace:configure.ac:112: -1- m4_pattern_allow([^src_62_iowfdenpot_incs$])
m4trace:configure.ac:112: -1- m4_pattern_allow([^src_62_poisson_incs$])
m4trace:configure.ac:112: -1- m4_pattern_allow([^src_62_wvl_wfs_incs$])
m4trace:configure.ac:112: -1- m4_pattern_allow([^src_63_bader_incs$])
m4trace:configure.ac:112: -1- m4_pattern_allow([^src_64_psp_incs$])
m4trace:configure.ac:112: -1- m4_pattern_allow([^src_65_lotf_base_incs$])
m4trace:configure.ac:112: -1- m4_pattern_allow([^src_65_paw_incs$])
m4trace:configure.ac:112: -1- m4_pattern_allow([^src_66_nonlocal_incs$])
m4trace:configure.ac:112: -1- m4_pattern_allow([^src_66_vdwxc_incs$])
m4trace:configure.ac:112: -1- m4_pattern_allow([^src_66_wfs_incs$])
m4trace:configure.ac:112: -1- m4_pattern_allow([^src_67_common_incs$])
m4trace:configure.ac:112: -1- m4_pattern_allow([^src_67_triqs_ext_incs$])
m4trace:configure.ac:112: -1- m4_pattern_allow([^src_68_dmft_incs$])
m4trace:configure.ac:112: -1- m4_pattern_allow([^src_68_lotf_incs$])
m4trace:configure.ac:112: -1- m4_pattern_allow([^src_68_recursion_incs$])
m4trace:configure.ac:112: -1- m4_pattern_allow([^src_68_rsprc_incs$])
m4trace:configure.ac:112: -1- m4_pattern_allow([^src_69_wfdesc_incs$])
m4trace:configure.ac:112: -1- m4_pattern_allow([^src_70_gw_incs$])
m4trace:configure.ac:112: -1- m4_pattern_allow([^src_71_bse_incs$])
m4trace:configure.ac:112: -1- m4_pattern_allow([^src_71_wannier_incs$])
m4trace:configure.ac:112: -1- m4_pattern_allow([^src_72_response_incs$])
m4trace:configure.ac:112: -1- m4_pattern_allow([^src_77_ddb_incs$])
m4trace:configure.ac:112: -1- m4_pattern_allow([^src_77_suscep_incs$])
m4trace:configure.ac:112: -1- m4_pattern_allow([^src_78_effpot_incs$])
m4trace:configure.ac:112: -1- m4_pattern_allow([^src_78_eph_incs$])
m4trace:configure.ac:112: -1- m4_pattern_allow([^src_79_seqpar_mpi_incs$])
m4trace:configure.ac:112: -1- m4_pattern_allow([^src_80_tdep_incs$])
m4trace:configure.ac:112: -1- m4_pattern_allow([^src_83_cut3d_incs$])
m4trace:configure.ac:112: -1- m4_pattern_allow([^src_84_fold2Bloch_incs$])
m4trace:configure.ac:112: -1- m4_pattern_allow([^src_94_scfcv_incs$])
m4trace:configure.ac:112: -1- m4_pattern_allow([^src_95_drive_incs$])
m4trace:configure.ac:112: -1- m4_pattern_allow([^src_incs_incs$])
m4trace:configure.ac:112: -1- m4_pattern_allow([^src_mods_incs$])
m4trace:configure.ac:120: -1- ABI_MSG_SECTION([Build-system information])
m4trace:configure.ac:126: -1- ABI_INFO_AUTOTOOLS
m4trace:configure.ac:126: -1- m4_pattern_allow([^abi_m4_version$])
m4trace:configure.ac:126: -1- m4_pattern_allow([^abi_ac_version$])
m4trace:configure.ac:126: -1- m4_pattern_allow([^abi_am_version$])
m4trace:configure.ac:126: -1- m4_pattern_allow([^abi_lt_version$])
m4trace:configure.ac:129: -1- ABI_OPTIONS_CHANGED
m4trace:configure.ac:139: -1- ABI_MSG_SECTION([Option consistency checking])
m4trace:configure.ac:204: -1- ABI_OPTIONS_PARSE
m4trace:configure.ac:212: -1- ABI_MSG_SECTION([Multicore architecture startup])
m4trace:configure.ac:215: -1- ABI_MPI_INIT
m4trace:configure.ac:215: -1- _ABI_MPI_CREATE_WRAPPER([CC], [${CC}], [${MPI_CC}])
m4trace:configure.ac:215: -1- _ABI_MPI_CREATE_WRAPPER([CXX], [${CXX}], [${MPI_CXX}])
m4trace:configure.ac:215: -1- _ABI_MPI_CREATE_WRAPPER([FC], [${FC}], [${MPI_FC}])
m4trace:configure.ac:215: -1- m4_pattern_allow([^MPI_RUNNER$])
m4trace:configure.ac:215: -1- m4_pattern_allow([^MPI_2PROCS$])
m4trace:configure.ac:215: -1- m4_pattern_allow([^lib_mpi_fcflags$])
m4trace:configure.ac:215: -1- m4_pattern_allow([^lib_mpi_ldflags$])
m4trace:configure.ac:215: -1- m4_pattern_allow([^lib_mpi_incs$])
m4trace:configure.ac:215: -1- m4_pattern_allow([^lib_mpi_libs$])
m4trace:configure.ac:223: -1- ABI_GPU_INIT
m4trace:configure.ac:223: -1- _ABI_GPU_INIT_CUDA
m4trace:configure.ac:223: -1- m4_pattern_allow([^NVCC$])
m4trace:configure.ac:223: -1- m4_pattern_allow([^lib_gpu_fcflags$])
m4trace:configure.ac:223: -1- m4_pattern_allow([^lib_gpu_ldflags$])
m4trace:configure.ac:223: -1- m4_pattern_allow([^lib_gpu_flavor$])
m4trace:configure.ac:223: -1- m4_pattern_allow([^lib_gpu_incs$])
m4trace:configure.ac:223: -1- m4_pattern_allow([^lib_gpu_libs$])
m4trace:configure.ac:236: -1- ABI_MSG_SECTION([Utilities])
m4trace:configure.ac:239: -1- m4_pattern_allow([^BOURNE_SHELL$])
m4trace:configure.ac:240: -1- m4_pattern_allow([^MV$])
m4trace:configure.ac:241: -1- m4_pattern_allow([^PERL$])
m4trace:configure.ac:242: -1- m4_pattern_allow([^RM$])
m4trace:configure.ac:244: -1- m4_pattern_allow([^PATCH$])
m4trace:configure.ac:245: -1- m4_pattern_allow([^TAR$])
m4trace:configure.ac:253: -1- ABI_MSG_SECTION([C support])
m4trace:configure.ac:256: -1- ABI_ENV_BACKUP
m4trace:configure.ac:262: -1- m4_pattern_allow([^abi_cc_path$])
m4trace:configure.ac:268: -1- m4_pattern_allow([^CC$])
m4trace:configure.ac:268: -1- m4_pattern_allow([^CFLAGS$])
m4trace:configure.ac:268: -1- m4_pattern_allow([^LDFLAGS$])
m4trace:configure.ac:268: -1- m4_pattern_allow([^LIBS$])
m4trace:configure.ac:268: -1- m4_pattern_allow([^CPPFLAGS$])
m4trace:configure.ac:268: -1- m4_pattern_allow([^CC$])
m4trace:configure.ac:268: -1- m4_pattern_allow([^CC$])
m4trace:configure.ac:268: -1- m4_pattern_allow([^CC$])
m4trace:configure.ac:268: -1- m4_pattern_allow([^CC$])
m4trace:configure.ac:268: -1- m4_pattern_allow([^ac_ct_CC$])
m4trace:configure.ac:268: -1- m4_pattern_allow([^EXEEXT$])
m4trace:configure.ac:268: -1- m4_pattern_allow([^OBJEXT$])
m4trace:configure.ac:268: -1- _AM_DEPENDENCIES([CC])
m4trace:configure.ac:268: -1- AM_SET_DEPDIR
m4trace:configure.ac:268: -1- m4_pattern_allow([^DEPDIR$])
m4trace:configure.ac:268: -1- AM_OUTPUT_DEPENDENCY_COMMANDS
m4trace:configure.ac:268: -1- AM_MAKE_INCLUDE
m4trace:configure.ac:268: -1- m4_pattern_allow([^am__include$])
m4trace:configure.ac:268: -1- m4_pattern_allow([^am__quote$])
m4trace:configure.ac:268: -1- AM_DEP_TRACK
m4trace:configure.ac:268: -1- AM_CONDITIONAL([AMDEP], [test "x$enable_dependency_tracking" != xno])
m4trace:configure.ac:268: -1- m4_pattern_allow([^AMDEP_TRUE$])
m4trace:configure.ac:268: -1- m4_pattern_allow([^AMDEP_FALSE$])
m4trace:configure.ac:268: -1- _AM_SUBST_NOTMAKE([AMDEP_TRUE])
m4trace:configure.ac:268: -1- _AM_SUBST_NOTMAKE([AMDEP_FALSE])
m4trace:configure.ac:268: -1- m4_pattern_allow([^AMDEPBACKSLASH$])
m4trace:configure.ac:268: -1- _AM_SUBST_NOTMAKE([AMDEPBACKSLASH])
m4trace:configure.ac:268: -1- m4_pattern_allow([^am__nodep$])
m4trace:configure.ac:268: -1- _AM_SUBST_NOTMAKE([am__nodep])
m4trace:configure.ac:268: -1- m4_pattern_allow([^CCDEPMODE$])
m4trace:configure.ac:268: -1- AM_CONDITIONAL([am__fastdepCC], [
  test "x$enable_dependency_tracking" != xno \
  && test "$am_cv_CC_dependencies_compiler_type" = gcc3])
m4trace:configure.ac:268: -1- m4_pattern_allow([^am__fastdepCC_TRUE$])
m4trace:configure.ac:268: -1- m4_pattern_allow([^am__fastdepCC_FALSE$])
m4trace:configure.ac:268: -1- _AM_SUBST_NOTMAKE([am__fastdepCC_TRUE])
m4trace:configure.ac:268: -1- _AM_SUBST_NOTMAKE([am__fastdepCC_FALSE])
m4trace:configure.ac:277: -1- m4_pattern_allow([^abi_cpp_path$])
m4trace:configure.ac:282: -1- m4_pattern_allow([^CPP$])
m4trace:configure.ac:282: -1- m4_pattern_allow([^CPPFLAGS$])
m4trace:configure.ac:282: -1- m4_pattern_allow([^CPP$])
m4trace:configure.ac:290: -1- ABI_PROG_CC
m4trace:configure.ac:290: -1- _ABI_CHECK_CC_IBM([${CC}])
m4trace:configure.ac:290: -1- m4_pattern_allow([^CC_IBM$])
m4trace:configure.ac:290: -1- m4_pattern_allow([^CC_IBM$])
m4trace:configure.ac:290: -1- _ABI_CHECK_CC_COMPAQ([${CC}])
m4trace:configure.ac:290: -1- m4_pattern_allow([^CC_COMPAQ$])
m4trace:configure.ac:290: -1- _ABI_CHECK_CC_INTEL([${CC}])
m4trace:configure.ac:290: -1- m4_pattern_allow([^CC_INTEL$])
m4trace:configure.ac:290: -1- _ABI_CHECK_CC_PATHSCALE([${CC}])
m4trace:configure.ac:290: -1- m4_pattern_allow([^CC_PATHSCALE$])
m4trace:configure.ac:290: -1- _ABI_CHECK_CC_OPEN64([${CC}])
m4trace:configure.ac:290: -1- m4_pattern_allow([^CC_OPEN64$])
m4trace:configure.ac:290: -1- _ABI_CHECK_CC_PGI([${CC}])
m4trace:configure.ac:290: -1- m4_pattern_allow([^CC_PGI$])
m4trace:configure.ac:290: -1- _ABI_CHECK_CC_SUN([${CC}])
m4trace:configure.ac:290: -1- m4_pattern_allow([^CC_SUN$])
m4trace:configure.ac:290: -1- _ABI_CHECK_CC_GNU([${CC}])
m4trace:configure.ac:290: -1- m4_pattern_allow([^CC_GNU$])
m4trace:configure.ac:290: -1- m4_pattern_allow([^abi_cc_vendor$])
m4trace:configure.ac:290: -1- m4_pattern_allow([^abi_cc_version$])
m4trace:configure.ac:290: -1- m4_pattern_allow([^cc_info_string$])
m4trace:configure.ac:297: -1- m4_pattern_allow([^STDC_HEADERS$])
m4trace:configure.ac:297: -1- m4_pattern_allow([^WORDS_BIGENDIAN$])
m4trace:configure.ac:297: -1- m4_pattern_allow([^AC_APPLE_UNIVERSAL_BUILD$])
m4trace:configure.ac:298: -1- m4_pattern_allow([^NDEBUG$])
m4trace:configure.ac:302: -1- m4_pattern_allow([^HAVE_MALLOC_H$])
m4trace:configure.ac:304: -1- m4_pattern_allow([^HAVE_MALLOC_MALLOC_H$])
m4trace:configure.ac:314: -1- ABI_MSG_SECTION([C++ support])
m4trace:configure.ac:317: -1- ABI_ENV_BACKUP
m4trace:configure.ac:323: -1- m4_pattern_allow([^abi_cxx_path$])
m4trace:configure.ac:329: -1- m4_pattern_allow([^CXX$])
m4trace:configure.ac:329: -1- m4_pattern_allow([^CXXFLAGS$])
m4trace:configure.ac:329: -1- m4_pattern_allow([^LDFLAGS$])
m4trace:configure.ac:329: -1- m4_pattern_allow([^LIBS$])
m4trace:configure.ac:329: -1- m4_pattern_allow([^CPPFLAGS$])
m4trace:configure.ac:329: -1- m4_pattern_allow([^CXX$])
m4trace:configure.ac:329: -1- m4_pattern_allow([^ac_ct_CXX$])
m4trace:configure.ac:329: -1- _AM_DEPENDENCIES([CXX])
m4trace:configure.ac:329: -1- m4_pattern_allow([^CXXDEPMODE$])
m4trace:configure.ac:329: -1- AM_CONDITIONAL([am__fastdepCXX], [
  test "x$enable_dependency_tracking" != xno \
  && test "$am_cv_CXX_dependencies_compiler_type" = gcc3])
m4trace:configure.ac:329: -1- m4_pattern_allow([^am__fastdepCXX_TRUE$])
m4trace:configure.ac:329: -1- m4_pattern_allow([^am__fastdepCXX_FALSE$])
m4trace:configure.ac:329: -1- _AM_SUBST_NOTMAKE([am__fastdepCXX_TRUE])
m4trace:configure.ac:329: -1- _AM_SUBST_NOTMAKE([am__fastdepCXX_FALSE])
m4trace:configure.ac:338: -1- ABI_PROG_CXX
m4trace:configure.ac:338: -1- _ABI_CHECK_CXX_IBM([${CXX}])
m4trace:configure.ac:338: -1- m4_pattern_allow([^CXX_IBM$])
m4trace:configure.ac:338: -1- m4_pattern_allow([^CXX_IBM$])
m4trace:configure.ac:338: -1- _ABI_CHECK_CXX_COMPAQ([${CXX}])
m4trace:configure.ac:338: -1- m4_pattern_allow([^CXX_COMPAQ$])
m4trace:configure.ac:338: -1- _ABI_CHECK_CXX_INTEL([${CXX}])
m4trace:configure.ac:338: -1- m4_pattern_allow([^CXX_INTEL$])
m4trace:configure.ac:338: -1- _ABI_CHECK_CXX_OPEN64([${CXX}])
m4trace:configure.ac:338: -1- m4_pattern_allow([^CXX_OPEN64$])
m4trace:configure.ac:338: -1- _ABI_CHECK_CXX_PATHSCALE([${CXX}])
m4trace:configure.ac:338: -1- m4_pattern_allow([^CXX_PATHSCALE$])
m4trace:configure.ac:338: -1- _ABI_CHECK_CXX_PGI([${CXX}])
m4trace:configure.ac:338: -1- m4_pattern_allow([^CXX_PGI$])
m4trace:configure.ac:338: -1- _ABI_CHECK_CXX_SUN([${CXX}])
m4trace:configure.ac:338: -1- m4_pattern_allow([^CXX_SUN$])
m4trace:configure.ac:338: -1- _ABI_CHECK_CXX_GNU([${CXX}])
m4trace:configure.ac:338: -1- m4_pattern_allow([^CXX_GNU$])
m4trace:configure.ac:338: -1- m4_pattern_allow([^abi_cxx_vendor$])
m4trace:configure.ac:338: -1- m4_pattern_allow([^abi_cxx_version$])
m4trace:configure.ac:338: -1- m4_pattern_allow([^cxx_info_string$])
m4trace:configure.ac:350: -1- ABI_MSG_SECTION([Fortran support])
m4trace:configure.ac:353: -1- ABI_ENV_BACKUP
m4trace:configure.ac:359: -1- m4_pattern_allow([^abi_fc_path$])
m4trace:configure.ac:365: -1- m4_pattern_allow([^FC$])
m4trace:configure.ac:365: -1- m4_pattern_allow([^FCFLAGS$])
m4trace:configure.ac:365: -1- m4_pattern_allow([^LDFLAGS$])
m4trace:configure.ac:365: -1- m4_pattern_allow([^LIBS$])
m4trace:configure.ac:365: -1- m4_pattern_allow([^FC$])
m4trace:configure.ac:365: -1- m4_pattern_allow([^ac_ct_FC$])
m4trace:configure.ac:374: -1- m4_pattern_allow([^abi_fpp_path$])
m4trace:configure.ac:382: -1- ABI_PROG_FC
m4trace:configure.ac:382: -1- _ABI_CHECK_FC_IBM([${FC}])
m4trace:configure.ac:382: -1- m4_pattern_allow([^FC_IBM$])
m4trace:configure.ac:382: -1- m4_pattern_allow([^FC_IBM$])
m4trace:configure.ac:382: -1- _ABI_CHECK_FC_INTEL([${FC}])
m4trace:configure.ac:382: -1- m4_pattern_allow([^FC_INTEL$])
m4trace:configure.ac:382: -1- _ABI_CHECK_FC_G95([${FC}])
m4trace:configure.ac:382: -1- m4_pattern_allow([^FC_G95$])
m4trace:configure.ac:382: -1- _ABI_CHECK_FC_GNU([${FC}])
m4trace:configure.ac:382: -1- m4_pattern_allow([^FC_GNU$])
m4trace:configure.ac:382: -1- m4_pattern_allow([^HAVE_FORTRAN2003$])
m4trace:configure.ac:382: -1- _ABI_CHECK_FC_PATHSCALE([${FC}])
m4trace:configure.ac:382: -1- m4_pattern_allow([^FC_PATHSCALE$])
m4trace:configure.ac:382: -1- _ABI_CHECK_FC_ABSOFT([${FC}])
m4trace:configure.ac:382: -1- m4_pattern_allow([^FC_ABSOFT$])
m4trace:configure.ac:382: -1- _ABI_CHECK_FC_MIPSPRO([${FC}])
m4trace:configure.ac:382: -1- m4_pattern_allow([^FC_MIPSPRO$])
m4trace:configure.ac:382: -1- _ABI_CHECK_FC_OPEN64([${FC}])
m4trace:configure.ac:382: -1- m4_pattern_allow([^FC_OPEN64$])
m4trace:configure.ac:382: -1- _ABI_CHECK_FC_FUJITSU([${FC}])
m4trace:configure.ac:382: -1- m4_pattern_allow([^FC_FUJITSU$])
m4trace:configure.ac:382: -1- _ABI_CHECK_FC_SUN([${FC}])
m4trace:configure.ac:382: -1- m4_pattern_allow([^FC_SUN$])
m4trace:configure.ac:382: -1- _ABI_CHECK_FC_HITACHI([${FC}])
m4trace:configure.ac:382: -1- m4_pattern_allow([^FC_HITACHI$])
m4trace:configure.ac:382: -1- _ABI_CHECK_FC_NAG([${FC}])
m4trace:configure.ac:382: -1- m4_pattern_allow([^FC_NAG$])
m4trace:configure.ac:382: -1- _ABI_CHECK_FC_PGI([${FC}])
m4trace:configure.ac:382: -1- m4_pattern_allow([^FC_PGI$])
m4trace:configure.ac:382: -1- m4_pattern_allow([^abi_fc_vendor$])
m4trace:configure.ac:382: -1- m4_pattern_allow([^abi_fc_version$])
m4trace:configure.ac:382: -1- m4_pattern_allow([^abi_fc_wrap$])
m4trace:configure.ac:382: -1- m4_pattern_allow([^fc_info_string$])
m4trace:configure.ac:385: -1- ABI_FC_EXTENSIONS
m4trace:configure.ac:385: -1- AX_F90_MODULE_EXTENSION
m4trace:configure.ac:385: -1- m4_pattern_allow([^FCFLAGS_F90$])
m4trace:configure.ac:388: -1- ABI_FC_MOD_CASE
m4trace:configure.ac:399: -1- m4_pattern_allow([^FCLIBS$])
m4trace:configure.ac:399: -1- m4_pattern_allow([^FC_DUMMY_MAIN$])
m4trace:configure.ac:399: -1- m4_pattern_allow([^FC_DUMMY_MAIN_EQ_F77$])
m4trace:configure.ac:399: -1- m4_pattern_allow([^FC_FUNC$])
m4trace:configure.ac:399: -1- m4_pattern_allow([^FC_FUNC_$])
m4trace:configure.ac:399: -1- m4_pattern_allow([^FC_FUNC$])
m4trace:configure.ac:399: -1- m4_pattern_allow([^FC_FUNC_$])
m4trace:configure.ac:399: -1- m4_pattern_allow([^FC_FUNC$])
m4trace:configure.ac:399: -1- m4_pattern_allow([^FC_FUNC_$])
m4trace:configure.ac:399: -1- m4_pattern_allow([^FC_FUNC$])
m4trace:configure.ac:399: -1- m4_pattern_allow([^FC_FUNC_$])
m4trace:configure.ac:399: -1- m4_pattern_allow([^FC_FUNC$])
m4trace:configure.ac:399: -1- m4_pattern_allow([^FC_FUNC_$])
m4trace:configure.ac:399: -1- m4_pattern_allow([^FC_FUNC$])
m4trace:configure.ac:399: -1- m4_pattern_allow([^FC_FUNC_$])
m4trace:configure.ac:399: -1- m4_pattern_allow([^FC_FUNC$])
m4trace:configure.ac:399: -1- m4_pattern_allow([^FC_FUNC_$])
m4trace:configure.ac:399: -1- m4_pattern_allow([^FC_FUNC$])
m4trace:configure.ac:399: -1- m4_pattern_allow([^FC_FUNC_$])
m4trace:configure.ac:405: -1- m4_pattern_allow([^HAVE_MPI_INCLUDED_ONCE$])
m4trace:configure.ac:414: -1- ABI_MSG_SECTION([Python support])
m4trace:configure.ac:417: -1- m4_pattern_allow([^PYTHON$])
m4trace:configure.ac:438: -1- m4_pattern_allow([^BAZAAR$])
m4trace:configure.ac:441: -1- ABI_CHECK_PYTHON
m4trace:configure.ac:441: -1- _ABI_CHECK_NUMPY_HEADERS
m4trace:configure.ac:441: -1- m4_pattern_allow([^HAVE_NUMPY$])
m4trace:configure.ac:441: -1- _ABI_CHECK_NUMPY_HEADERS
m4trace:configure.ac:441: -1- m4_pattern_allow([^HAVE_NUMPY$])
m4trace:configure.ac:454: -1- m4_pattern_allow([^HAVE_BZR_BRANCH$])
m4trace:configure.ac:458: -1- m4_pattern_allow([^bzr_branch$])
m4trace:configure.ac:459: -1- m4_pattern_allow([^bzr_revno$])
m4trace:configure.ac:460: -1- m4_pattern_allow([^bzr_clean$])
m4trace:configure.ac:468: -1- ABI_MSG_SECTION([Libraries and linking])
m4trace:configure.ac:471: -1- ABI_ENV_BACKUP
m4trace:configure.ac:479: -1- m4_pattern_allow([^AR$])
m4trace:configure.ac:484: -1- m4_pattern_allow([^ARFLAGS_CMD$])
m4trace:configure.ac:487: -1- m4_pattern_allow([^RANLIB$])
m4trace:configure.ac:498: -1- m4_pattern_allow([^AR$])
m4trace:configure.ac:499: -1- m4_pattern_allow([^ARFLAGS$])
m4trace:configure.ac:502: -1- m4_pattern_allow([^enable_shared$])
m4trace:configure.ac:503: -1- m4_pattern_allow([^enable_static$])
m4trace:configure.ac:504: -1- m4_pattern_allow([^with_gnu_ld$])
m4trace:configure.ac:512: -1- ABI_MSG_SECTION([Hints])
m4trace:configure.ac:516: -1- m4_pattern_allow([^TRUE_CPP$])
m4trace:configure.ac:519: -1- m4_pattern_allow([^TRUE_CPP$])
m4trace:configure.ac:571: -1- ABI_CPP_HINTS
m4trace:configure.ac:572: -1- ABI_CC_HINTS
m4trace:configure.ac:575: -1- ABI_XPP_HINTS
m4trace:configure.ac:576: -1- ABI_CXX_HINTS
m4trace:configure.ac:579: -1- ABI_FPP_HINTS
m4trace:configure.ac:580: -1- ABI_FC_HINTS
m4trace:configure.ac:583: -1- ABI_AR_HINTS
m4trace:configure.ac:619: -1- m4_pattern_allow([^CPPFLAGS_HINTS_EXT$])
m4trace:configure.ac:634: -1- ABI_MSG_SECTION([Debugging])
m4trace:configure.ac:637: -1- ABI_DEBUG_INIT([${enable_debug}], [${enable_optim}])
m4trace:configure.ac:637: -1- m4_pattern_allow([^DEBUG_MODE$])
m4trace:configure.ac:637: -1- m4_pattern_allow([^DEBUG_VERBOSE$])
m4trace:configure.ac:642: -1- ABI_CC_DBGFLAGS
m4trace:configure.ac:647: -1- ABI_CXX_DBGFLAGS
m4trace:configure.ac:652: -1- ABI_FC_DBGFLAGS
m4trace:configure.ac:669: -1- m4_pattern_allow([^DEBUG_CONTRACT$])
m4trace:configure.ac:674: -1- AM_CONDITIONAL([DO_BUILD_32_CONTRACT], [test "${enable_debug}" = "paranoid"])
m4trace:configure.ac:674: -1- m4_pattern_allow([^DO_BUILD_32_CONTRACT_TRUE$])
m4trace:configure.ac:674: -1- m4_pattern_allow([^DO_BUILD_32_CONTRACT_FALSE$])
m4trace:configure.ac:674: -1- _AM_SUBST_NOTMAKE([DO_BUILD_32_CONTRACT_TRUE])
m4trace:configure.ac:674: -1- _AM_SUBST_NOTMAKE([DO_BUILD_32_CONTRACT_FALSE])
m4trace:configure.ac:686: -1- ABI_MSG_SECTION([Optimizations])
m4trace:configure.ac:690: -1- ABI_OPTIM_INIT([${enable_optim}])
m4trace:configure.ac:695: -1- ABI_CC_OPTFLAGS
m4trace:configure.ac:700: -1- ABI_CXX_OPTFLAGS
m4trace:configure.ac:705: -1- ABI_FC_OPTFLAGS
m4trace:configure.ac:717: -1- ABI_OPTFLAGS_DIRS([${FCFLAGS_OPTIM}])
m4trace:configure.ac:717: -1- m4_pattern_allow([^fcflags_opt_atompaw$])
m4trace:configure.ac:717: -1- m4_pattern_allow([^fcflags_opt_algo$])
m4trace:configure.ac:717: -1- m4_pattern_allow([^fcflags_opt_bigdft$])
m4trace:configure.ac:717: -1- m4_pattern_allow([^fcflags_opt_libxc$])
m4trace:configure.ac:717: -1- m4_pattern_allow([^fcflags_opt_linalg$])
m4trace:configure.ac:717: -1- m4_pattern_allow([^fcflags_opt_netcdf$])
m4trace:configure.ac:717: -1- m4_pattern_allow([^fcflags_opt_psml$])
m4trace:configure.ac:717: -1- m4_pattern_allow([^fcflags_opt_triqs$])
m4trace:configure.ac:717: -1- m4_pattern_allow([^fcflags_opt_wannier90$])
m4trace:configure.ac:717: -1- m4_pattern_allow([^fcflags_opt_yaml$])
m4trace:configure.ac:717: -1- m4_pattern_allow([^fcflags_opt_01_gsl_ext$])
m4trace:configure.ac:717: -1- m4_pattern_allow([^fcflags_opt_02_clib$])
m4trace:configure.ac:717: -1- m4_pattern_allow([^fcflags_opt_10_defs$])
m4trace:configure.ac:717: -1- m4_pattern_allow([^fcflags_opt_10_dumpinfo$])
m4trace:configure.ac:717: -1- m4_pattern_allow([^fcflags_opt_11_memory_mpi$])
m4trace:configure.ac:717: -1- m4_pattern_allow([^fcflags_opt_12_hide_mpi$])
m4trace:configure.ac:717: -1- m4_pattern_allow([^fcflags_opt_14_hidewrite$])
m4trace:configure.ac:717: -1- m4_pattern_allow([^fcflags_opt_15_gpu_toolbox$])
m4trace:configure.ac:717: -1- m4_pattern_allow([^fcflags_opt_16_hideleave$])
m4trace:configure.ac:717: -1- m4_pattern_allow([^fcflags_opt_17_libtetra_ext$])
m4trace:configure.ac:717: -1- m4_pattern_allow([^fcflags_opt_18_timing$])
m4trace:configure.ac:717: -1- m4_pattern_allow([^fcflags_opt_21_hashfuncs$])
m4trace:configure.ac:717: -1- m4_pattern_allow([^fcflags_opt_27_toolbox_oop$])
m4trace:configure.ac:717: -1- m4_pattern_allow([^fcflags_opt_28_numeric_noabirule$])
m4trace:configure.ac:717: -1- m4_pattern_allow([^fcflags_opt_29_kpoints$])
m4trace:configure.ac:717: -1- m4_pattern_allow([^fcflags_opt_32_util$])
m4trace:configure.ac:717: -1- m4_pattern_allow([^fcflags_opt_41_geometry$])
m4trace:configure.ac:717: -1- m4_pattern_allow([^fcflags_opt_41_xc_lowlevel$])
m4trace:configure.ac:717: -1- m4_pattern_allow([^fcflags_opt_42_libpaw$])
m4trace:configure.ac:717: -1- m4_pattern_allow([^fcflags_opt_42_nlstrain$])
m4trace:configure.ac:717: -1- m4_pattern_allow([^fcflags_opt_42_parser$])
m4trace:configure.ac:717: -1- m4_pattern_allow([^fcflags_opt_43_ptgroups$])
m4trace:configure.ac:717: -1- m4_pattern_allow([^fcflags_opt_43_wvl_wrappers$])
m4trace:configure.ac:717: -1- m4_pattern_allow([^fcflags_opt_44_abitools$])
m4trace:configure.ac:717: -1- m4_pattern_allow([^fcflags_opt_44_abitypes_defs$])
m4trace:configure.ac:717: -1- m4_pattern_allow([^fcflags_opt_45_geomoptim$])
m4trace:configure.ac:717: -1- m4_pattern_allow([^fcflags_opt_45_xgTools$])
m4trace:configure.ac:717: -1- m4_pattern_allow([^fcflags_opt_46_diago$])
m4trace:configure.ac:717: -1- m4_pattern_allow([^fcflags_opt_49_gw_toolbox_oop$])
m4trace:configure.ac:717: -1- m4_pattern_allow([^fcflags_opt_51_manage_mpi$])
m4trace:configure.ac:717: -1- m4_pattern_allow([^fcflags_opt_52_fft_mpi_noabirule$])
m4trace:configure.ac:717: -1- m4_pattern_allow([^fcflags_opt_52_manage_cuda$])
m4trace:configure.ac:717: -1- m4_pattern_allow([^fcflags_opt_53_ffts$])
m4trace:configure.ac:717: -1- m4_pattern_allow([^fcflags_opt_54_spacepar$])
m4trace:configure.ac:717: -1- m4_pattern_allow([^fcflags_opt_55_abiutil$])
m4trace:configure.ac:717: -1- m4_pattern_allow([^fcflags_opt_56_io_mpi$])
m4trace:configure.ac:717: -1- m4_pattern_allow([^fcflags_opt_56_mixing$])
m4trace:configure.ac:717: -1- m4_pattern_allow([^fcflags_opt_56_recipspace$])
m4trace:configure.ac:717: -1- m4_pattern_allow([^fcflags_opt_56_xc$])
m4trace:configure.ac:717: -1- m4_pattern_allow([^fcflags_opt_57_iopsp_parser$])
m4trace:configure.ac:717: -1- m4_pattern_allow([^fcflags_opt_57_iovars$])
m4trace:configure.ac:717: -1- m4_pattern_allow([^fcflags_opt_59_ionetcdf$])
m4trace:configure.ac:717: -1- m4_pattern_allow([^fcflags_opt_61_occeig$])
m4trace:configure.ac:717: -1- m4_pattern_allow([^fcflags_opt_62_cg_noabirule$])
m4trace:configure.ac:717: -1- m4_pattern_allow([^fcflags_opt_62_ctqmc$])
m4trace:configure.ac:717: -1- m4_pattern_allow([^fcflags_opt_62_iowfdenpot$])
m4trace:configure.ac:717: -1- m4_pattern_allow([^fcflags_opt_62_poisson$])
m4trace:configure.ac:717: -1- m4_pattern_allow([^fcflags_opt_62_wvl_wfs$])
m4trace:configure.ac:717: -1- m4_pattern_allow([^fcflags_opt_63_bader$])
m4trace:configure.ac:717: -1- m4_pattern_allow([^fcflags_opt_64_psp$])
m4trace:configure.ac:717: -1- m4_pattern_allow([^fcflags_opt_65_lotf_base$])
m4trace:configure.ac:717: -1- m4_pattern_allow([^fcflags_opt_65_paw$])
m4trace:configure.ac:717: -1- m4_pattern_allow([^fcflags_opt_66_nonlocal$])
m4trace:configure.ac:717: -1- m4_pattern_allow([^fcflags_opt_66_vdwxc$])
m4trace:configure.ac:717: -1- m4_pattern_allow([^fcflags_opt_66_wfs$])
m4trace:configure.ac:717: -1- m4_pattern_allow([^fcflags_opt_67_common$])
m4trace:configure.ac:717: -1- m4_pattern_allow([^fcflags_opt_67_triqs_ext$])
m4trace:configure.ac:717: -1- m4_pattern_allow([^fcflags_opt_68_dmft$])
m4trace:configure.ac:717: -1- m4_pattern_allow([^fcflags_opt_68_lotf$])
m4trace:configure.ac:717: -1- m4_pattern_allow([^fcflags_opt_68_recursion$])
m4trace:configure.ac:717: -1- m4_pattern_allow([^fcflags_opt_68_rsprc$])
m4trace:configure.ac:717: -1- m4_pattern_allow([^fcflags_opt_69_wfdesc$])
m4trace:configure.ac:717: -1- m4_pattern_allow([^fcflags_opt_70_gw$])
m4trace:configure.ac:717: -1- m4_pattern_allow([^fcflags_opt_71_bse$])
m4trace:configure.ac:717: -1- m4_pattern_allow([^fcflags_opt_71_wannier$])
m4trace:configure.ac:717: -1- m4_pattern_allow([^fcflags_opt_72_response$])
m4trace:configure.ac:717: -1- m4_pattern_allow([^fcflags_opt_77_ddb$])
m4trace:configure.ac:717: -1- m4_pattern_allow([^fcflags_opt_77_suscep$])
m4trace:configure.ac:717: -1- m4_pattern_allow([^fcflags_opt_78_effpot$])
m4trace:configure.ac:717: -1- m4_pattern_allow([^fcflags_opt_78_eph$])
m4trace:configure.ac:717: -1- m4_pattern_allow([^fcflags_opt_79_seqpar_mpi$])
m4trace:configure.ac:717: -1- m4_pattern_allow([^fcflags_opt_80_tdep$])
m4trace:configure.ac:717: -1- m4_pattern_allow([^fcflags_opt_83_cut3d$])
m4trace:configure.ac:717: -1- m4_pattern_allow([^fcflags_opt_84_fold2Bloch$])
m4trace:configure.ac:717: -1- m4_pattern_allow([^fcflags_opt_94_scfcv$])
m4trace:configure.ac:717: -1- m4_pattern_allow([^fcflags_opt_95_drive$])
m4trace:configure.ac:717: -1- m4_pattern_allow([^fcflags_opt_98_main$])
m4trace:configure.ac:732: -1- ABI_MSG_SECTION([64-bit support])
m4trace:configure.ac:846: -1- ABI_MSG_SECTION([Build flags])
m4trace:configure.ac:850: -1- ABI_INIT_TARGET
m4trace:configure.ac:850: -1- m4_pattern_allow([^ABINIT_TARGET$])
m4trace:configure.ac:850: -1- m4_pattern_allow([^ABINIT_TARGET$])
m4trace:configure.ac:852: -1- m4_pattern_allow([^ABINIT_BINARY_PACKAGE$])
m4trace:configure.ac:910: -1- ABI_MSG_SECTION([Advanced compiler features])
m4trace:configure.ac:912: -1- ABI_CC_FEATURES
m4trace:configure.ac:912: -1- _ABI_CHECK_CC_HEADERS
m4trace:configure.ac:912: -1- m4_pattern_allow([^HAVE_ERRNO_H$])
m4trace:configure.ac:912: -1- m4_pattern_allow([^HAVE_MCHECK_H$])
m4trace:configure.ac:912: -1- m4_pattern_allow([^HAVE_SYS_TIME_H$])
m4trace:configure.ac:912: -1- m4_pattern_allow([^HAVE_SYS_RESOURCE_H$])
m4trace:configure.ac:912: -1- _ABI_CHECK_CC_FUNCTIONS
m4trace:configure.ac:912: -1- m4_pattern_allow([^HAVE_ABORT$])
m4trace:configure.ac:912: -1- m4_pattern_allow([^HAVE_MALLINFO$])
m4trace:configure.ac:912: -1- _ABI_CHECK_CC_FEATURES
m4trace:configure.ac:912: -1- m4_pattern_allow([^SIZEOF_CHAR$])
m4trace:configure.ac:912: -1- m4_pattern_allow([^SIZEOF_SHORT$])
m4trace:configure.ac:912: -1- m4_pattern_allow([^SIZEOF_INT$])
m4trace:configure.ac:912: -1- m4_pattern_allow([^SIZEOF_LONG$])
m4trace:configure.ac:912: -1- m4_pattern_allow([^SIZEOF_LONG_LONG$])
m4trace:configure.ac:912: -1- m4_pattern_allow([^SIZEOF_UNSIGNED_INT$])
m4trace:configure.ac:912: -1- m4_pattern_allow([^SIZEOF_UNSIGNED_LONG$])
m4trace:configure.ac:912: -1- m4_pattern_allow([^SIZEOF_UNSIGNED_LONG_LONG$])
m4trace:configure.ac:912: -1- m4_pattern_allow([^SIZEOF_FLOAT$])
m4trace:configure.ac:912: -1- m4_pattern_allow([^SIZEOF_DOUBLE$])
m4trace:configure.ac:912: -1- m4_pattern_allow([^SIZEOF_LONG_DOUBLE$])
m4trace:configure.ac:912: -1- m4_pattern_allow([^SIZEOF_SIZE_T$])
m4trace:configure.ac:912: -1- m4_pattern_allow([^SIZEOF_PTRDIFF_T$])
m4trace:configure.ac:912: -1- m4_pattern_allow([^const$])
m4trace:configure.ac:912: -1- m4_pattern_allow([^size_t$])
m4trace:configure.ac:913: -1- ABI_FC_FEATURES
m4trace:configure.ac:913: -1- _ABI_CHECK_FC_ASYNC
m4trace:configure.ac:913: -1- m4_pattern_allow([^HAVE_FC_ASYNC$])
m4trace:configure.ac:913: -1- _ABI_CHECK_FC_BACKTRACE
m4trace:configure.ac:913: -1- m4_pattern_allow([^HAVE_FC_BACKTRACE$])
m4trace:configure.ac:913: -1- _ABI_CHECK_FC_COMMAND_ARGUMENT
m4trace:configure.ac:913: -1- m4_pattern_allow([^HAVE_FC_COMMAND_ARGUMENT$])
m4trace:configure.ac:913: -1- _ABI_CHECK_FC_COMMAND_LINE
m4trace:configure.ac:913: -1- m4_pattern_allow([^HAVE_FC_COMMAND_LINE$])
m4trace:configure.ac:913: -1- _ABI_CHECK_FC_SYSTEM
m4trace:configure.ac:913: -1- m4_pattern_allow([^HAVE_FC_SYSTEM$])
m4trace:configure.ac:913: -1- _ABI_CHECK_FC_CONTIGUOUS
m4trace:configure.ac:913: -1- m4_pattern_allow([^HAVE_FC_CONTIGUOUS$])
m4trace:configure.ac:913: -1- _ABI_CHECK_FC_DTARRAYS
m4trace:configure.ac:913: -1- m4_pattern_allow([^HAVE_FC_ALLOCATABLE_DTARRAYS$])
m4trace:configure.ac:913: -1- _ABI_CHECK_FC_IEEE_EXCEPTIONS
m4trace:configure.ac:913: -1- m4_pattern_allow([^HAVE_FC_IEEE_EXCEPTIONS$])
m4trace:configure.ac:913: -1- _ABI_CHECK_FC_IOMSG
m4trace:configure.ac:913: -1- m4_pattern_allow([^HAVE_FC_IOMSG$])
m4trace:configure.ac:913: -1- _ABI_CHECK_FC_ISO_C_BINDING
m4trace:configure.ac:913: -1- m4_pattern_allow([^HAVE_FC_ISO_C_BINDING$])
m4trace:configure.ac:913: -1- _ABI_CHECK_FC_EXIT
m4trace:configure.ac:913: -1- m4_pattern_allow([^HAVE_FC_EXIT$])
m4trace:configure.ac:913: -1- _ABI_CHECK_FC_FLUSH
m4trace:configure.ac:913: -1- m4_pattern_allow([^HAVE_FC_FLUSH$])
m4trace:configure.ac:913: -1- _ABI_CHECK_FC_FLUSH_
m4trace:configure.ac:913: -1- m4_pattern_allow([^HAVE_FC_FLUSH_$])
m4trace:configure.ac:913: -1- _ABI_CHECK_FC_GAMMA
m4trace:configure.ac:913: -1- m4_pattern_allow([^HAVE_FC_GAMMA$])
m4trace:configure.ac:913: -1- _ABI_CHECK_FC_GETENV
m4trace:configure.ac:913: -1- m4_pattern_allow([^HAVE_FC_GETENV$])
m4trace:configure.ac:913: -1- _ABI_CHECK_FC_GETPID
m4trace:configure.ac:913: -1- m4_pattern_allow([^HAVE_FC_GETPID$])
m4trace:configure.ac:913: -1- _ABI_CHECK_FC_INT_QUAD
m4trace:configure.ac:913: -1- m4_pattern_allow([^HAVE_FC_INT_QUAD$])
m4trace:configure.ac:913: -1- _ABI_CHECK_FC_ISO_FORTRAN_2008
m4trace:configure.ac:913: -1- m4_pattern_allow([^HAVE_FC_ISO_FORTRAN_2008$])
m4trace:configure.ac:913: -1- _ABI_CHECK_FC_LONG_LINES
m4trace:configure.ac:913: -1- m4_pattern_allow([^HAVE_FC_LONG_LINES$])
m4trace:configure.ac:913: -1- _ABI_CHECK_FC_MACRO_NEWLINE
m4trace:configure.ac:913: -1- m4_pattern_allow([^HAVE_FC_MACRO_NEWLINE$])
m4trace:configure.ac:913: -1- _ABI_CHECK_FC_MOVE_ALLOC
m4trace:configure.ac:913: -1- m4_pattern_allow([^HAVE_FC_MOVE_ALLOC$])
m4trace:configure.ac:913: -1- _ABI_CHECK_FC_PRIVATE
m4trace:configure.ac:913: -1- m4_pattern_allow([^HAVE_FC_PRIVATE$])
m4trace:configure.ac:913: -1- _ABI_CHECK_FC_PROTECTED
m4trace:configure.ac:913: -1- m4_pattern_allow([^HAVE_FC_PROTECTED$])
m4trace:configure.ac:913: -1- _ABI_CHECK_FC_STREAM_IO
m4trace:configure.ac:913: -1- m4_pattern_allow([^HAVE_FC_STREAM_IO$])
m4trace:configure.ac:913: -1- _ABI_CHECK_FC_CPUTIME
m4trace:configure.ac:913: -1- m4_pattern_allow([^HAVE_FC_CPUTIME$])
m4trace:configure.ac:913: -1- _ABI_CHECK_FC_TIMING
m4trace:configure.ac:913: -1- m4_pattern_allow([^HAVE_FC_ETIME$])
m4trace:configure.ac:913: -1- m4_pattern_allow([^HAVE_CCLOCK$])
m4trace:configure.ac:913: -1- AM_CONDITIONAL([DO_BUILD_CCLOCK], [test "${enable_cclock}" = "yes"])
m4trace:configure.ac:913: -1- m4_pattern_allow([^DO_BUILD_CCLOCK_TRUE$])
m4trace:configure.ac:913: -1- m4_pattern_allow([^DO_BUILD_CCLOCK_FALSE$])
m4trace:configure.ac:913: -1- _AM_SUBST_NOTMAKE([DO_BUILD_CCLOCK_TRUE])
m4trace:configure.ac:913: -1- _AM_SUBST_NOTMAKE([DO_BUILD_CCLOCK_FALSE])
m4trace:configure.ac:913: -1- m4_pattern_allow([^fc_timing$])
m4trace:configure.ac:923: -1- ABI_MSG_SECTION([Multicore architecture support])
m4trace:configure.ac:931: -1- ABI_OMP_CHECK_COLLAPSE
m4trace:configure.ac:931: -1- _m4_warn([cross], [AC_RUN_IFELSE called without default to allow cross compiling], [../../lib/autoconf/general.m4:2748: AC_RUN_IFELSE is expanded from...
config/m4/conf-openmp.m4:21: ABI_OMP_CHECK_COLLAPSE is expanded from...
configure.ac:931: the top level])
m4trace:configure.ac:931: -1- m4_pattern_allow([^HAVE_OMP_COLLAPSE$])
m4trace:configure.ac:936: -1- ABI_MPI_DETECT
m4trace:configure.ac:936: -1- _ABI_MPI_CHECK_CC
m4trace:configure.ac:936: -1- ABI_ENV_BACKUP
m4trace:configure.ac:936: -1- ABI_ENV_RESTORE
m4trace:configure.ac:936: -1- _ABI_MPI_CHECK_CXX
m4trace:configure.ac:936: -1- ABI_ENV_BACKUP
m4trace:configure.ac:936: -1- ABI_ENV_RESTORE
m4trace:configure.ac:936: -1- _ABI_MPI_CHECK_FC
m4trace:configure.ac:936: -1- ABI_ENV_BACKUP
m4trace:configure.ac:936: -1- ABI_ENV_RESTORE
m4trace:configure.ac:936: -1- m4_pattern_allow([^HAVE_MPI$])
m4trace:configure.ac:936: -1- m4_pattern_allow([^HAVE_MPI_IO$])
m4trace:configure.ac:936: -1- _ABI_MPI_CHECK_FC_LEVEL
m4trace:configure.ac:936: -1- ABI_ENV_BACKUP
m4trace:configure.ac:936: -1- ABI_ENV_RESTORE
m4trace:configure.ac:936: -1- m4_pattern_allow([^HAVE_MPI1$])
m4trace:configure.ac:936: -1- m4_pattern_allow([^HAVE_MPI2$])
m4trace:configure.ac:936: -1- _ABI_MPI_CHECK_INTEGER16([])
m4trace:configure.ac:936: -1- ABI_ENV_BACKUP
m4trace:configure.ac:936: -1- ABI_ENV_RESTORE
m4trace:configure.ac:936: -1- m4_pattern_allow([^HAVE_MPI_INTEGER16$])
m4trace:configure.ac:936: -1- _ABI_MPI_CHECK_CREATE_TYPE_STRUCT([])
m4trace:configure.ac:936: -1- ABI_ENV_BACKUP
m4trace:configure.ac:936: -1- ABI_ENV_RESTORE
m4trace:configure.ac:936: -1- ABI_ENV_BACKUP
m4trace:configure.ac:936: -1- ABI_ENV_RESTORE
m4trace:configure.ac:936: -1- m4_pattern_allow([^HAVE_MPI_TYPE_CREATE_STRUCT$])
m4trace:configure.ac:936: -1- _ABI_MPI_CHECK_IALLTOALL([])
m4trace:configure.ac:936: -1- ABI_ENV_BACKUP
m4trace:configure.ac:936: -1- ABI_ENV_RESTORE
m4trace:configure.ac:936: -1- m4_pattern_allow([^HAVE_MPI_IALLTOALL$])
m4trace:configure.ac:936: -1- _ABI_MPI_CHECK_IALLTOALLV([])
m4trace:configure.ac:936: -1- ABI_ENV_BACKUP
m4trace:configure.ac:936: -1- ABI_ENV_RESTORE
m4trace:configure.ac:936: -1- m4_pattern_allow([^HAVE_MPI_IALLTOALLV$])
m4trace:configure.ac:936: -1- _ABI_MPI_CHECK_IALLREDUCE([])
m4trace:configure.ac:936: -1- ABI_ENV_BACKUP
m4trace:configure.ac:936: -1- ABI_ENV_RESTORE
m4trace:configure.ac:936: -1- m4_pattern_allow([^HAVE_MPI_IALLREDUCE$])
m4trace:configure.ac:936: -1- AM_CONDITIONAL([DO_TEST_MPI], [test "${enable_mpi}" = "yes"])
m4trace:configure.ac:936: -1- m4_pattern_allow([^DO_TEST_MPI_TRUE$])
m4trace:configure.ac:936: -1- m4_pattern_allow([^DO_TEST_MPI_FALSE$])
m4trace:configure.ac:936: -1- _AM_SUBST_NOTMAKE([DO_TEST_MPI_TRUE])
m4trace:configure.ac:936: -1- _AM_SUBST_NOTMAKE([DO_TEST_MPI_FALSE])
m4trace:configure.ac:938: -1- ABI_MPI_DUMP
m4trace:configure.ac:942: -1- ABI_GPU_DETECT
m4trace:configure.ac:942: -1- _ABI_GPU_CHECK_CUDA
m4trace:configure.ac:942: -1- ABI_ENV_BACKUP
m4trace:configure.ac:942: -1- ABI_ENV_RESTORE
m4trace:configure.ac:942: -1- m4_pattern_allow([^HAVE_GPU_CUDA$])
m4trace:configure.ac:942: -1- m4_pattern_allow([^HAVE_GPU_CUDA3$])
m4trace:configure.ac:942: -1- m4_pattern_allow([^HAVE_GPU_CUDA_SP$])
m4trace:configure.ac:942: -1- m4_pattern_allow([^HAVE_GPU_CUDA_DP$])
m4trace:configure.ac:942: -1- m4_pattern_allow([^HAVE_GPU$])
m4trace:configure.ac:942: -1- m4_pattern_allow([^HAVE_GPU_SERIAL$])
m4trace:configure.ac:942: -1- m4_pattern_allow([^HAVE_GPU_MPI$])
m4trace:configure.ac:942: -1- AM_CONDITIONAL([DO_BUILD_15_GPU_TOOLBOX], [test "${lib_gpu_flavor}" != "none"])
m4trace:configure.ac:942: -1- m4_pattern_allow([^DO_BUILD_15_GPU_TOOLBOX_TRUE$])
m4trace:configure.ac:942: -1- m4_pattern_allow([^DO_BUILD_15_GPU_TOOLBOX_FALSE$])
m4trace:configure.ac:942: -1- _AM_SUBST_NOTMAKE([DO_BUILD_15_GPU_TOOLBOX_TRUE])
m4trace:configure.ac:942: -1- _AM_SUBST_NOTMAKE([DO_BUILD_15_GPU_TOOLBOX_FALSE])
m4trace:configure.ac:942: -1- AM_CONDITIONAL([DO_BUILD_52_MANAGE_CUDA], [test "${lib_gpu_flavor}" = "cuda-double" -o "${lib_gpu_flavor}" = "cuda-single"])
m4trace:configure.ac:942: -1- m4_pattern_allow([^DO_BUILD_52_MANAGE_CUDA_TRUE$])
m4trace:configure.ac:942: -1- m4_pattern_allow([^DO_BUILD_52_MANAGE_CUDA_FALSE$])
m4trace:configure.ac:942: -1- _AM_SUBST_NOTMAKE([DO_BUILD_52_MANAGE_CUDA_TRUE])
m4trace:configure.ac:942: -1- _AM_SUBST_NOTMAKE([DO_BUILD_52_MANAGE_CUDA_FALSE])
m4trace:configure.ac:951: -1- ABI_MSG_SECTION([Feature triggers])
m4trace:configure.ac:967: -1- m4_pattern_allow([^abinit_tardir$])
m4trace:configure.ac:972: -1- m4_pattern_allow([^fallbacks_instdir$])
m4trace:configure.ac:973: -1- m4_pattern_allow([^fallbacks_incs$])
m4trace:configure.ac:976: -1- ABI_LINALG_DETECT
m4trace:configure.ac:976: -1- ABI_ENV_BACKUP
m4trace:configure.ac:976: -1- _ABI_LINALG_CHECK_LIBS
m4trace:configure.ac:976: -1- _ABI_LINALG_CHECK_BLAS_EXTS([])
m4trace:configure.ac:976: -1- m4_pattern_allow([^HAVE_LINALG_AXPBY$])
m4trace:configure.ac:976: -1- m4_pattern_allow([^HAVE_LINALG_GEMM3M$])
m4trace:configure.ac:976: -1- _ABI_LINALG_CHECK_BLAS_MKL_EXTS([])
m4trace:configure.ac:976: -1- m4_pattern_allow([^HAVE_LINALG_MKL_IMATCOPY$])
m4trace:configure.ac:976: -1- m4_pattern_allow([^HAVE_LINALG_MKL_OMATCOPY$])
m4trace:configure.ac:976: -1- m4_pattern_allow([^HAVE_LINALG_MKL_OMATADD$])
m4trace:configure.ac:976: -1- m4_pattern_allow([^HAVE_LINALG_MKL_THREADS$])
m4trace:configure.ac:976: -1- _ABI_LINALG_TEST_ELPA([])
m4trace:configure.ac:976: -1- _ABI_LINALG_FIND_ELPA_VERSION([])
m4trace:configure.ac:976: -1- m4_pattern_allow([^HAVE_LINALG_ELPA_2017$])
m4trace:configure.ac:976: -1- m4_pattern_allow([^HAVE_ELPA_FORTRAN2008$])
m4trace:configure.ac:976: -1- m4_pattern_allow([^HAVE_LINALG_ELPA_2016$])
m4trace:configure.ac:976: -1- m4_pattern_allow([^HAVE_LINALG_ELPA_2015$])
m4trace:configure.ac:976: -1- m4_pattern_allow([^HAVE_LINALG_ELPA_2014$])
m4trace:configure.ac:976: -1- m4_pattern_allow([^HAVE_LINALG_ELPA_2013$])
m4trace:configure.ac:976: -1- _ABI_LINALG_CHECK_MAGMA_15([])
m4trace:configure.ac:976: -1- m4_pattern_allow([^HAVE_LINALG_MAGMA_15$])
m4trace:configure.ac:976: -1- _ABI_LINALG_CHECK_BLAS_EXTS([])
m4trace:configure.ac:976: -1- m4_pattern_allow([^HAVE_LINALG_AXPBY$])
m4trace:configure.ac:976: -1- m4_pattern_allow([^HAVE_LINALG_GEMM3M$])
m4trace:configure.ac:976: -1- _ABI_LINALG_CHECK_BLAS_MKL_EXTS([])
m4trace:configure.ac:976: -1- m4_pattern_allow([^HAVE_LINALG_MKL_IMATCOPY$])
m4trace:configure.ac:976: -1- m4_pattern_allow([^HAVE_LINALG_MKL_OMATCOPY$])
m4trace:configure.ac:976: -1- m4_pattern_allow([^HAVE_LINALG_MKL_OMATADD$])
m4trace:configure.ac:976: -1- m4_pattern_allow([^HAVE_LINALG_MKL_THREADS$])
m4trace:configure.ac:976: -1- _ABI_LINALG_SEARCH_BLAS([${abi_linalg_blas_libs}], [${abi_linalg_blas_prqs}])
m4trace:configure.ac:976: -1- _ABI_LINALG_SEARCH_LAPACK([${abi_linalg_lapack_libs}], [${abi_linalg_lapack_prqs}])
m4trace:configure.ac:976: -1- _ABI_LINALG_SEARCH_BLACS([${abi_linalg_blacs_libs}], [${abi_linalg_blacs_prqs}])
m4trace:configure.ac:976: -1- _ABI_LINALG_SEARCH_SCALAPACK([${abi_linalg_scalapack_libs}], [${abi_linalg_scalapack_prqs}])
m4trace:configure.ac:976: -1- _ABI_LINALG_SEARCH_LAPACKE([${abi_linalg_lapacke_libs}], [${abi_linalg_lapacke_prqs}])
m4trace:configure.ac:976: -1- _ABI_LINALG_SEARCH_PLASMA([${abi_linalg_plasma_libs}], [${abi_linalg_plasma_prqs}])
m4trace:configure.ac:976: -1- _ABI_LINALG_SEARCH_ELPA([${abi_linalg_elpa_libs}], [${abi_linalg_elpa_prqs}])
m4trace:configure.ac:976: -1- _ABI_LINALG_TEST_ELPA([])
m4trace:configure.ac:976: -1- _ABI_LINALG_TEST_ELPA([])
m4trace:configure.ac:976: -1- _ABI_LINALG_FIND_ELPA_VERSION([])
m4trace:configure.ac:976: -1- m4_pattern_allow([^HAVE_LINALG_ELPA_2017$])
m4trace:configure.ac:976: -1- m4_pattern_allow([^HAVE_ELPA_FORTRAN2008$])
m4trace:configure.ac:976: -1- m4_pattern_allow([^HAVE_LINALG_ELPA_2016$])
m4trace:configure.ac:976: -1- m4_pattern_allow([^HAVE_LINALG_ELPA_2015$])
m4trace:configure.ac:976: -1- m4_pattern_allow([^HAVE_LINALG_ELPA_2014$])
m4trace:configure.ac:976: -1- m4_pattern_allow([^HAVE_LINALG_ELPA_2013$])
m4trace:configure.ac:976: -1- _ABI_LINALG_SEARCH_MAGMA([${abi_linalg_magma_libs}], [${abi_linalg_magma_prqs}])
m4trace:configure.ac:976: -1- m4_pattern_allow([^HAVE_LINALG$])
m4trace:configure.ac:976: -1- m4_pattern_allow([^HAVE_LINALG_SERIAL$])
m4trace:configure.ac:976: -1- m4_pattern_allow([^HAVE_LINALG_ASL$])
m4trace:configure.ac:976: -1- m4_pattern_allow([^HAVE_LINALG_ESSL$])
m4trace:configure.ac:976: -1- m4_pattern_allow([^HAVE_LINALG_MPI$])
m4trace:configure.ac:976: -1- m4_pattern_allow([^HAVE_LINALG_PLASMA$])
m4trace:configure.ac:976: -1- m4_pattern_allow([^HAVE_LINALG_SCALAPACK$])
m4trace:configure.ac:976: -1- m4_pattern_allow([^HAVE_LINALG_ELPA$])
m4trace:configure.ac:976: -1- m4_pattern_allow([^HAVE_LINALG_GPU$])
m4trace:configure.ac:976: -1- m4_pattern_allow([^HAVE_LINALG_MAGMA$])
m4trace:configure.ac:976: -1- ABI_ENV_RESTORE
m4trace:configure.ac:976: -1- ABI_MSG_NOTICE([connectors-failure], [Connector detection failure])
m4trace:configure.ac:976: -1- m4_pattern_allow([^lib_linalg_flavor$])
m4trace:configure.ac:976: -1- m4_pattern_allow([^lib_linalg_fcflags$])
m4trace:configure.ac:976: -1- m4_pattern_allow([^lib_linalg_ldflags$])
m4trace:configure.ac:976: -1- m4_pattern_allow([^lib_linalg_incs$])
m4trace:configure.ac:976: -1- m4_pattern_allow([^lib_linalg_libs$])
m4trace:configure.ac:987: -1- ABI_CONNECT_FFT
m4trace:configure.ac:987: -1- ABI_ENV_BACKUP
m4trace:configure.ac:987: -1- _ABI_FFT_CHECK([asl], [zfc3fb])
m4trace:configure.ac:987: -1- m4_pattern_allow([^HAVE_FFT_ASL$])
m4trace:configure.ac:987: -1- _ABI_FFT_CHECK([fftw2], [fftw_execute])
m4trace:configure.ac:987: -1- m4_pattern_allow([^HAVE_FFT_FFTW2$])
m4trace:configure.ac:987: -1- _ABI_FFT_CHECK([fftw2], [fftw_init_threads])
m4trace:configure.ac:987: -1- m4_pattern_allow([^HAVE_FFT_FFTW2_THREADS$])
m4trace:configure.ac:987: -1- _ABI_FFT_CHECK([fftw3], [dfftw_execute])
m4trace:configure.ac:987: -1- m4_pattern_allow([^HAVE_FFT_FFTW3$])
m4trace:configure.ac:987: -1- _ABI_FFT_CHECK([fftw3], [dfftw_execute])
m4trace:configure.ac:987: -1- m4_pattern_allow([^HAVE_FFT_FFTW3_MKL$])
m4trace:configure.ac:987: -1- _ABI_FFT_CHECK([fftw3], [dfftw_execute])
m4trace:configure.ac:987: -1- _ABI_FFT_CHECK([fftw3_threads], [dfftw_init_threads])
m4trace:configure.ac:987: -1- m4_pattern_allow([^HAVE_FFT_FFTW3$])
m4trace:configure.ac:987: -1- m4_pattern_allow([^HAVE_FFT_FFTW3_THREADS$])
m4trace:configure.ac:987: -1- _ABI_FFT_CHECK([fftw3], [dfftw_execute])
m4trace:configure.ac:987: -1- _ABI_FFT_CHECK([fftw3_threads], [dfftw_init_threads])
m4trace:configure.ac:987: -1- m4_pattern_allow([^HAVE_FFT_FFTW3$])
m4trace:configure.ac:987: -1- m4_pattern_allow([^HAVE_FFT_FFTW3_THREADS$])
m4trace:configure.ac:987: -1- m4_pattern_allow([^HAVE_FFT_FFTW3_MPI$])
m4trace:configure.ac:987: -1- _ABI_FFT_CHECK([dfti], [DftiCreateDescriptor])
m4trace:configure.ac:987: -1- m4_pattern_allow([^HAVE_FFT_DFTI$])
m4trace:configure.ac:987: -1- _ABI_FFT_CHECK([dfti], [DftiCreateDescriptor])
m4trace:configure.ac:987: -1- m4_pattern_allow([^HAVE_FFT_DFTI$])
m4trace:configure.ac:987: -1- m4_pattern_allow([^HAVE_FFT_DFTI_THREADS$])
m4trace:configure.ac:987: -1- _ABI_FFT_CHECK([veclib], [c1dfft])
m4trace:configure.ac:987: -1- m4_pattern_allow([^HAVE_FFT_MLIB$])
m4trace:configure.ac:987: -1- _ABI_FFT_CHECK([complib.sgimath], [dfft1du])
m4trace:configure.ac:987: -1- m4_pattern_allow([^HAVE_FFT_SGIMATH$])
m4trace:configure.ac:987: -1- m4_pattern_allow([^HAVE_FFT$])
m4trace:configure.ac:987: -1- m4_pattern_allow([^HAVE_FFT_SERIAL$])
m4trace:configure.ac:987: -1- m4_pattern_allow([^HAVE_FFT_MPI$])
m4trace:configure.ac:987: -1- ABI_ENV_RESTORE
m4trace:configure.ac:987: -1- ABI_MSG_NOTICE([connectors-failure], [Connector detection failure])
m4trace:configure.ac:987: -1- m4_pattern_allow([^lib_fft_flavor$])
m4trace:configure.ac:987: -1- m4_pattern_allow([^lib_fft_fcflags$])
m4trace:configure.ac:987: -1- m4_pattern_allow([^lib_fft_ldflags$])
m4trace:configure.ac:987: -1- m4_pattern_allow([^lib_fft_incs$])
m4trace:configure.ac:987: -1- m4_pattern_allow([^lib_fft_libs$])
m4trace:configure.ac:1010: -1- ABI_MSG_SECTION([Connectors / Fallbacks])
m4trace:configure.ac:1015: -1- ABI_CONNECT_TRIO
m4trace:configure.ac:1015: -1- ABI_ENV_BACKUP
m4trace:configure.ac:1015: -1- _ABI_TRIO_CHECK_ETSF_IO
m4trace:configure.ac:1015: -1- ABI_FC_MOD_INCS([etsf_io])
m4trace:configure.ac:1015: -1- m4_pattern_allow([^fc_mod_incs$])
m4trace:configure.ac:1015: -1- m4_pattern_allow([^HAVE_ETSF_IO$])
m4trace:configure.ac:1015: -1- _ABI_TRIO_CHECK_PSML
m4trace:configure.ac:1015: -1- ABI_FC_MOD_INCS([m_psml])
m4trace:configure.ac:1015: -1- m4_pattern_allow([^fc_mod_incs$])
m4trace:configure.ac:1015: -1- m4_pattern_allow([^HAVE_PSML$])
m4trace:configure.ac:1015: -1- ABI_MSG_NOTICE([connectors-failure], [Connector detection failure])
m4trace:configure.ac:1015: -1- _m4_warn([obsolete], [The macro `AC_ERROR' is obsolete.
You should run autoupdate.], [../../lib/autoconf/oldnames.m4:34: AC_ERROR is expanded from...
config/m4/conn-trio.m4:352: ABI_CONNECT_TRIO is expanded from...
configure.ac:1015: the top level])
m4trace:configure.ac:1015: -1- _ABI_TRIO_CHECK_NETCDF
m4trace:configure.ac:1015: -1- m4_pattern_allow([^HAVE_NETCDF_H$])
m4trace:configure.ac:1015: -1- ABI_FC_MOD_INCS([netcdf])
m4trace:configure.ac:1015: -1- m4_pattern_allow([^fc_mod_incs$])
m4trace:configure.ac:1015: -1- m4_pattern_allow([^HAVE_NETCDF$])
m4trace:configure.ac:1015: -1- m4_pattern_allow([^HAVE_NETCDF_MPI$])
m4trace:configure.ac:1015: -1- _ABI_TRIO_CHECK_YAML
m4trace:configure.ac:1015: -1- ABI_FC_MOD_INCS([yaml_output])
m4trace:configure.ac:1015: -1- m4_pattern_allow([^fc_mod_incs$])
m4trace:configure.ac:1015: -1- m4_pattern_allow([^HAVE_YAML$])
m4trace:configure.ac:1015: -1- ABI_MSG_NOTICE([connectors-failure], [Connector detection failure])
m4trace:configure.ac:1015: -1- ABI_MSG_NOTICE([connectors-failure], [Connector detection failure])
m4trace:configure.ac:1015: -1- ABI_MSG_NOTICE([connectors-failure], [Connector detection failure])
m4trace:configure.ac:1015: -1- ABI_ENV_RESTORE
m4trace:configure.ac:1015: -1- m4_pattern_allow([^lib_trio_flavor$])
m4trace:configure.ac:1015: -1- m4_pattern_allow([^lib_etsf_io_fcflags$])
m4trace:configure.ac:1015: -1- m4_pattern_allow([^lib_etsf_io_incs$])
m4trace:configure.ac:1015: -1- m4_pattern_allow([^lib_etsf_io_ldflags$])
m4trace:configure.ac:1015: -1- m4_pattern_allow([^lib_etsf_io_libs$])
m4trace:configure.ac:1015: -1- m4_pattern_allow([^lib_psml_fcflags$])
m4trace:configure.ac:1015: -1- m4_pattern_allow([^lib_psml_incs$])
m4trace:configure.ac:1015: -1- m4_pattern_allow([^lib_psml_ldflags$])
m4trace:configure.ac:1015: -1- m4_pattern_allow([^lib_psml_libs$])
m4trace:configure.ac:1015: -1- m4_pattern_allow([^lib_netcdf_fcflags$])
m4trace:configure.ac:1015: -1- m4_pattern_allow([^lib_netcdf_incs$])
m4trace:configure.ac:1015: -1- m4_pattern_allow([^lib_netcdf_ldflags$])
m4trace:configure.ac:1015: -1- m4_pattern_allow([^lib_netcdf_libs$])
m4trace:configure.ac:1015: -1- m4_pattern_allow([^lib_yaml_fcflags$])
m4trace:configure.ac:1015: -1- m4_pattern_allow([^lib_yaml_incs$])
m4trace:configure.ac:1015: -1- m4_pattern_allow([^lib_yaml_ldflags$])
m4trace:configure.ac:1015: -1- m4_pattern_allow([^lib_yaml_libs$])
m4trace:configure.ac:1026: -1- AM_CONDITIONAL([DO_BUILD_PSML], [test "${abi_psml_wanted}" != "" ])
m4trace:configure.ac:1026: -1- m4_pattern_allow([^DO_BUILD_PSML_TRUE$])
m4trace:configure.ac:1026: -1- m4_pattern_allow([^DO_BUILD_PSML_FALSE$])
m4trace:configure.ac:1026: -1- _AM_SUBST_NOTMAKE([DO_BUILD_PSML_TRUE])
m4trace:configure.ac:1026: -1- _AM_SUBST_NOTMAKE([DO_BUILD_PSML_FALSE])
m4trace:configure.ac:1030: -1- ABI_CONNECT_TIMER
m4trace:configure.ac:1030: -1- ABI_ENV_BACKUP
m4trace:configure.ac:1030: -1- m4_pattern_allow([^HAVE_TIMER_ABINIT$])
m4trace:configure.ac:1030: -1- _ABI_TIMER_CHECK_PAPI
m4trace:configure.ac:1030: -1- m4_pattern_allow([^HAVE_PAPI_H$])
m4trace:configure.ac:1030: -1- m4_pattern_allow([^HAVE_PAPI$])
m4trace:configure.ac:1030: -1- m4_pattern_allow([^HAVE_TIME_H$])
m4trace:configure.ac:1030: -1- m4_pattern_allow([^HAVE_CLOCK_GETTIME$])
m4trace:configure.ac:1030: -1- ABI_ENV_RESTORE
m4trace:configure.ac:1030: -1- ABI_MSG_NOTICE([connectors-failure], [Connector detection failure])
m4trace:configure.ac:1030: -1- m4_pattern_allow([^lib_timer_flavor$])
m4trace:configure.ac:1030: -1- m4_pattern_allow([^lib_timer_fcflags$])
m4trace:configure.ac:1030: -1- m4_pattern_allow([^lib_timer_ldflags$])
m4trace:configure.ac:1030: -1- m4_pattern_allow([^lib_timer_incs$])
m4trace:configure.ac:1030: -1- m4_pattern_allow([^lib_timer_libs$])
m4trace:configure.ac:1035: -1- ABI_CONNECT_ALGO
m4trace:configure.ac:1035: -1- ABI_ENV_BACKUP
m4trace:configure.ac:1035: -1- _ABI_ALGO_CHECK_LEVMAR
m4trace:configure.ac:1035: -1- m4_pattern_allow([^HAVE_LEVMAR_H$])
m4trace:configure.ac:1035: -1- m4_pattern_allow([^HAVE_LEVMAR$])
m4trace:configure.ac:1035: -1- ABI_ENV_RESTORE
m4trace:configure.ac:1035: -1- ABI_MSG_NOTICE([connectors-failure], [Connector detection failure])
m4trace:configure.ac:1035: -1- m4_pattern_allow([^lib_algo_flavor$])
m4trace:configure.ac:1035: -1- m4_pattern_allow([^lib_algo_fcflags$])
m4trace:configure.ac:1035: -1- m4_pattern_allow([^lib_algo_ldflags$])
m4trace:configure.ac:1035: -1- m4_pattern_allow([^lib_algo_incs$])
m4trace:configure.ac:1035: -1- m4_pattern_allow([^lib_algo_libs$])
m4trace:configure.ac:1040: -1- ABI_CONNECT_MATH
m4trace:configure.ac:1040: -1- ABI_ENV_BACKUP
m4trace:configure.ac:1040: -1- _ABI_MATH_CHECK_GSL
m4trace:configure.ac:1040: -1- m4_pattern_allow([^GSL_CONFIG$])
m4trace:configure.ac:1040: -1- m4_pattern_allow([^HAVE_GSL_GSL_SF_GAMMA_H$])
m4trace:configure.ac:1040: -1- m4_pattern_allow([^HAVE_GSL$])
m4trace:configure.ac:1040: -1- _ABI_MATH_CHECK_MLIB
m4trace:configure.ac:1040: -1- m4_pattern_allow([^HAVE_LIBVECLIB$])
m4trace:configure.ac:1040: -1- m4_pattern_allow([^HAVE_LINALG_MLIB$])
m4trace:configure.ac:1040: -1- ABI_ENV_RESTORE
m4trace:configure.ac:1040: -1- ABI_MSG_NOTICE([connectors-failure], [Connector detection failure])
m4trace:configure.ac:1040: -1- m4_pattern_allow([^lib_math_flavor$])
m4trace:configure.ac:1040: -1- m4_pattern_allow([^lib_math_fcflags$])
m4trace:configure.ac:1040: -1- m4_pattern_allow([^lib_math_ldflags$])
m4trace:configure.ac:1040: -1- m4_pattern_allow([^lib_math_incs$])
m4trace:configure.ac:1040: -1- m4_pattern_allow([^lib_math_libs$])
m4trace:configure.ac:1046: -1- ABI_CONNECT_DFT
m4trace:configure.ac:1046: -1- ABI_ENV_BACKUP
m4trace:configure.ac:1046: -1- _ABI_DFT_CHECK_ATOMPAW
m4trace:configure.ac:1046: -1- m4_pattern_allow([^ATOMPAW_BIN$])
m4trace:configure.ac:1046: -1- m4_pattern_allow([^GRAPHATOM_BIN$])
m4trace:configure.ac:1046: -1- m4_pattern_allow([^HAVE_ATOMPAW$])
m4trace:configure.ac:1046: -1- _ABI_DFT_CHECK_BIGDFT
m4trace:configure.ac:1046: -1- ABI_FC_MOD_INCS([bigdft_api])
m4trace:configure.ac:1046: -1- m4_pattern_allow([^fc_mod_incs$])
m4trace:configure.ac:1046: -1- m4_pattern_allow([^HAVE_BIGDFT$])
m4trace:configure.ac:1046: -1- _ABI_DFT_CHECK_LIBXC([2], [2], [4], [0])
m4trace:configure.ac:1046: -1- ABI_FC_MOD_INCS([xc_f90_lib_m])
m4trace:configure.ac:1046: -1- m4_pattern_allow([^fc_mod_incs$])
m4trace:configure.ac:1046: -1- _m4_warn([cross], [AC_RUN_IFELSE called without default to allow cross compiling], [../../lib/autoconf/general.m4:2748: AC_RUN_IFELSE is expanded from...
config/m4/conn-dft.m4:143: _ABI_DFT_CHECK_LIBXC is expanded from...
config/m4/conn-dft.m4:352: ABI_CONNECT_DFT is expanded from...
configure.ac:1046: the top level])
m4trace:configure.ac:1046: -1- m4_pattern_allow([^HAVE_LIBXC$])
m4trace:configure.ac:1046: -1- _ABI_DFT_CHECK_WANNIER90
m4trace:configure.ac:1046: -1- m4_pattern_allow([^WANNIER90_X_BIN$])
m4trace:configure.ac:1046: -1- m4_pattern_allow([^W90CHK2CHK_X_BIN$])
m4trace:configure.ac:1046: -1- m4_pattern_allow([^HAVE_WANNIER90$])
m4trace:configure.ac:1046: -1- m4_pattern_allow([^HAVE_WANNIER90_V1$])
m4trace:configure.ac:1046: -1- m4_pattern_allow([^HAVE_WANNIER90_V1$])
m4trace:configure.ac:1046: -1- ABI_MSG_NOTICE([connectors-failure], [Connector detection failure])
m4trace:configure.ac:1046: -1- ABI_MSG_NOTICE([connectors-failure], [Connector detection failure])
m4trace:configure.ac:1046: -1- ABI_ENV_RESTORE
m4trace:configure.ac:1046: -1- m4_pattern_allow([^lib_dft_flavor$])
m4trace:configure.ac:1046: -1- m4_pattern_allow([^lib_atompaw_bins$])
m4trace:configure.ac:1046: -1- m4_pattern_allow([^lib_atompaw_fcflags$])
m4trace:configure.ac:1046: -1- m4_pattern_allow([^lib_atompaw_incs$])
m4trace:configure.ac:1046: -1- m4_pattern_allow([^lib_atompaw_ldflags$])
m4trace:configure.ac:1046: -1- m4_pattern_allow([^lib_atompaw_libs$])
m4trace:configure.ac:1046: -1- m4_pattern_allow([^lib_bigdft_fcflags$])
m4trace:configure.ac:1046: -1- m4_pattern_allow([^lib_bigdft_incs$])
m4trace:configure.ac:1046: -1- m4_pattern_allow([^lib_bigdft_ldflags$])
m4trace:configure.ac:1046: -1- m4_pattern_allow([^lib_bigdft_libs$])
m4trace:configure.ac:1046: -1- m4_pattern_allow([^lib_libxc_fcflags$])
m4trace:configure.ac:1046: -1- m4_pattern_allow([^lib_libxc_incs$])
m4trace:configure.ac:1046: -1- m4_pattern_allow([^lib_libxc_ldflags$])
m4trace:configure.ac:1046: -1- m4_pattern_allow([^lib_libxc_libs$])
m4trace:configure.ac:1046: -1- m4_pattern_allow([^lib_wannier90_bins$])
m4trace:configure.ac:1046: -1- m4_pattern_allow([^lib_wannier90_fcflags$])
m4trace:configure.ac:1046: -1- m4_pattern_allow([^lib_wannier90_incs$])
m4trace:configure.ac:1046: -1- m4_pattern_allow([^lib_wannier90_ldflags$])
m4trace:configure.ac:1046: -1- m4_pattern_allow([^lib_wannier90_libs$])
m4trace:configure.ac:1091: -1- AM_CONDITIONAL([DO_BUILD_01_GSL_EXT], [test "${lib_math_flavor}" = "gsl"])
m4trace:configure.ac:1091: -1- m4_pattern_allow([^DO_BUILD_01_GSL_EXT_TRUE$])
m4trace:configure.ac:1091: -1- m4_pattern_allow([^DO_BUILD_01_GSL_EXT_FALSE$])
m4trace:configure.ac:1091: -1- _AM_SUBST_NOTMAKE([DO_BUILD_01_GSL_EXT_TRUE])
m4trace:configure.ac:1091: -1- _AM_SUBST_NOTMAKE([DO_BUILD_01_GSL_EXT_FALSE])
m4trace:configure.ac:1094: -1- ABI_CONNECT_TRIQS
m4trace:configure.ac:1094: -1- AM_CONDITIONAL([DO_BUILD_67_TRIQS_EXT], [test "${enable_triqs_v2_0}" = "yes" || test "${enable_triqs_v1_4}" = "yes"])
m4trace:configure.ac:1094: -1- m4_pattern_allow([^DO_BUILD_67_TRIQS_EXT_TRUE$])
m4trace:configure.ac:1094: -1- m4_pattern_allow([^DO_BUILD_67_TRIQS_EXT_FALSE$])
m4trace:configure.ac:1094: -1- _AM_SUBST_NOTMAKE([DO_BUILD_67_TRIQS_EXT_TRUE])
m4trace:configure.ac:1094: -1- _AM_SUBST_NOTMAKE([DO_BUILD_67_TRIQS_EXT_FALSE])
m4trace:configure.ac:1094: -1- m4_pattern_allow([^lib_triqs_incs$])
m4trace:configure.ac:1094: -1- m4_pattern_allow([^lib_triqs_libs$])
m4trace:configure.ac:1094: -1- m4_pattern_allow([^lib_triqs_fcflags$])
m4trace:configure.ac:1094: -1- m4_pattern_allow([^lib_triqs_ldflags$])
m4trace:configure.ac:1107: -1- ABI_INCFLAGS_CORRECT
m4trace:configure.ac:1107: -1- m4_pattern_allow([^abi_extra_incs$])
m4trace:configure.ac:1114: -1- m4_pattern_allow([^FC_NOWRAP$])
m4trace:configure.ac:1123: -1- m4_pattern_allow([^F77$])
m4trace:configure.ac:1124: -1- m4_pattern_allow([^FFLAGS$])
m4trace:configure.ac:1133: -1- ABI_MSG_SECTION([Experimental developments and option triggers])
m4trace:configure.ac:1137: -1- ABI_FC_MODULE_MANGLING
m4trace:configure.ac:1137: -1- ABI_ENV_BACKUP
m4trace:configure.ac:1137: -1- m4_pattern_allow([^ABI_FC_MOD$])
m4trace:configure.ac:1137: -1- m4_pattern_allow([^ABI_FC_MOD$])
m4trace:configure.ac:1137: -1- m4_pattern_allow([^ABI_FC_MOD$])
m4trace:configure.ac:1137: -1- m4_pattern_allow([^ABI_FC_MOD$])
m4trace:configure.ac:1137: -1- m4_pattern_allow([^ABI_FC_MOD$])
m4trace:configure.ac:1137: -1- m4_pattern_allow([^ABI_FC_MOD$])
m4trace:configure.ac:1137: -1- m4_pattern_allow([^ABI_FC_MOD$])
m4trace:configure.ac:1137: -1- m4_pattern_allow([^ABI_FC_MOD$])
m4trace:configure.ac:1137: -1- m4_pattern_allow([^ABI_FC_MOD$])
m4trace:configure.ac:1137: -1- m4_pattern_allow([^ABI_FC_MOD$])
m4trace:configure.ac:1137: -1- m4_pattern_allow([^ABI_FC_MOD$])
m4trace:configure.ac:1137: -1- m4_pattern_allow([^ABI_FC_MOD$])
m4trace:configure.ac:1137: -1- ABI_ENV_RESTORE
m4trace:configure.ac:1152: -1- ABI_OPTIONS_TRIGGERS
m4trace:configure.ac:1152: -1- m4_pattern_allow([^HAVE_AVX_SAFE_MODE$])
m4trace:configure.ac:1152: -1- m4_pattern_allow([^HAVE_BSE_UNPACKED$])
m4trace:configure.ac:1152: -1- AM_CONDITIONAL([DO_BUILD_EXPORTS], [test "${enable_exports}" = "yes"])
m4trace:configure.ac:1152: -1- m4_pattern_allow([^DO_BUILD_EXPORTS_TRUE$])
m4trace:configure.ac:1152: -1- m4_pattern_allow([^DO_BUILD_EXPORTS_FALSE$])
m4trace:configure.ac:1152: -1- _AM_SUBST_NOTMAKE([DO_BUILD_EXPORTS_TRUE])
m4trace:configure.ac:1152: -1- _AM_SUBST_NOTMAKE([DO_BUILD_EXPORTS_FALSE])
m4trace:configure.ac:1152: -1- m4_pattern_allow([^HAVE_GW_DPC$])
m4trace:configure.ac:1152: -1- m4_pattern_allow([^HAVE_LIBPAW_ABINIT$])
m4trace:configure.ac:1152: -1- m4_pattern_allow([^HAVE_LIBTETRA_ABINIT$])
m4trace:configure.ac:1152: -1- AM_CONDITIONAL([DO_BUILD_65_LOTF_BASE], [test "${enable_lotf}" = "yes"])
m4trace:configure.ac:1152: -1- m4_pattern_allow([^DO_BUILD_65_LOTF_BASE_TRUE$])
m4trace:configure.ac:1152: -1- m4_pattern_allow([^DO_BUILD_65_LOTF_BASE_FALSE$])
m4trace:configure.ac:1152: -1- _AM_SUBST_NOTMAKE([DO_BUILD_65_LOTF_BASE_TRUE])
m4trace:configure.ac:1152: -1- _AM_SUBST_NOTMAKE([DO_BUILD_65_LOTF_BASE_FALSE])
m4trace:configure.ac:1152: -1- AM_CONDITIONAL([DO_BUILD_68_LOTF], [test "${enable_lotf}" = "yes"])
m4trace:configure.ac:1152: -1- m4_pattern_allow([^DO_BUILD_68_LOTF_TRUE$])
m4trace:configure.ac:1152: -1- m4_pattern_allow([^DO_BUILD_68_LOTF_FALSE$])
m4trace:configure.ac:1152: -1- _AM_SUBST_NOTMAKE([DO_BUILD_68_LOTF_TRUE])
m4trace:configure.ac:1152: -1- _AM_SUBST_NOTMAKE([DO_BUILD_68_LOTF_FALSE])
m4trace:configure.ac:1152: -1- m4_pattern_allow([^HAVE_LOTF$])
m4trace:configure.ac:1152: -1- AM_CONDITIONAL([DO_BUILD_01_MACROAVNEW_EXT], [test "${enable_macroave}" = "yes"])
m4trace:configure.ac:1152: -1- m4_pattern_allow([^DO_BUILD_01_MACROAVNEW_EXT_TRUE$])
m4trace:configure.ac:1152: -1- m4_pattern_allow([^DO_BUILD_01_MACROAVNEW_EXT_FALSE$])
m4trace:configure.ac:1152: -1- _AM_SUBST_NOTMAKE([DO_BUILD_01_MACROAVNEW_EXT_TRUE])
m4trace:configure.ac:1152: -1- _AM_SUBST_NOTMAKE([DO_BUILD_01_MACROAVNEW_EXT_FALSE])
m4trace:configure.ac:1152: -1- AM_CONDITIONAL([DO_BUILD_MACROAVE], [test "${enable_macroave}" = "yes"])
m4trace:configure.ac:1152: -1- m4_pattern_allow([^DO_BUILD_MACROAVE_TRUE$])
m4trace:configure.ac:1152: -1- m4_pattern_allow([^DO_BUILD_MACROAVE_FALSE$])
m4trace:configure.ac:1152: -1- _AM_SUBST_NOTMAKE([DO_BUILD_MACROAVE_TRUE])
m4trace:configure.ac:1152: -1- _AM_SUBST_NOTMAKE([DO_BUILD_MACROAVE_FALSE])
m4trace:configure.ac:1152: -1- m4_pattern_allow([^USE_MACROAVE$])
m4trace:configure.ac:1152: -1- m4_pattern_allow([^HAVE_MEM_PROFILING$])
m4trace:configure.ac:1152: -1- m4_pattern_allow([^HAVE_MPI2_INPLACE$])
m4trace:configure.ac:1152: -1- m4_pattern_allow([^HAVE_MPI_IO_DEFAULT$])
m4trace:configure.ac:1152: -1- m4_pattern_allow([^HAVE_NETCDF_DEFAULT$])
m4trace:configure.ac:1152: -1- m4_pattern_allow([^HAVE_OPENMP$])
m4trace:configure.ac:1152: -1- m4_pattern_allow([^READ_FROM_FILE$])
m4trace:configure.ac:1152: -1- m4_pattern_allow([^HAVE_TRIQS_v1_4$])
m4trace:configure.ac:1152: -1- m4_pattern_allow([^HAVE_TRIQS_v2_0$])
m4trace:configure.ac:1152: -1- m4_pattern_allow([^HAVE_WANNIER90_V1$])
m4trace:configure.ac:1152: -1- m4_pattern_allow([^HAVE_LIBXML$])
m4trace:configure.ac:1152: -1- m4_pattern_allow([^HAVE_LINALG_ZDOTC_BUG$])
m4trace:configure.ac:1152: -1- m4_pattern_allow([^HAVE_LINALG_ZDOTU_BUG$])
m4trace:configure.ac:1164: -1- ABI_MSG_SECTION([Subsystems])
m4trace:configure.ac:1167: -1- ABI_SUBSYSTEMS_INIT
m4trace:configure.ac:1167: -1- m4_pattern_allow([^subdirs$])
m4trace:configure.ac:1170: -1- ABI_FALLBACKS_PARAMS
m4trace:configure.ac:1170: -1- m4_pattern_allow([^run_atompaw$])
m4trace:configure.ac:1170: -1- m4_pattern_allow([^run_graphatom$])
m4trace:configure.ac:1170: -1- m4_pattern_allow([^run_etsf_io$])
m4trace:configure.ac:1170: -1- m4_pattern_allow([^run_nc_config$])
m4trace:configure.ac:1170: -1- m4_pattern_allow([^run_nccopy$])
m4trace:configure.ac:1170: -1- m4_pattern_allow([^run_ncdump$])
m4trace:configure.ac:1170: -1- m4_pattern_allow([^run_ncgen$])
m4trace:configure.ac:1170: -1- m4_pattern_allow([^run_ncgen3$])
m4trace:configure.ac:1170: -1- m4_pattern_allow([^run_wannier90_x$])
m4trace:configure.ac:1170: -1- m4_pattern_allow([^run_postw90_x$])
m4trace:configure.ac:1170: -1- m4_pattern_allow([^run_w90chk2chk_x$])
m4trace:configure.ac:1186: -1- ABI_MSG_SECTION([Output])
m4trace:configure.ac:1192: -1- ABI_OUTPUT
m4trace:configure.ac:1192: -1- m4_pattern_allow([^LIB@&t@OBJS$])
m4trace:configure.ac:1192: -1- m4_pattern_allow([^LTLIBOBJS$])
m4trace:configure.ac:1192: -1- AM_CONDITIONAL([am__EXEEXT], [test -n "$EXEEXT"])
m4trace:configure.ac:1192: -1- m4_pattern_allow([^am__EXEEXT_TRUE$])
m4trace:configure.ac:1192: -1- m4_pattern_allow([^am__EXEEXT_FALSE$])
m4trace:configure.ac:1192: -1- _AM_SUBST_NOTMAKE([am__EXEEXT_TRUE])
m4trace:configure.ac:1192: -1- _AM_SUBST_NOTMAKE([am__EXEEXT_FALSE])
m4trace:configure.ac:1192: -1- _AC_AM_CONFIG_HEADER_HOOK(["$ac_file"])
m4trace:configure.ac:1192: -1- _AM_OUTPUT_DEPENDENCY_COMMANDS
m4trace:configure.ac:1203: -1- ABI_MSG_SECTION([Final remarks])
m4trace:configure.ac:1207: -1- ABI_MSG_NOTICE([linalg-abinit], [Suboptimal linear algebra configuration])
m4trace:configure.ac:1210: -1- ABI_MSG_NOTICE([gpu-without-magma], [Suboptimal GPU configuration])
m4trace:configure.ac:1212: -1- ABI_MSG_FC_BUGGY([${abi_fc_vendor}])
m4trace:configure.ac:1212: -1- ABI_MSG_NOTICE([fc-absoft], [About the ABSoft Fortran compiler])
m4trace:configure.ac:1212: -1- ABI_MSG_NOTICE([fc-ibm], [About the IBM XL Fortran compiler])
m4trace:configure.ac:1212: -1- ABI_MSG_NOTICE([fc-intel], [About the Intel Fortran compiler])
m4trace:configure.ac:1215: -1- ABI_MSG_NOTICE([etsf_io-deprecated], [Upcoming end of ETSF_IO library support])
m4trace:configure.ac:1217: -1- ABI_MSG_END
